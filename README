Proof: docs.heroku.com
======================

This is a quick proof of a `docs.heroku.com` user app. It's a tiny (~35 LOC)
Sinatra app that uses ERB for basic templating and Markdown for doc topics. Each
doc topic is stored in a separate text file under `./docs` and made available at
the top-level of the URL hierarchy (i.e., `docs/heroku-command.txt` is
`http://docs.heroku.com/heroku-command`). The [main index](/) `./docs/index.txt`
links to each doc topic.

I've brought in a few topics from the existing docs (`docs/main.txt` in the
`core` repo) to get a feel for what things might look like. Not all of the docs
were converted and some of the converted doc could use some additional
formatting tweaks.

### Enhancements (compared to current doc system):

  * Basic Heroku theme

  * Easy to run locally while writing/editing docs for live preview.

  * Separate files/URLs for each topic - would allow us to pass draft
    links around to beta users or for internal review before linking to topic
    from main doc index.

  * Giving each topic a separate URL also helps with search engines, analytics
    tracking, and linking in general.

  * Ready to grow into more advanced/interactive features like commenting,
    feeds, etc.

  * Enables "live docs", like a list of currently installed gems
    (see [http://gems.heroku.com](http://gems.heroku.com)).

  * Eating our own dog food (user app, collaboration)

### Deficiencies (compared to current doc system):

  * AsciiDoc (used in the current doc system) has a lot of nifty features
    not present in Markdown, Textile, or any other humane text format readily
    available in library form for Ruby. For example, TOCs, side-bars,
    admonitions, PDF/print output, etc.

  * The current doc system does not rely on Heroku's deployment platform being
    available and is served from purely static files. The user app approach is
    a bit more complicated / less reliable in this regard.

### Notes / Open Issues

  * I chose Markdown only because I'm familiar with it. We could very easily go
    with Textile, some other humane text format, or even raw HTML + ERB.

  * Converting from AsciiDoc to Markdown was trivial. The existing docs could be
    moved to Markdown or some other format within a couple of hours.

  * How to organize the topic index? In this proof, I've experimented with
    splitting topics into two broad categories: "Guides", which are fairly
    lengthy narratives on how some thing works and how to use it, and "HOWTOs",
    which are short / FAQ-like topics on how to do very specific tasks. This
    obviously needs a lot more thinking. A simple list of topics is probably a
    better approach for now.

  * I didn't spend much time on the styling at all. I pulled the CSS from
    heroku.com and made a few tiny adjustments. This would obviously need quite
    a bit more work. I was surprised to find that the actual topic copy was
    well-styled without any real changes to the CSS at all.
