<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Log" parent="Rho">
        <HELP_OVERVIEW> Use this api to control the behavior of the RhoMobile Log API as well as access it.</HELP_OVERVIEW>
        <MORE_HELP></MORE_HELP>
        
        <TEMPLATES>
        </TEMPLATES>

        <PROPERTIES access="STATIC" generateAccessors="true">
            
            <PROPERTY name="level" type="INTEGER">
                <DESC>Logging level.</DESC>
                <VALUES>
                    <VALUE constName="LEVEL_TRACE" value = "0">
                        <DESC></DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_INFO" value = "1">
                        <DESC></DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_WARNING" value = "2">
                        <DESC></DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_ERROR" value = "3">
                        <DESC></DESC>
                    </VALUE>
                    <VALUE constName="LEVEL_FATAL" value = "4">
                        <DESC></DESC>
                    </VALUE>
                </VALUES>
            </PROPERTY>

            <PROPERTY name="destination" type="ARRAY">
                <DESC>List of log destinations</DESC>
                <VALUES>
                    <VALUE constName="DEST_FILE" value ="file">
                        <DESC></DESC>
                    </VALUE>
                    <VALUE constName="DEST_OUTPUT" value ="stdio">
                        <DESC></DESC>
                    </VALUE>
                    <VALUE constName="DEST_URI" value ="uri">
                        <DESC></DESC>
                    </VALUE>
                </VALUES>
            </PROPERTY>

            <PROPERTY name="includeCategories" type="STRING" default="*">
                <DESC>Comma-separated list of included log categories. Set to '*' to log all categories.</DESC>
            </PROPERTY>

            <PROPERTY name="excludeCategories" type="STRING" default="">
                <DESC>Comma-separated list of excluded log categories</DESC>
            </PROPERTY>

            <PROPERTY name="fileSize" type="INTEGER" default="0">
                <DESC>Maximum log file size in bytes, set 0 to unlimited size; when limit is reached, log wraps to beginning of file</DESC>
            </PROPERTY>

            <PROPERTY name="filePath" type="STRING" default="rholog.txt">
                <DESC>Path to the log file including file name. Path related to the platform specific application root or start if from '/'('/mnt/sdcard/myapp.log').</DESC>
            </PROPERTY>

            <PROPERTY name="memoryPeriod" type="INTEGER" default="0">
                <DESC>Enables the logging of memory usage in the system; specifies the time interval in milliseconds at which memory logs will be generated periodically.</DESC>
            </PROPERTY>

            <PROPERTY name="netTrace" type="BOOLEAN" default="false">
                <DESC>Turn on local http server traces.</DESC>
                <PLATFORM>Android, iOS, WP8</PLATFORM>
            </PROPERTY>

            <PROPERTY name="skipPost" type="BOOLEAN" default="false">
                <DESC>Skip http package body from log(for security reasons).</DESC>
            </PROPERTY>

            <PROPERTY name="excludeFilter" type="STRING" default="">
                <DESC>Define exclude parameters log filter(for security reasons) - parameter names separated by comma.</DESC>
            </PROPERTY>

            <PROPERTY name="destinationURI" type="STRING" default="">
                <DESC>Log server URI where log will be posted by using Rho::Log.sendLogFile or from the log view. Log server source code is open and available at http://github.com/rhomobile/rhologs, so you can deploy your own logserver. URI format: 'http://host:port[/path][?log_name=appName]'.</DESC>
            </PROPERTY>

        </PROPERTIES>

        <METHODS  access="STATIC">
            <ALIASES>
            </ALIASES>

            <METHOD name="trace">
                <DESC>Log message at the Trace level.</DESC>

                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>

                </PARAMS>
            </METHOD>

            <METHOD name="info">
                <DESC>Log message at the Info level.</DESC>

                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>

                </PARAMS>
            </METHOD>

            <METHOD name="warning">
                <DESC>Log message at the Warning level.</DESC>

                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>

                </PARAMS>
            </METHOD>

            <METHOD name="error">
                <DESC>Log message at the Error level.</DESC>

                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="fatalError">
                <DESC>Log message at the FatalError level.</DESC>

                <PARAMS>
                    <PARAM name="message" type="STRING">
                        <DESC>Log message.</DESC>
                    </PARAM>
                    <PARAM name="category" type="STRING" default="APP">
                        <DESC>Log category.</DESC>
                    </PARAM>
                </PARAMS>
            </METHOD>

            <METHOD name="sendLogFile" hasCallback="optional">
                <DESC>Send log file to destinationURI property.</DESC>
            </METHOD>

            <METHOD name="showLog">
                <DESC>Display Log view window.</DESC>
            </METHOD>

            <METHOD name="cleanLogFile">
                <DESC>Clean log file.</DESC>
            </METHOD>

            <METHOD name="readLogFile">
                <DESC>Read log file.</DESC>

                <PARAMS>
                    <PARAM name="limit" type="INTEGER">
                        <DESC>Maximum size of the resulting string in symbols.</DESC>
                    </PARAM>
                </PARAMS>

                <RETURN type="STRING"/>
            </METHOD>

        </METHODS>
        
        <USER_OVERVIEW>
            <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
            <![CDATA[]]>
    
        </USER_OVERVIEW>
        <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
        <PLATFORM>
            <!--  This section is used for the supported platform images at the top -->
        </PLATFORM>
        <EXAMPLES >
           <EXAMPLE title="Show log file">
               <SECTIONS>
               <SECTION>
               <DESC>
                   Show the contents of the log file in a window with controls to refresh, clear and send. Useful for debugging and when asking users to report error messages
               </DESC>
               <CODE lang='ruby'>
           <![CDATA[
Rho::Log.showLog]]>

               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
          <EXAMPLE title="Read log file content">
               <SECTIONS>
               <SECTION>
               <DESC>
                   Retrieve the contents of the log file as a string
               </DESC>
               <CODE lang='ruby'>
           <![CDATA[
# Read at most 16384 symbols
logFileContent = Rho::Log.readLogFile 16384]]>

               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Clean log file">
               <SECTIONS>
               <SECTION>
               <DESC>
                   Clear the contents of the log file. In this example, logFileContentBefore will contain the log up until that point, while logFileContentAfter will be empty
               </DESC>
               <CODE lang='ruby'>
           <![CDATA[
# Read log file
logFileContentBefore = Rho::Log.readLogFile 16384

# Clear log file
Rho::Log.cleanLogFile

# Read log file again - this time it will be empty
logFileContentAfter = Rho::Log.readLogFile 16384]]>

               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Logging categories">
               <SECTIONS>
               <SECTION>
               <DESC>
                   Categories help you organize your logging messages and find related statements using tools like grep or a text editor's "search" function.
               </DESC>
               <CODE lang='ruby'>
           <![CDATA[
Rho::Log.info("Consectetuer adipiscing elit", "Lorem Ipsum")
Rho::Log.info("Foo acquired value Bar in method Baz", "Miscellaneous")]]>

               </CODE>
               </SECTION>
               <SECTION>
               <DESC>
                   The above code will result in logging statements like these:
               </DESC>
               <CODE lang='ruby'>
           <![CDATA[
Lorem Ipsum| Consectetuer adipiscing elit
Miscellaneous| Foo acquired value Bar in method Baz]]>

               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
           <EXAMPLE title="Memory Usage">
               <SECTIONS>
               <SECTION>
               <DESC>
                   You can ask the system to automatically log memory usage information on a set interval. 
                   This can be used to debug potential memory leaks in operations where a high number of objects are touched in memory. 
               </DESC>
               <CODE lang='ruby'>
           <![CDATA[
# Request that memory usage be logged automatically by the system every second.
Rho::Log.memoryPeriod = 1000
# Perform memory-intensive operations here. Examining the log will tell us if we have a memory leak
# Once our task finishes, disable automatic memory logging
Rho::Log.memoryPeriod = 0]]>

               </CODE>
               </SECTION>
               <SECTION>
               <DESC>
                   The same API is available in Javascript
               </DESC>
               <CODE lang='javascript'>
           <![CDATA[
Rho.Log.memoryPeriod = 1000;
// Perform memory-intensive operations here. Examining the log will tell us if we have a memory leak
// Once our task finishes, disable automatic memory logging
Rho.Log.memoryPeriod = 0;]]>

               </CODE>
               </SECTION>
               </SECTIONS>
           </EXAMPLE>
       </EXAMPLES>
    </MODULE>
</API>    