<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
  <MODULE name="OrmObject" parent="Orm">
    <HELP_OVERVIEW></HELP_OVERVIEW>
    <MORE_HELP></MORE_HELP>

    <TEMPLATES>
    </TEMPLATES>

    <PROPERTIES>
    </PROPERTIES>

    <METHODS>
      <ALIASES>
        <ALIAS new="changed?" existing="isChanged"></ALIAS>

      </ALIASES>
      <METHOD name="destroy" generateAPI="false">
        <DESC>Destroy a Rhodes model object. Click here for a Orm destroy example.</DESC>
      </METHOD>
      <METHOD name="canModify" generateAPI="false">
        <DESC>Returns true if the Rhodes model object is not currently being synced (if it is being synced, you should
          disable editing of the object). Click here for a Orm can_modify example.
          Before displaying an edit page for an object, your application can check if the object is currently being
          accessed by the sync process. If it is, you should disable editing of the object. can_modify could return
          true, for example, on a new local record that was created and sent to the RhoConnect application, but no
          response has been received yet.
        </DESC>
        <RETURN type="BOOLEAN"/>
      </METHOD>
      <METHOD name="save" generateAPI="false">
        <DESC>Saves the current Rhodes model object to the database. Click here for a Orm save example.
        </DESC>
      </METHOD>
      <METHOD name="updateAttributes" generateAPI="false">
        <DESC>Updates the current Rho model object attributes and saves it to the database. This is the fastest way to
          add or update model attributes. Click here for a Orm update_attributes example.
        </DESC>
        <PARAMS>
          <PARAM name="attributes" type="HASH">
            <DESC>List of attributes and their updated values, such as {"name" => "ABC Inc.","address" => "555 5th
              St."}.
            </DESC>
          </PARAM>
        </PARAMS>
      </METHOD>
    </METHODS>

    <USER_OVERVIEW>
      <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
      <![CDATA[]]>

    </USER_OVERVIEW>
    <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
    <PLATFORM>
      <!--  This section is used for the supported platform images at the top -->
    </PLATFORM>
    <EXAMPLES>
      <EXAMPLE title="Orm Destroy Method Examples">
        <SECTIONS>
          <SECTION>
            <DESC>
              Destroy a Rhodes model object.
            </DESC>
            <CODE>
              <RUBY>
                <![CDATA[
@account = Account.find(:first)
@account.destroy]]>
              </RUBY>
              <JAVASCRIPT>
                <![CDATA[
var account = Account.find('first');
account.destroy();]]>
              </JAVASCRIPT>

            </CODE>

          </SECTION>
        </SECTIONS>
      </EXAMPLE>
      <EXAMPLE title="Orm UpdateAttributes Method Example">
        <SECTIONS>
          <SECTION>
            <DESC>Update the current Orm objectâ€™s attributes and saves it to the database.</DESC>
            <CODE>
              <RUBY>
                <![CDATA[
account = Account.find(
  :first,
  :conditions => {'name' => 'ABC Inc.'}
)
account.update_attributes({"name" => "ABC Inc.", "industry" => "Technology"})

account.industry
  #=> "Technology" ]]>
              </RUBY>
              <JAVASCRIPT>
                <![CDATA[
var account = Account.find("first", {conditions: {name: "ABC Inc."});
account.updateAttributes({name: "ABC Inc.", industry: "Technology"});
account.industry // "Technology" ]]>
              </JAVASCRIPT>
            </CODE>
          </SECTION>
        </SECTIONS>
      </EXAMPLE>
      <EXAMPLE title="Orm Save Method Example">
        <SECTIONS>
          <SECTION>
            <DESC>Saves the current Orm object to the database.</DESC>
            <CODE>
              <RUBY>
                <![CDATA[
account = Account.new({"name" => "some new record", "industry" => "electronics"})
account.save ]]>
              </RUBY>
              <JAVASCRIPT>
                <![CDATA[
var account = Account.new({name: "some new record", industry: "electronics"});
account.save(); ]]>
              </JAVASCRIPT>
            </CODE>
          </SECTION>

        </SECTIONS>
      </EXAMPLE>
      <EXAMPLE title="Orm CanModify Method Example">
        <SECTIONS>
          <SECTION>
            <DESC>Before displaying an edit page for an object, your application can check if the object is currently
              being accessed by the sync process. If it is, you should disable editing of the object. canModify could
              return true, for example, on a new local record that was created and sent to the RhoConnect application,
              but no response has been received yet.
            </DESC>
            <CODE>
              <RUBY>
                <![CDATA[
def edit
  @product = Product.find(@params['id'])
  if @product && !@product.can_modify
    render :action => :show_edit_error
  else
    render :action => :edit
  end
end  ]]>
              </RUBY>
            </CODE>
          </SECTION>
        </SECTIONS>
      </EXAMPLE>
    </EXAMPLES>
  </MODULE>
</API>
