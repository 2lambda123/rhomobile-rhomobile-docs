<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
  <MODULE name="RhomObject" parent="Rhom">
    <HELP_OVERVIEW></HELP_OVERVIEW>
    <MORE_HELP></MORE_HELP>

    <TEMPLATES>
    </TEMPLATES>

    <PROPERTIES>
      <PROPERTY name="client_id" access="STATIC" type="STRING" readOnly="true" generateAPI="false">
        <DESC>Returns the current sync client id.</DESC>
      </PROPERTY>

      <PROPERTY name="metadata" access="STATIC" type="HASH" generateAPI="false">
        <DESC>Returns the metadata definition for a given model as a hash. Click here for a Rhom metadata example.
          Assigns the JSON metadata definition for a given model. Click here for a Rhom metadata example.
        </DESC>
      </PROPERTY>
    </PROPERTIES>

    <METHODS>
      <ALIASES>
      </ALIASES>

      <METHOD name="clear_notification" generateAPI="false" access="STATIC">
        <DESC>Clear notification for the object. See the sync notification section for more details.</DESC>
      </METHOD>

      <METHOD name="delete_all" generateAPI="false" access="STATIC">
        <DESC>Delete all Rhodes model objects for a source, filtering by conditions. Click here for a Rhom delete_all
          example.
        </DESC>
        <PARAMS>
          <PARAM name="conditions" type="HASH">
            <DESC>hash of attribute/values; delete only objects matching these criteria, such as :conditions =>
              {'industry'=>'electronics'}.
            </DESC>
            <CAN_BE_NIL/>
          </PARAM>
          <PARAM name="op" type="STRING">
            <DESC>(optional) operator, such as "OR" or "IN". Allows you to have more than one set of conditions.</DESC>
            <CAN_BE_NIL/>
          </PARAM>
        </PARAMS>
      </METHOD>

      <METHOD name="destroy" generateAPI="false" access="STATIC">
        <DESC>Destroy a Rhodes model object. Click here for a Rhom destroy example.</DESC>
      </METHOD>

      <METHOD name="find" generateAPI="false" access="STATIC">
        <DESC>Find Rhodes model objects. Click here for a Rhom find example. For examples of find with advanced queries,
          see Advanced Queries in Using the Local Database with Rhom.
        </DESC>
        <PARAMS>
          <PARAM name="queryType" type="STRING">
            <VALUES>
              <VALUE value="all" type="STRING">
                <DESC>returns all objects; can use optional :conditions.</DESC>
              </VALUE>
              <VALUE value="first" type="STRING">
                <DESC>returns first object matching :conditions.</DESC>
              </VALUE>
              <VALUE value="count" type="STRING">
                <DESC>returns the number of objects matching these :conditions.</DESC>
              </VALUE>
            </VALUES>
          </PARAM>
          <PARAM name="conditions" type="HASH">
            <DESC>Hash of attribute/values. Also supports sql fragments (i.e. "name like 'rhomobile'") or sql fragment
              with binding (you have to define :select with sql queries) (i.e. ["name like ?", "'#{company#}'"]) Use a
              comma around string values.
            </DESC>
            <CAN_BE_NIL/>
          </PARAM>
          <PARAM name="order" type="STRING">
            <DESC>Attribute(s) to order the list.</DESC>
            <CAN_BE_NIL/>
          </PARAM>

          <PARAM name="orderdir" type="STRING">
            <DESC>Order direction: 'ASC' ascending, 'DESC' descending. Default = 'ASC'.)</DESC>
            <CAN_BE_NIL/>
          </PARAM>

          <PARAM name="select" type="ARRAY">
            <DESC>Array of string attributes to return with the object. Useful if your model has many attributes and
              your query only needs a few of them.
            </DESC>
            <CAN_BE_NIL/>
          </PARAM>

          <PARAM name="per_page" type="INTEGER">
            <DESC>Maximum number of items to return.</DESC>
            <CAN_BE_NIL/>
          </PARAM>

          <PARAM name="offset" type="INTEGER">
            <DESC>Offset from beginning of the list.</DESC>
            <CAN_BE_NIL/>
          </PARAM>

          <PARAM name="op" type="STRING">
            <DESC>(optional) operator, such as "OR" or "IN". Allows you to have more than one set of conditions.</DESC>
            <CAN_BE_NIL/>
          </PARAM>
        </PARAMS>
        <RETURN type="ARRAY"/>
      </METHOD>

      <METHOD name="find_all" generateAPI="false" access="STATIC">
        <DESC>Alias for modelname.find(:all, argument list).</DESC>
        <RETURN type="ARRAY"/>
      </METHOD>

      <METHOD name="find_by_sql" generateAPI="false" access="STATIC">
        <DESC>Returns Rhodes model object(s) based on sql_query. This method works only for schema models. Click here
          for a Rhom find_by_sql example.
        </DESC>
        <PARAMS>
          <PARAM name="query" type="STRING">
            <DESC>An sql query, such as "SELECT * FROM Account".</DESC>
          </PARAM>
        </PARAMS>
        <RETURN type="ARRAY"/>
      </METHOD>

      <METHOD name="get_source_name" generateAPI="false" access="STATIC">
        <DESC>Returns the source name for this Rhodes model object.</DESC>
        <RETURN type="STRING"/>
      </METHOD>


      <METHOD name="new" generateAPI="false" access="STATIC">
        <DESC>Create a new Rhodes model object. Rhom new example.</DESC>
        <PARAMS>
          <PARAM name="attributes" type="HASH">
            <DESC>List of attributes assigned to the new model object, such as {"name" => "ABC Inc.","address" => "555
              5th St."}.
            </DESC>
          </PARAM>
        </PARAMS>
        <RETURN type="OBJECT"/>
      </METHOD>

      <METHOD name="create" generateAPI="false" access="STATIC">
        <DESC>Create a new Rhodes model object and save it to the database.Rhom create example. This is the fastest way
          to insert a single item into the database.
        </DESC>
        <PARAMS>
          <PARAM name="attributes" type="HASH">
            <DESC>List of attributes assigned to the new model object, such as {"name" => "ABC Inc.","address" => "555
              5th St."}.
            </DESC>
          </PARAM>
        </PARAMS>
        <RETURN type="OBJECT"/>
      </METHOD>

      <METHOD name="paginate" generateAPI="false" access="STATIC">
        <DESC>Call find with a limit on the number of records. Default page size is 10. Rhom paginate example.</DESC>
        <PARAMS>
          <PARAM name="page" type="INTEGER">
            <DESC>which page to return.</DESC>
          </PARAM>

          <PARAM name="per_page" type="INTEGER">
            <DESC>with :page (used as offset), the number of records to return, such as :page => 1, :per_page => 20
            </DESC>
          </PARAM>

          <PARAM name="conditions" type="HASH">
            <DESC>same as find with :conditions</DESC>
          </PARAM>

          <PARAM name="order" type="STRING">
            <DESC>same as find with :conditions</DESC>
          </PARAM>

          <PARAM name="select" type="ARRAY">
            <DESC>same as find with :select</DESC>
          </PARAM>

        </PARAMS>
        <RETURN type="ARRAY"/>
      </METHOD>


      <METHOD name="sync" generateAPI="false" access="STATIC">
        <DESC>Start the sync process for a Rhodes model. Click here for a Rhom sync example.</DESC>
        <PARAMS>
          <PARAM name="callback_url" type="STRING">
            <DESC>the url for the sync callback method. If this is used, SyncEngine.set_notification is called before
              SyncEngine.dosync.
            </DESC>
          </PARAM>

          <PARAM name="callback_data" type="STRING">
            <DESC>Data for the callback method.</DESC>
          </PARAM>

          <PARAM name="show_status_popup" type="BOOLEAN">
            <DESC>true if you want to show a popup window upon sync, false otherwise.</DESC>
            <CAN_BE_NIL/>
          </PARAM>

          <PARAM name="query_params" type="STRING">
            <DESC>query to pass to the sync server. The query_params value must be URL encoded.</DESC>
            <CAN_BE_NIL/>
          </PARAM>
        </PARAMS>
      </METHOD>

      <METHOD name="can_modify" generateAPI="false">
        <DESC>Returns true if the Rhodes model object is not currently being synced (if it is being synced, you should
          disable editing of the object). Click here for a Rhom can_modify example.
          Before displaying an edit page for an object, your application can check if the object is currently being
          accessed by the sync process. If it is, you should disable editing of the object. can_modify could return
          true, for example, on a new local record that was created and sent to the RhoConnect application, but no
          response has been received yet.
        </DESC>
        <RETURN type="BOOLEAN"/>
      </METHOD>

      <METHOD name="changed?" generateAPI="false" access="STATIC">
        <DESC>Returns true if a Rhodes model object has local database changes that need to be synchronized, false
          otherwise. Click here for a Rhom changed? example.
        </DESC>
        <RETURN type="BOOLEAN"/>
      </METHOD>

      <METHOD name="save" generateAPI="false">
        <DESC>Saves the current Rhodes model object to the database. Click here for a Rhom save example.
        </DESC>
      </METHOD>

      <METHOD name="set_notification" generateAPI="false" access="STATIC">
        <DESC>Saves the current Rhodes model object to the database. Click here for a Rhom save example.
        </DESC>
        <PARAMS>
          <PARAM name="callback_url" type="STRING">
            <DESC>the url for your sync is finished notification callback method.
            </DESC>
          </PARAM>

          <PARAM name="params" type="STRING">
            <DESC>parameters for the callback method.</DESC>
            <CAN_BE_NIL/>
          </PARAM>
        </PARAMS>
      </METHOD>

      <METHOD name="update_attributes" generateAPI="false">
        <DESC>Updates the current Rho model object attributes and saves it to the database. This is the fastest way to
          add or update model attributes. Click here for a Rhom update_attributes example.
        </DESC>
        <PARAMS>
          <PARAM name="attributes" type="HASH">
            <DESC>List of attributes and their updated values, such as {"name" => "ABC Inc.","address" => "555 5th
              St."}.
            </DESC>
          </PARAM>
        </PARAMS>
      </METHOD>


    </METHODS>

    <USER_OVERVIEW>
      <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
      <![CDATA[]]>

    </USER_OVERVIEW>
    <VER_INTRODUCED>1.0.0</VER_INTRODUCED>
    <PLATFORM>
      <!--  This section is used for the supported platform images at the top -->
    </PLATFORM>
  </MODULE>
</API>    