#Barcode
<div class="btn-group"><a href="#Examples" class="btn"><i class="icon-edit"></i> Examples<sup>&nbsp;1</sup></a><button href="#" class="btn dropdown-toggle" data-toggle="dropdown">  <span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a href="#e0" data-target="eExample0" class="autouncollapse">Basic Example</a></li></ul></div><div class="btn-group"><a href="#Properties" class="btn"><i class="icon-list"></i> Properties<sup>&nbsp;213</sup></a><button href="#" class="btn dropdown-toggle" data-toggle="dropdown">  <span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a href="#padaptiveScanning" data-target="cPropertyadaptiveScanning" class="autouncollapse">adaptiveScanning</a></li><li><a href="#paimMode" data-target="cPropertyaimMode" class="autouncollapse">aimMode</a></li><li><a href="#paimType" data-target="cPropertyaimType" class="autouncollapse">aimType</a></li><li><a href="#pallDecoders" data-target="cPropertyallDecoders" class="autouncollapse">allDecoders</a></li><li><a href="#pausPostal" data-target="cPropertyausPostal" class="autouncollapse">ausPostal</a></li><li><a href="#pautoEnter" data-target="cPropertyautoEnter" class="autouncollapse">autoEnter</a></li><li><a href="#pautoTab" data-target="cPropertyautoTab" class="autouncollapse">autoTab</a></li><li><a href="#paztec" data-target="cPropertyaztec" class="autouncollapse">aztec</a></li><li><a href="#pbarcodeDataFormat" data-target="cPropertybarcodeDataFormat" class="autouncollapse">barcodeDataFormat</a></li><li><a href="#pbeamWidth" data-target="cPropertybeamWidth" class="autouncollapse">beamWidth</a></li><li><a href="#pbidirectionalRedundancy" data-target="cPropertybidirectionalRedundancy" class="autouncollapse">bidirectionalRedundancy</a></li><li><a href="#pcanPostal" data-target="cPropertycanPostal" class="autouncollapse">canPostal</a></li><li><a href="#pchinese2of5" data-target="cPropertychinese2of5" class="autouncollapse">chinese2of5</a></li><li><a href="#pcodabar" data-target="cPropertycodabar" class="autouncollapse">codabar</a></li><li><a href="#pcodabarClsiEditing" data-target="cPropertycodabarClsiEditing" class="autouncollapse">codabarClsiEditing</a></li><li><a href="#pcodabarMaxLength" data-target="cPropertycodabarMaxLength" class="autouncollapse">codabarMaxLength</a></li><li><a href="#pcodabarMinLength" data-target="cPropertycodabarMinLength" class="autouncollapse">codabarMinLength</a></li><li><a href="#pcodabarNotisEditing" data-target="cPropertycodabarNotisEditing" class="autouncollapse">codabarNotisEditing</a></li><li><a href="#pcodabarRedundancy" data-target="cPropertycodabarRedundancy" class="autouncollapse">codabarRedundancy</a></li><li><a href="#pcode11" data-target="cPropertycode11" class="autouncollapse">code11</a></li><li><a href="#pcode11checkDigitCount" data-target="cPropertycode11checkDigitCount" class="autouncollapse">code11checkDigitCount</a></li><li><a href="#pcode11maxLength" data-target="cPropertycode11maxLength" class="autouncollapse">code11maxLength</a></li><li><a href="#pcode11minLength" data-target="cPropertycode11minLength" class="autouncollapse">code11minLength</a></li><li><a href="#pcode11redundancy" data-target="cPropertycode11redundancy" class="autouncollapse">code11redundancy</a></li><li><a href="#pcode11reportCheckDigit" data-target="cPropertycode11reportCheckDigit" class="autouncollapse">code11reportCheckDigit</a></li><li><a href="#pcode128" data-target="cPropertycode128" class="autouncollapse">code128</a></li><li><a href="#pcode128checkIsBtTable" data-target="cPropertycode128checkIsBtTable" class="autouncollapse">code128checkIsBtTable</a></li><li><a href="#pcode128ean128" data-target="cPropertycode128ean128" class="autouncollapse">code128ean128</a></li><li><a href="#pcode128isbt128" data-target="cPropertycode128isbt128" class="autouncollapse">code128isbt128</a></li><li><a href="#pcode128isbt128ConcatMode" data-target="cPropertycode128isbt128ConcatMode" class="autouncollapse">code128isbt128ConcatMode</a></li><li><a href="#pcode128maxLength" data-target="cPropertycode128maxLength" class="autouncollapse">code128maxLength</a></li><li><a href="#pcode128minLength" data-target="cPropertycode128minLength" class="autouncollapse">code128minLength</a></li><li><a href="#pcode128other128" data-target="cPropertycode128other128" class="autouncollapse">code128other128</a></li><li><a href="#pcode128redundancy" data-target="cPropertycode128redundancy" class="autouncollapse">code128redundancy</a></li><li><a href="#pcode128securityLevel" data-target="cPropertycode128securityLevel" class="autouncollapse">code128securityLevel</a></li><li><a href="#pcode39" data-target="cPropertycode39" class="autouncollapse">code39</a></li><li><a href="#pcode39code32Prefix" data-target="cPropertycode39code32Prefix" class="autouncollapse">code39code32Prefix</a></li><li><a href="#pcode39convertToCode32" data-target="cPropertycode39convertToCode32" class="autouncollapse">code39convertToCode32</a></li><li><a href="#pcode39fullAscii" data-target="cPropertycode39fullAscii" class="autouncollapse">code39fullAscii</a></li><li><a href="#pcode39maxLength" data-target="cPropertycode39maxLength" class="autouncollapse">code39maxLength</a></li><li><a href="#pcode39minLength" data-target="cPropertycode39minLength" class="autouncollapse">code39minLength</a></li><li><a href="#pcode39redundancy" data-target="cPropertycode39redundancy" class="autouncollapse">code39redundancy</a></li><li><a href="#pcode39reportCheckDigit" data-target="cPropertycode39reportCheckDigit" class="autouncollapse">code39reportCheckDigit</a></li><li><a href="#pcode39securityLevel" data-target="cPropertycode39securityLevel" class="autouncollapse">code39securityLevel</a></li><li><a href="#pcode39verifyCheckDigit" data-target="cPropertycode39verifyCheckDigit" class="autouncollapse">code39verifyCheckDigit</a></li><li><a href="#pcode93" data-target="cPropertycode93" class="autouncollapse">code93</a></li><li><a href="#pcode93maxLength" data-target="cPropertycode93maxLength" class="autouncollapse">code93maxLength</a></li><li><a href="#pcode93minLength" data-target="cPropertycode93minLength" class="autouncollapse">code93minLength</a></li><li><a href="#pcode93redundancy" data-target="cPropertycode93redundancy" class="autouncollapse">code93redundancy</a></li><li><a href="#pcompositeAb" data-target="cPropertycompositeAb" class="autouncollapse">compositeAb</a></li><li><a href="#pcompositeAbUccLinkMode" data-target="cPropertycompositeAbUccLinkMode" class="autouncollapse">compositeAbUccLinkMode</a></li><li><a href="#pcompositeAbUseUpcPreambleCheckDigitRules" data-target="cPropertycompositeAbUseUpcPreambleCheckDigitRules" class="autouncollapse">compositeAbUseUpcPreambleCheckDigitRules</a></li><li><a href="#pcompositeC" data-target="cPropertycompositeC" class="autouncollapse">compositeC</a></li><li><a href="#pconnectionIdleTimeout" data-target="cPropertyconnectionIdleTimeout" class="autouncollapse">connectionIdleTimeout</a></li><li><a href="#pd2of5" data-target="cPropertyd2of5" class="autouncollapse">d2of5</a></li><li><a href="#pd2of5maxLength" data-target="cPropertyd2of5maxLength" class="autouncollapse">d2of5maxLength</a></li><li><a href="#pd2of5minLength" data-target="cPropertyd2of5minLength" class="autouncollapse">d2of5minLength</a></li><li><a href="#pd2of5redundancy" data-target="cPropertyd2of5redundancy" class="autouncollapse">d2of5redundancy</a></li><li><a href="#pdataBufferSize" data-target="cPropertydataBufferSize" class="autouncollapse">dataBufferSize</a></li><li><a href="#pdatamatrix" data-target="cPropertydatamatrix" class="autouncollapse">datamatrix</a></li><li><a href="#pdbpMode" data-target="cPropertydbpMode" class="autouncollapse">dbpMode</a></li><li><a href="#pdecodeDuration" data-target="cPropertydecodeDuration" class="autouncollapse">decodeDuration</a></li><li><a href="#pdecodeFrequency" data-target="cPropertydecodeFrequency" class="autouncollapse">decodeFrequency</a></li><li><a href="#pdecodeSound" data-target="cPropertydecodeSound" class="autouncollapse">decodeSound</a></li><li><a href="#pdecodeVolume" data-target="cPropertydecodeVolume" class="autouncollapse">decodeVolume</a></li><li><a href="#pdifferentSymbolTimeout" data-target="cPropertydifferentSymbolTimeout" class="autouncollapse">differentSymbolTimeout</a></li><li><a href="#pdisableScannerDuringNavigate" data-target="cPropertydisableScannerDuringNavigate" class="autouncollapse">disableScannerDuringNavigate</a></li><li><a href="#pdisconnectBtOnDisable" data-target="cPropertydisconnectBtOnDisable" class="autouncollapse">disconnectBtOnDisable</a></li><li><a href="#pdisplayBtAddressBarcodeOnEnable" data-target="cPropertydisplayBtAddressBarcodeOnEnable" class="autouncollapse">displayBtAddressBarcodeOnEnable</a></li><li><a href="#pdpmMode" data-target="cPropertydpmMode" class="autouncollapse">dpmMode</a></li><li><a href="#pdutchPostal" data-target="cPropertydutchPostal" class="autouncollapse">dutchPostal</a></li><li><a href="#pean13" data-target="cPropertyean13" class="autouncollapse">ean13</a></li><li><a href="#pean8" data-target="cPropertyean8" class="autouncollapse">ean8</a></li><li><a href="#pean8convertToEan13" data-target="cPropertyean8convertToEan13" class="autouncollapse">ean8convertToEan13</a></li><li><a href="#penableTimeout" data-target="cPropertyenableTimeout" class="autouncollapse">enableTimeout</a></li><li><a href="#pfocusMode" data-target="cPropertyfocusMode" class="autouncollapse">focusMode</a></li><li><a href="#pfriendlyName" data-target="cPropertyfriendlyName" class="autouncollapse">friendlyName</a></li><li><a href="#pgs1dataBar" data-target="cPropertygs1dataBar" class="autouncollapse">gs1dataBar</a></li><li><a href="#pgs1dataBarExpanded" data-target="cPropertygs1dataBarExpanded" class="autouncollapse">gs1dataBarExpanded</a></li><li><a href="#pgs1dataBarLimited" data-target="cPropertygs1dataBarLimited" class="autouncollapse">gs1dataBarLimited</a></li><li><a href="#pi2of5" data-target="cPropertyi2of5" class="autouncollapse">i2of5</a></li><li><a href="#pi2of5convertToEan13" data-target="cPropertyi2of5convertToEan13" class="autouncollapse">i2of5convertToEan13</a></li><li><a href="#pi2of5maxLength" data-target="cPropertyi2of5maxLength" class="autouncollapse">i2of5maxLength</a></li><li><a href="#pi2of5minLength" data-target="cPropertyi2of5minLength" class="autouncollapse">i2of5minLength</a></li><li><a href="#pi2of5redundancy" data-target="cPropertyi2of5redundancy" class="autouncollapse">i2of5redundancy</a></li><li><a href="#pi2of5reportCheckDigit" data-target="cPropertyi2of5reportCheckDigit" class="autouncollapse">i2of5reportCheckDigit</a></li><li><a href="#pi2of5verifyCheckDigit" data-target="cPropertyi2of5verifyCheckDigit" class="autouncollapse">i2of5verifyCheckDigit</a></li><li><a href="#pilluminationMode" data-target="cPropertyilluminationMode" class="autouncollapse">illuminationMode</a></li><li><a href="#pinvalidDecodeFrequency" data-target="cPropertyinvalidDecodeFrequency" class="autouncollapse">invalidDecodeFrequency</a></li><li><a href="#pinvalidDecodeSound" data-target="cPropertyinvalidDecodeSound" class="autouncollapse">invalidDecodeSound</a></li><li><a href="#pinverse1dMode" data-target="cPropertyinverse1dMode" class="autouncollapse">inverse1dMode</a></li><li><a href="#pjapPostal" data-target="cPropertyjapPostal" class="autouncollapse">japPostal</a></li><li><a href="#pklasseEins" data-target="cPropertyklasseEins" class="autouncollapse">klasseEins</a></li><li><a href="#pkorean3of5" data-target="cPropertykorean3of5" class="autouncollapse">korean3of5</a></li><li><a href="#pkorean3of5maxLength" data-target="cPropertykorean3of5maxLength" class="autouncollapse">korean3of5maxLength</a></li><li><a href="#pkorean3of5minLength" data-target="cPropertykorean3of5minLength" class="autouncollapse">korean3of5minLength</a></li><li><a href="#pkorean3of5redundancy" data-target="cPropertykorean3of5redundancy" class="autouncollapse">korean3of5redundancy</a></li><li><a href="#plinearSecurityLevel" data-target="cPropertylinearSecurityLevel" class="autouncollapse">linearSecurityLevel</a></li><li><a href="#plowBatteryScan" data-target="cPropertylowBatteryScan" class="autouncollapse">lowBatteryScan</a></li><li><a href="#pmacroMicroPdf" data-target="cPropertymacroMicroPdf" class="autouncollapse">macroMicroPdf</a></li><li><a href="#pmacroMicroPdfBufferLabels" data-target="cPropertymacroMicroPdfBufferLabels" class="autouncollapse">macroMicroPdfBufferLabels</a></li><li><a href="#pmacroMicroPdfConvertToMicroPdf" data-target="cPropertymacroMicroPdfConvertToMicroPdf" class="autouncollapse">macroMicroPdfConvertToMicroPdf</a></li><li><a href="#pmacroMicroPdfExclusive" data-target="cPropertymacroMicroPdfExclusive" class="autouncollapse">macroMicroPdfExclusive</a></li><li><a href="#pmacroMicroPdfReportAppendInfo" data-target="cPropertymacroMicroPdfReportAppendInfo" class="autouncollapse">macroMicroPdfReportAppendInfo</a></li><li><a href="#pmacroPdf" data-target="cPropertymacroPdf" class="autouncollapse">macroPdf</a></li><li><a href="#pmacroPdfBufferLabels" data-target="cPropertymacroPdfBufferLabels" class="autouncollapse">macroPdfBufferLabels</a></li><li><a href="#pmacroPdfConvertToPdf417" data-target="cPropertymacroPdfConvertToPdf417" class="autouncollapse">macroPdfConvertToPdf417</a></li><li><a href="#pmacroPdfExclusive" data-target="cPropertymacroPdfExclusive" class="autouncollapse">macroPdfExclusive</a></li><li><a href="#pmatrix2of5" data-target="cPropertymatrix2of5" class="autouncollapse">matrix2of5</a></li><li><a href="#pmatrix2of5maxLength" data-target="cPropertymatrix2of5maxLength" class="autouncollapse">matrix2of5maxLength</a></li><li><a href="#pmatrix2of5minLength" data-target="cPropertymatrix2of5minLength" class="autouncollapse">matrix2of5minLength</a></li><li><a href="#pmatrix2of5reportCheckDigit" data-target="cPropertymatrix2of5reportCheckDigit" class="autouncollapse">matrix2of5reportCheckDigit</a></li><li><a href="#pmatrix2of5verifyCheckDigit" data-target="cPropertymatrix2of5verifyCheckDigit" class="autouncollapse">matrix2of5verifyCheckDigit</a></li><li><a href="#pmaxiCode" data-target="cPropertymaxiCode" class="autouncollapse">maxiCode</a></li><li><a href="#pmicroPdf" data-target="cPropertymicroPdf" class="autouncollapse">microPdf</a></li><li><a href="#pmicroQr" data-target="cPropertymicroQr" class="autouncollapse">microQr</a></li><li><a href="#pmsi" data-target="cPropertymsi" class="autouncollapse">msi</a></li><li><a href="#pmsiCheckDigitScheme" data-target="cPropertymsiCheckDigitScheme" class="autouncollapse">msiCheckDigitScheme</a></li><li><a href="#pmsiCheckDigits" data-target="cPropertymsiCheckDigits" class="autouncollapse">msiCheckDigits</a></li><li><a href="#pmsiMaxLength" data-target="cPropertymsiMaxLength" class="autouncollapse">msiMaxLength</a></li><li><a href="#pmsiMinLength" data-target="cPropertymsiMinLength" class="autouncollapse">msiMinLength</a></li><li><a href="#pmsiRedundancy" data-target="cPropertymsiRedundancy" class="autouncollapse">msiRedundancy</a></li><li><a href="#pmsiReportCheckDigit" data-target="cPropertymsiReportCheckDigit" class="autouncollapse">msiReportCheckDigit</a></li><li><a href="#ppdf417" data-target="cPropertypdf417" class="autouncollapse">pdf417</a></li><li><a href="#ppicklistMode" data-target="cPropertypicklistMode" class="autouncollapse">picklistMode</a></li><li><a href="#ppoorQuality1dMode" data-target="cPropertypoorQuality1dMode" class="autouncollapse">poorQuality1dMode</a></li><li><a href="#pqrCode" data-target="cPropertyqrCode" class="autouncollapse">qrCode</a></li><li><a href="#prasterHeight" data-target="cPropertyrasterHeight" class="autouncollapse">rasterHeight</a></li><li><a href="#prasterMode" data-target="cPropertyrasterMode" class="autouncollapse">rasterMode</a></li><li><a href="#prsmBatteryCapacity" data-target="cPropertyrsmBatteryCapacity" class="autouncollapse">rsmBatteryCapacity</a></li><li><a href="#prsmBatteryId" data-target="cPropertyrsmBatteryId" class="autouncollapse">rsmBatteryId</a></li><li><a href="#prsmBatteryStatus" data-target="cPropertyrsmBatteryStatus" class="autouncollapse">rsmBatteryStatus</a></li><li><a href="#prsmBluetoothAddress" data-target="cPropertyrsmBluetoothAddress" class="autouncollapse">rsmBluetoothAddress</a></li><li><a href="#prsmBluetoothAuthentication" data-target="cPropertyrsmBluetoothAuthentication" class="autouncollapse">rsmBluetoothAuthentication</a></li><li><a href="#prsmBluetoothAutoReconnect" data-target="cPropertyrsmBluetoothAutoReconnect" class="autouncollapse">rsmBluetoothAutoReconnect</a></li><li><a href="#prsmBluetoothBeepOnReconnectAttempt" data-target="cPropertyrsmBluetoothBeepOnReconnectAttempt" class="autouncollapse">rsmBluetoothBeepOnReconnectAttempt</a></li><li><a href="#prsmBluetoothEncryption" data-target="cPropertyrsmBluetoothEncryption" class="autouncollapse">rsmBluetoothEncryption</a></li><li><a href="#prsmBluetoothFriendlyName" data-target="cPropertyrsmBluetoothFriendlyName" class="autouncollapse">rsmBluetoothFriendlyName</a></li><li><a href="#prsmBluetoothHidAutoReconnect" data-target="cPropertyrsmBluetoothHidAutoReconnect" class="autouncollapse">rsmBluetoothHidAutoReconnect</a></li><li><a href="#prsmBluetoothInquiryMode" data-target="cPropertyrsmBluetoothInquiryMode" class="autouncollapse">rsmBluetoothInquiryMode</a></li><li><a href="#prsmBluetoothPinCode" data-target="cPropertyrsmBluetoothPinCode" class="autouncollapse">rsmBluetoothPinCode</a></li><li><a href="#prsmBluetoothPinCodeType" data-target="cPropertyrsmBluetoothPinCodeType" class="autouncollapse">rsmBluetoothPinCodeType</a></li><li><a href="#prsmBluetoothReconnectionAttempts" data-target="cPropertyrsmBluetoothReconnectionAttempts" class="autouncollapse">rsmBluetoothReconnectionAttempts</a></li><li><a href="#prsmDateOfManufacture" data-target="cPropertyrsmDateOfManufacture" class="autouncollapse">rsmDateOfManufacture</a></li><li><a href="#prsmDateOfService" data-target="cPropertyrsmDateOfService" class="autouncollapse">rsmDateOfService</a></li><li><a href="#prsmDecodeFeedback" data-target="cPropertyrsmDecodeFeedback" class="autouncollapse">rsmDecodeFeedback</a></li><li><a href="#prsmDeviceClass" data-target="cPropertyrsmDeviceClass" class="autouncollapse">rsmDeviceClass</a></li><li><a href="#prsmFirmwareVersion" data-target="cPropertyrsmFirmwareVersion" class="autouncollapse">rsmFirmwareVersion</a></li><li><a href="#prsmForceSavePairingBarcode" data-target="cPropertyrsmForceSavePairingBarcode" class="autouncollapse">rsmForceSavePairingBarcode</a></li><li><a href="#prsmGoodScansDelay" data-target="cPropertyrsmGoodScansDelay" class="autouncollapse">rsmGoodScansDelay</a></li><li><a href="#prsmIgnoreCode128Usps" data-target="cPropertyrsmIgnoreCode128Usps" class="autouncollapse">rsmIgnoreCode128Usps</a></li><li><a href="#prsmLowBatteryIndication" data-target="cPropertyrsmLowBatteryIndication" class="autouncollapse">rsmLowBatteryIndication</a></li><li><a href="#prsmLowBatteryIndicationCycle" data-target="cPropertyrsmLowBatteryIndicationCycle" class="autouncollapse">rsmLowBatteryIndicationCycle</a></li><li><a href="#prsmMems" data-target="cPropertyrsmMems" class="autouncollapse">rsmMems</a></li><li><a href="#prsmModelNumber" data-target="cPropertyrsmModelNumber" class="autouncollapse">rsmModelNumber</a></li><li><a href="#prsmPagingBeepSequence" data-target="cPropertyrsmPagingBeepSequence" class="autouncollapse">rsmPagingBeepSequence</a></li><li><a href="#prsmPagingEnable" data-target="cPropertyrsmPagingEnable" class="autouncollapse">rsmPagingEnable</a></li><li><a href="#prsmProximityContinuous" data-target="cPropertyrsmProximityContinuous" class="autouncollapse">rsmProximityContinuous</a></li><li><a href="#prsmProximityDistance" data-target="cPropertyrsmProximityDistance" class="autouncollapse">rsmProximityDistance</a></li><li><a href="#prsmProximityEnable" data-target="cPropertyrsmProximityEnable" class="autouncollapse">rsmProximityEnable</a></li><li><a href="#prsmScanLineWidth" data-target="cPropertyrsmScanLineWidth" class="autouncollapse">rsmScanLineWidth</a></li><li><a href="#prsmScanTriggerWakeup" data-target="cPropertyrsmScanTriggerWakeup" class="autouncollapse">rsmScanTriggerWakeup</a></li><li><a href="#prsmSerialNumber" data-target="cPropertyrsmSerialNumber" class="autouncollapse">rsmSerialNumber</a></li><li><a href="#psameSymbolTimeout" data-target="cPropertysameSymbolTimeout" class="autouncollapse">sameSymbolTimeout</a></li><li><a href="#pscanTimeout" data-target="cPropertyscanTimeout" class="autouncollapse">scanTimeout</a></li><li><a href="#pscannerType" data-target="cPropertyscannerType" class="autouncollapse">scannerType</a></li><li><a href="#psignature" data-target="cPropertysignature" class="autouncollapse">signature</a></li><li><a href="#psignatureImageHeight" data-target="cPropertysignatureImageHeight" class="autouncollapse">signatureImageHeight</a></li><li><a href="#psignatureImageQuality" data-target="cPropertysignatureImageQuality" class="autouncollapse">signatureImageQuality</a></li><li><a href="#psignatureImageWidth" data-target="cPropertysignatureImageWidth" class="autouncollapse">signatureImageWidth</a></li><li><a href="#ptimedAimDuration" data-target="cPropertytimedAimDuration" class="autouncollapse">timedAimDuration</a></li><li><a href="#ptlc39" data-target="cPropertytlc39" class="autouncollapse">tlc39</a></li><li><a href="#ptrioptic39" data-target="cPropertytrioptic39" class="autouncollapse">trioptic39</a></li><li><a href="#ptrioptic39Redundancy" data-target="cPropertytrioptic39Redundancy" class="autouncollapse">trioptic39Redundancy</a></li><li><a href="#pukPostal" data-target="cPropertyukPostal" class="autouncollapse">ukPostal</a></li><li><a href="#pukPostalReportCheckDigit" data-target="cPropertyukPostalReportCheckDigit" class="autouncollapse">ukPostalReportCheckDigit</a></li><li><a href="#pupcEanBookland" data-target="cPropertyupcEanBookland" class="autouncollapse">upcEanBookland</a></li><li><a href="#pupcEanBooklandFormat" data-target="cPropertyupcEanBooklandFormat" class="autouncollapse">upcEanBooklandFormat</a></li><li><a href="#pupcEanConvertGs1dataBarToUpcEan" data-target="cPropertyupcEanConvertGs1dataBarToUpcEan" class="autouncollapse">upcEanConvertGs1dataBarToUpcEan</a></li><li><a href="#pupcEanCoupon" data-target="cPropertyupcEanCoupon" class="autouncollapse">upcEanCoupon</a></li><li><a href="#pupcEanLinearDecode" data-target="cPropertyupcEanLinearDecode" class="autouncollapse">upcEanLinearDecode</a></li><li><a href="#pupcEanRandomWeightCheckDigit" data-target="cPropertyupcEanRandomWeightCheckDigit" class="autouncollapse">upcEanRandomWeightCheckDigit</a></li><li><a href="#pupcEanRetryCount" data-target="cPropertyupcEanRetryCount" class="autouncollapse">upcEanRetryCount</a></li><li><a href="#pupcEanSecurityLevel" data-target="cPropertyupcEanSecurityLevel" class="autouncollapse">upcEanSecurityLevel</a></li><li><a href="#pupcEanSupplemental2" data-target="cPropertyupcEanSupplemental2" class="autouncollapse">upcEanSupplemental2</a></li><li><a href="#pupcEanSupplemental5" data-target="cPropertyupcEanSupplemental5" class="autouncollapse">upcEanSupplemental5</a></li><li><a href="#pupcEanSupplementalMode" data-target="cPropertyupcEanSupplementalMode" class="autouncollapse">upcEanSupplementalMode</a></li><li><a href="#pupca" data-target="cPropertyupca" class="autouncollapse">upca</a></li><li><a href="#pupcaPreamble" data-target="cPropertyupcaPreamble" class="autouncollapse">upcaPreamble</a></li><li><a href="#pupcaReportCheckDigit" data-target="cPropertyupcaReportCheckDigit" class="autouncollapse">upcaReportCheckDigit</a></li><li><a href="#pupce0" data-target="cPropertyupce0" class="autouncollapse">upce0</a></li><li><a href="#pupce0convertToUpca" data-target="cPropertyupce0convertToUpca" class="autouncollapse">upce0convertToUpca</a></li><li><a href="#pupce0preamble" data-target="cPropertyupce0preamble" class="autouncollapse">upce0preamble</a></li><li><a href="#pupce0reportCheckDigit" data-target="cPropertyupce0reportCheckDigit" class="autouncollapse">upce0reportCheckDigit</a></li><li><a href="#pupce1" data-target="cPropertyupce1" class="autouncollapse">upce1</a></li><li><a href="#pupce1convertToUpca" data-target="cPropertyupce1convertToUpca" class="autouncollapse">upce1convertToUpca</a></li><li><a href="#pupce1preamble" data-target="cPropertyupce1preamble" class="autouncollapse">upce1preamble</a></li><li><a href="#pupce1reportCheckDigit" data-target="cPropertyupce1reportCheckDigit" class="autouncollapse">upce1reportCheckDigit</a></li><li><a href="#pus4state" data-target="cPropertyus4state" class="autouncollapse">us4state</a></li><li><a href="#pus4stateFics" data-target="cPropertyus4stateFics" class="autouncollapse">us4stateFics</a></li><li><a href="#pusPlanet" data-target="cPropertyusPlanet" class="autouncollapse">usPlanet</a></li><li><a href="#pusPlanetReportCheckDigit" data-target="cPropertyusPlanetReportCheckDigit" class="autouncollapse">usPlanetReportCheckDigit</a></li><li><a href="#pusPostNet" data-target="cPropertyusPostNet" class="autouncollapse">usPostNet</a></li><li><a href="#pusPostNetReportCheckDigit" data-target="cPropertyusPostNetReportCheckDigit" class="autouncollapse">usPostNetReportCheckDigit</a></li><li><a href="#pviewfinderFeedback" data-target="cPropertyviewfinderFeedback" class="autouncollapse">viewfinderFeedback</a></li><li><a href="#pviewfinderFeedbackTime" data-target="cPropertyviewfinderFeedbackTime" class="autouncollapse">viewfinderFeedbackTime</a></li><li><a href="#pviewfinderHeight" data-target="cPropertyviewfinderHeight" class="autouncollapse">viewfinderHeight</a></li><li><a href="#pviewfinderMode" data-target="cPropertyviewfinderMode" class="autouncollapse">viewfinderMode</a></li><li><a href="#pviewfinderWidth" data-target="cPropertyviewfinderWidth" class="autouncollapse">viewfinderWidth</a></li><li><a href="#pviewfinderX" data-target="cPropertyviewfinderX" class="autouncollapse">viewfinderX</a></li><li><a href="#pviewfinderY" data-target="cPropertyviewfinderY" class="autouncollapse">viewfinderY</a></li><li><a href="#pwebcode" data-target="cPropertywebcode" class="autouncollapse">webcode</a></li><li><a href="#pwebcodeDecodeGtSubtype" data-target="cPropertywebcodeDecodeGtSubtype" class="autouncollapse">webcodeDecodeGtSubtype</a></li></ul></div><div class="btn-group"><a href="#Methods" class="btn"><i class="icon-cog"></i> Methods<sup>&nbsp;16</sub></a><a class="btn dropdown-toggle" data-toggle="dropdown" data-target="#" href="#Methods" >  <span class="caret"></span>&nbsp;</a><ul class="dropdown-menu"><li><a href="#mclearAllProperties" data-target="cMethodclearAllProperties" class="autouncollapse">clearAllProperties</a></li><li><a href="#mcommandRemoteScanner" data-target="cMethodcommandRemoteScanner" class="autouncollapse">commandRemoteScanner</a></li><li><a href="#mdefault" data-target="cMethoddefault" class="autouncollapse">default</a></li><li><a href="#mdisable" data-target="cMethoddisable" class="autouncollapse">disable</a></li><li><a href="#menable" data-target="cMethodenable" class="autouncollapse">enable</a></li><li><a href="#menumerate" data-target="cMethodenumerate" class="autouncollapse">enumerate</a></li><li><a href="#mgetAllProperties" data-target="cMethodgetAllProperties" class="autouncollapse">getAllProperties</a></li><li><a href="#mgetProperties" data-target="cMethodgetProperties" class="autouncollapse">getProperties</a></li><li><a href="#mgetProperty" data-target="cMethodgetProperty" class="autouncollapse">getProperty</a></li><li><a href="#mregisterBluetoothStatus" data-target="cMethodregisterBluetoothStatus" class="autouncollapse">registerBluetoothStatus</a></li><li><a href="#msetDefault" data-target="cMethodsetDefault" class="autouncollapse">setDefault</a></li><li><a href="#msetProperties" data-target="cMethodsetProperties" class="autouncollapse">setProperties</a></li><li><a href="#msetProperty" data-target="cMethodsetProperty" class="autouncollapse">setProperty</a></li><li><a href="#mstart" data-target="cMethodstart" class="autouncollapse">start</a></li><li><a href="#mstop" data-target="cMethodstop" class="autouncollapse">stop</a></li><li><a href="#mtake" data-target="cMethodtake" class="autouncollapse">take</a></li></ul></div><div class="btn-group pull-right"><button class="btn" id="expandAll" tooltip="Expand all"><i class="icon-th-list "></i>&nbsp;</button></div><div class="btn-group"><a href="#Remarks" class="btn"><i class="icon-warning-sign"></i> Remarks<sup>&nbsp;4</sup></a><button href="#" class="btn dropdown-toggle" data-toggle="dropdown">  <span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a href="#r0" data-target="rRemark0" class="autouncollapse">Bluetooth Scanner Overview</a></li><li><a href="#r1" data-target="rRemark1" class="autouncollapse">Viewfinder Position Parameters</a></li><li><a href="#r2" data-target="rRemark2" class="autouncollapse">Scanning and Camera Interaction</a></li><li><a href="#r3" data-target="rRemark3" class="autouncollapse">DataWedge Interaction With Native Apps</a></li></ul></div><div  >
Because RhoMobile Suite is designed to run on both Consumer devices and Motorola Solutions' enterprise devices support for the Barcode API will vary from device to device.  In general if you are developing for a consumer device the number of symbologies available to you will be limited to just the most common ones, eg EAN13, UPCA etc and your scanning will be via the device camera.  If your application is running on Motorola Solutions' hardware you will have much finer control over a more fully featured Scanner, often with a choice of scanner hardware on the device.  In general if you wish to capture a single barcode in a 'one shot' use case, eg your App just wants to capture a single barcode to be submitted to a price comparison website then use Barcode.take(callback); if your application is expecting a number of barcodes to be received, common in enterprise scenarios for example a user in a warehouse then use Barcode.enable(callback).

<a name='Examples'></a>
<h2><i class='icon-edit'></i>Examples</h2>

<a name='e0'></a><div class='accordion property' id='e0'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cExample0"><strong>Basic Example</strong><i class="icon-chevron-down pull-left"></i></span></div><div id="cExample0" class="accordion-body collapse in">  <div class="accordion-inner">

                    The default barcode reader on the device is enabled when the index view is loaded. It is enabled so when a barcode is red the decodeEvent is called.
                
<pre class='CodeRay'><code>:::ruby
            
#/app/Model
def index
    Rho::Barcode.enable( url_for(:action =&gt; :decodeEvent)
end

 def decodeEvent
    puts "Scanned Barcode #{@params}"
    puts "Data is #{@params['data']}"
    WebView.execute_js("onDecodeEventRuby('#{@params['data']}','#{@params['source']}','#{@params['type']}','#{@params['time']}','#{@params['length']}','Decode','#{@params['direction']}');")
  end

                    

                <
></code></pre>

                    Then in index.erb file:.
                
<pre class='CodeRay'><code>:::html
            
&lt;script type="text/javascript" charset="utf-8" src="/public/js/application.js"&gt;&lt;/script&gt;
&lt;div data-role="page"&gt;

  &lt;div data-role="header" data-position="inline"&gt;
    &lt;h1&gt;Barcode Extension Test&lt;/h1&gt;
    &lt;a href="&lt;%= Rho::RhoConfig.start_path %&gt;" class="ui-btn-left" data-icon="home" data-direction="reverse"
       &lt;%= "data-ajax='false'" if is_bb6 %&gt;&gt;Home&lt;/a&gt;
      
  &lt;/div&gt;
    &lt;div id='output1'&gt;Output goes here&lt;/div&gt;
  &lt;div data-role="content"&gt;
    &lt;ul data-role="listview"&gt;
        &lt;%= link_to 'Run Test', { :action =&gt; :run_test }%&gt;
        &lt;a href="javascript:dcTest()"&gt;Run Test JS&lt;/a&gt;
        &lt;a href="scanner_ajax.htm"&gt;Scanner (Ajax Requests)&lt;/a&gt;
    &lt;/ul&gt;
  &lt;/div&gt;

&lt;/div&gt;

                    

                <
></code></pre>  </div></div></div></div>
<a name='Properties'></a>
<h2><i class='icon-list'></i>Properties</h2>

<a name='padaptiveScanning'></a><div class='accordion property' id='padaptiveScanning'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyadaptiveScanning"><strong>adaptiveScanning</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyadaptiveScanning" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables adaptive scanning. When set to true, the scan engine will automatically toggle between 2 scan angles, wide and narrow, allowing the scan engine to decode barcodes both in close proximity and far away (~100 inches). Adaptive scanning is only supported in high performance, long working range scan engines such as SE960
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Laser Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.adaptiveScanning=true
# Setting one property
Barcode.setProperty :adaptiveScanning, true 
# Setting multiple properties using HASH
Barcode.setProperties { :adaptiveScanning => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('adaptiveScanning')
# Getting multiple properties
myvar = Barcode.getProperties(['adaptiveScanning' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.adaptiveScanning=true;
# Setting one property
Barcode.setProperty('adaptiveScanning',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :adaptiveScanning:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('adaptiveScanning');
# Getting multiple properties
myvar = Barcode.getProperties(['adaptiveScanning' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='paimMode'></a><div class='accordion property' id='paimMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyaimMode"><strong>aimMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyaimMode" class="accordion-body collapse in">  <div class="accordion-inner">Describes the aiming mode to used. 
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>No Aiming (Can be overridden by picklistMode).</dt><dt>dot</dt><dd>Laser barcode readers will show a dot for aiming.</dt><dt>slab</dt><dd>Laser barcode readers will show a slab for aiming.</dt><dt>reticle</dt><dd>Imager barcode readers will show a reticle for aiming.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.aimMode='some string'
# Setting one property
Barcode.setProperty :aimMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :aimMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('aimMode')
# Getting multiple properties
myvar = Barcode.getProperties(['aimMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.aimMode='some string';
# Setting one property
Barcode.setProperty('aimMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :aimMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('aimMode');
# Getting multiple properties
myvar = Barcode.getProperties(['aimMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='paimType'></a><div class='accordion property' id='paimType'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyaimType"><strong>aimType</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyaimType" class="accordion-body collapse in">  <div class="accordion-inner">Describes the type of aiming to use. 
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>trigger</dt><dd>Standard trigger mode.  Holding the trigger will start a decoding session.</dt><dt>timedHold</dt><dd> Aiming lasts for the time specified by 'timedAimDuration' before decoding.  The opportunity to scan will last until the barcode is decoded or scanTimeout occurs.</dt><dt>timedRelease</dt><dd> Aiming lasts until trigger is released.  If the timedAimDuration has expired when the trigger is released then a decode session is started until a barcode is decoded or for the remaining time equal to the scanTimeout value.</dt><dt>presentation</dt><dd>Provided to support Kiosk devices.  The scanner illuminates when movement is detected in the range of the scanner window.  In order to use this mode the scanner must be initiated with a softscan using the scanner.start() method and again after each decode.  The device must be equipped with a sensor to detect movement to use presentation mode. </dt><dt>pressAndRelease</dt><dd>Scan will continue after the trigger is released until scanTimeout occurs.</dt><dt>continuousRead</dt><dd>Once the trigger is pulled barcodes will continue to be scanned whilst the trigger is held, enabling rapid scanning, to be used in conjunction with sameSymbolTimeout and differentSymbolTimeout.  This value is ignored if viewfinderMode is set to 'dynamicReticle'</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.aimType='some string'
# Setting one property
Barcode.setProperty :aimType, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :aimType => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('aimType')
# Getting multiple properties
myvar = Barcode.getProperties(['aimType' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.aimType='some string';
# Setting one property
Barcode.setProperty('aimType','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :aimType:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('aimType');
# Getting multiple properties
myvar = Barcode.getProperties(['aimType' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pallDecoders'></a><div class='accordion property' id='pallDecoders'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyallDecoders"><strong>allDecoders</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyallDecoders" class="accordion-body collapse in">  <div class="accordion-inner">Sets the barcode scanner to read all barcode types that the scanner is capable of reading.  Note that some decoders will not be enabled as some symbologies use the same systems to encode data, making it impossible to differentiate between them. For example: "canpostal" and "auspostal" both use a 4-state system, so devices will only enable either "canpostal" OR "auspostal" when "alldecoders" is enabled. Note that other symbologies also share the 4-state system.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.allDecoders=true
# Setting one property
Barcode.setProperty :allDecoders, true 
# Setting multiple properties using HASH
Barcode.setProperties { :allDecoders => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('allDecoders')
# Getting multiple properties
myvar = Barcode.getProperties(['allDecoders' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.allDecoders=true;
# Setting one property
Barcode.setProperty('allDecoders',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :allDecoders:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('allDecoders');
# Getting multiple properties
myvar = Barcode.getProperties(['allDecoders' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pausPostal'></a><div class='accordion property' id='pausPostal'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyausPostal"><strong>ausPostal</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyausPostal" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Australian Postal barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.ausPostal=true
# Setting one property
Barcode.setProperty :ausPostal, true 
# Setting multiple properties using HASH
Barcode.setProperties { :ausPostal => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('ausPostal')
# Getting multiple properties
myvar = Barcode.getProperties(['ausPostal' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.ausPostal=true;
# Setting one property
Barcode.setProperty('ausPostal',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :ausPostal:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('ausPostal');
# Getting multiple properties
myvar = Barcode.getProperties(['ausPostal' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pautoEnter'></a><div class='accordion property' id='pautoEnter'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyautoEnter"><strong>autoEnter</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyautoEnter" class="accordion-body collapse in">  <div class="accordion-inner">When true, automatically appends the character code for 'enter' to the end of any barcodes scanned.  This is most useful to submit forms following a scan.  This property will only take effect if you have not specified a callback to the enable method.  AutoEnter and AutoTab are mutually exclusive
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.autoEnter=true
# Setting one property
Barcode.setProperty :autoEnter, true 
# Setting multiple properties using HASH
Barcode.setProperties { :autoEnter => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('autoEnter')
# Getting multiple properties
myvar = Barcode.getProperties(['autoEnter' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.autoEnter=true;
# Setting one property
Barcode.setProperty('autoEnter',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :autoEnter:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('autoEnter');
# Getting multiple properties
myvar = Barcode.getProperties(['autoEnter' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pautoTab'></a><div class='accordion property' id='pautoTab'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyautoTab"><strong>autoTab</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyautoTab" class="accordion-body collapse in">  <div class="accordion-inner">When true, automatically appends the tab character to the end of any barcodes scanned.  This is most useful if you are populating a form.  This property will only take effect if you have not specified a callback to the enable method.  AutoEnter and AutoTab are mutually exclusive
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.autoTab=true
# Setting one property
Barcode.setProperty :autoTab, true 
# Setting multiple properties using HASH
Barcode.setProperties { :autoTab => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('autoTab')
# Getting multiple properties
myvar = Barcode.getProperties(['autoTab' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.autoTab=true;
# Setting one property
Barcode.setProperty('autoTab',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :autoTab:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('autoTab');
# Getting multiple properties
myvar = Barcode.getProperties(['autoTab' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='paztec'></a><div class='accordion property' id='paztec'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyaztec"><strong>aztec</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyaztec" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Aztec barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.aztec=true
# Setting one property
Barcode.setProperty :aztec, true 
# Setting multiple properties using HASH
Barcode.setProperties { :aztec => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('aztec')
# Getting multiple properties
myvar = Barcode.getProperties(['aztec' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.aztec=true;
# Setting one property
Barcode.setProperty('aztec',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :aztec:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('aztec');
# Getting multiple properties
myvar = Barcode.getProperties(['aztec' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pbarcodeDataFormat'></a><div class='accordion property' id='pbarcodeDataFormat'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertybarcodeDataFormat"><strong>barcodeDataFormat</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertybarcodeDataFormat" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the format in which the barcode data is returned, binary data is returned in Data URI format with the appropriate mime type. This parameter is designed to be used primarily with image based symbologies (eg. Signature). Binary data will not be output as keystrokes, you must set a decode callback in order to receive scanned data.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera / Imager Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>binary</dt><dd>Scanned data will be returned in Data URI format</dt><dt>text</dt><dd>Scanned data will be returned in Text format</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.barcodeDataFormat='some string'
# Setting one property
Barcode.setProperty :barcodeDataFormat, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :barcodeDataFormat => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('barcodeDataFormat')
# Getting multiple properties
myvar = Barcode.getProperties(['barcodeDataFormat' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.barcodeDataFormat='some string';
# Setting one property
Barcode.setProperty('barcodeDataFormat','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :barcodeDataFormat:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('barcodeDataFormat');
# Getting multiple properties
myvar = Barcode.getProperties(['barcodeDataFormat' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pbeamWidth'></a><div class='accordion property' id='pbeamWidth'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertybeamWidth"><strong>beamWidth</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertybeamWidth" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the width of the laser beam.  All devices will support normal beam widths but other widths may not be supported on your device.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Laser Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>normal</dt><dd>Laser beam width is normal</dt><dt>wide</dt><dd>Laser beam width is wide.</dt><dt>narrow</dt><dd>Laser beam width is narrow.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.beamWidth='some string'
# Setting one property
Barcode.setProperty :beamWidth, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :beamWidth => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('beamWidth')
# Getting multiple properties
myvar = Barcode.getProperties(['beamWidth' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.beamWidth='some string';
# Setting one property
Barcode.setProperty('beamWidth','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :beamWidth:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('beamWidth');
# Getting multiple properties
myvar = Barcode.getProperties(['beamWidth' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pbidirectionalRedundancy'></a><div class='accordion property' id='pbidirectionalRedundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertybidirectionalRedundancy"><strong>bidirectionalRedundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertybidirectionalRedundancy" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables bidirectional redundancy.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Laser Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.bidirectionalRedundancy=true
# Setting one property
Barcode.setProperty :bidirectionalRedundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :bidirectionalRedundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('bidirectionalRedundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['bidirectionalRedundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.bidirectionalRedundancy=true;
# Setting one property
Barcode.setProperty('bidirectionalRedundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :bidirectionalRedundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('bidirectionalRedundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['bidirectionalRedundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcanPostal'></a><div class='accordion property' id='pcanPostal'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycanPostal"><strong>canPostal</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycanPostal" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Canadian Postal barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.canPostal=true
# Setting one property
Barcode.setProperty :canPostal, true 
# Setting multiple properties using HASH
Barcode.setProperties { :canPostal => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('canPostal')
# Getting multiple properties
myvar = Barcode.getProperties(['canPostal' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.canPostal=true;
# Setting one property
Barcode.setProperty('canPostal',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :canPostal:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('canPostal');
# Getting multiple properties
myvar = Barcode.getProperties(['canPostal' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pchinese2of5'></a><div class='accordion property' id='pchinese2of5'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertychinese2of5"><strong>chinese2of5</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertychinese2of5" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Chinese 2of5 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.chinese2of5=true
# Setting one property
Barcode.setProperty :chinese2of5, true 
# Setting multiple properties using HASH
Barcode.setProperties { :chinese2of5 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('chinese2of5')
# Getting multiple properties
myvar = Barcode.getProperties(['chinese2of5' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.chinese2of5=true;
# Setting one property
Barcode.setProperty('chinese2of5',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :chinese2of5:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('chinese2of5');
# Getting multiple properties
myvar = Barcode.getProperties(['chinese2of5' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcodabar'></a><div class='accordion property' id='pcodabar'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycodabar"><strong>codabar</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycodabar" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Codabar barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.codabar=true
# Setting one property
Barcode.setProperty :codabar, true 
# Setting multiple properties using HASH
Barcode.setProperties { :codabar => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('codabar')
# Getting multiple properties
myvar = Barcode.getProperties(['codabar' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.codabar=true;
# Setting one property
Barcode.setProperty('codabar',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :codabar:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('codabar');
# Getting multiple properties
myvar = Barcode.getProperties(['codabar' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcodabarClsiEditing'></a><div class='accordion property' id='pcodabarClsiEditing'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycodabarClsiEditing"><strong>codabarClsiEditing</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycodabarClsiEditing" class="accordion-body collapse in">  <div class="accordion-inner">Enables Codabar CLSi formatting when set to true.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.codabarClsiEditing=true
# Setting one property
Barcode.setProperty :codabarClsiEditing, true 
# Setting multiple properties using HASH
Barcode.setProperties { :codabarClsiEditing => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('codabarClsiEditing')
# Getting multiple properties
myvar = Barcode.getProperties(['codabarClsiEditing' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.codabarClsiEditing=true;
# Setting one property
Barcode.setProperty('codabarClsiEditing',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :codabarClsiEditing:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('codabarClsiEditing');
# Getting multiple properties
myvar = Barcode.getProperties(['codabarClsiEditing' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcodabarMaxLength'></a><div class='accordion property' id='pcodabarMaxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycodabarMaxLength"><strong>codabarMaxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycodabarMaxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a Codabar barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.codabarMaxLength=0
# Setting one property
Barcode.setProperty :codabarMaxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :codabarMaxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('codabarMaxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['codabarMaxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.codabarMaxLength=0;
# Setting one property
Barcode.setProperty('codabarMaxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :codabarMaxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('codabarMaxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['codabarMaxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcodabarMinLength'></a><div class='accordion property' id='pcodabarMinLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycodabarMinLength"><strong>codabarMinLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycodabarMinLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a Codabar barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.codabarMinLength=0
# Setting one property
Barcode.setProperty :codabarMinLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :codabarMinLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('codabarMinLength')
# Getting multiple properties
myvar = Barcode.getProperties(['codabarMinLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.codabarMinLength=0;
# Setting one property
Barcode.setProperty('codabarMinLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :codabarMinLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('codabarMinLength');
# Getting multiple properties
myvar = Barcode.getProperties(['codabarMinLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcodabarNotisEditing'></a><div class='accordion property' id='pcodabarNotisEditing'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycodabarNotisEditing"><strong>codabarNotisEditing</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycodabarNotisEditing" class="accordion-body collapse in">  <div class="accordion-inner">Enables Codabar NotisEditing formatting when set to true.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.codabarNotisEditing=true
# Setting one property
Barcode.setProperty :codabarNotisEditing, true 
# Setting multiple properties using HASH
Barcode.setProperties { :codabarNotisEditing => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('codabarNotisEditing')
# Getting multiple properties
myvar = Barcode.getProperties(['codabarNotisEditing' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.codabarNotisEditing=true;
# Setting one property
Barcode.setProperty('codabarNotisEditing',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :codabarNotisEditing:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('codabarNotisEditing');
# Getting multiple properties
myvar = Barcode.getProperties(['codabarNotisEditing' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcodabarRedundancy'></a><div class='accordion property' id='pcodabarRedundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycodabarRedundancy"><strong>codabarRedundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycodabarRedundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Codabar Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.codabarRedundancy=true
# Setting one property
Barcode.setProperty :codabarRedundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :codabarRedundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('codabarRedundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['codabarRedundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.codabarRedundancy=true;
# Setting one property
Barcode.setProperty('codabarRedundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :codabarRedundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('codabarRedundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['codabarRedundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode11'></a><div class='accordion property' id='pcode11'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode11"><strong>code11</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode11" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Code11 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code11=true
# Setting one property
Barcode.setProperty :code11, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code11 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code11')
# Getting multiple properties
myvar = Barcode.getProperties(['code11' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code11=true;
# Setting one property
Barcode.setProperty('code11',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code11:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code11');
# Getting multiple properties
myvar = Barcode.getProperties(['code11' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode11checkDigitCount'></a><div class='accordion property' id='pcode11checkDigitCount'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode11checkDigitCount"><strong>code11checkDigitCount</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode11checkDigitCount" class="accordion-body collapse in">  <div class="accordion-inner">Specifies whether to verify 0, 1 or 2 check digits.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>Scanning engine will verify no Code 11 check digits</dt><dt>one</dt><dd>Scanning engine will verify one Code 11 check digit</dt><dt>two</dt><dd>Scanning engine will verify two Code 11 check digits</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code11checkDigitCount='some string'
# Setting one property
Barcode.setProperty :code11checkDigitCount, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :code11checkDigitCount => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('code11checkDigitCount')
# Getting multiple properties
myvar = Barcode.getProperties(['code11checkDigitCount' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code11checkDigitCount='some string';
# Setting one property
Barcode.setProperty('code11checkDigitCount','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :code11checkDigitCount:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('code11checkDigitCount');
# Getting multiple properties
myvar = Barcode.getProperties(['code11checkDigitCount' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode11maxLength'></a><div class='accordion property' id='pcode11maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode11maxLength"><strong>code11maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode11maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a Code 11 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code11maxLength=0
# Setting one property
Barcode.setProperty :code11maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code11maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code11maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code11maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code11maxLength=0;
# Setting one property
Barcode.setProperty('code11maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code11maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code11maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code11maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode11minLength'></a><div class='accordion property' id='pcode11minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode11minLength"><strong>code11minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode11minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a Code 11 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code11minLength=0
# Setting one property
Barcode.setProperty :code11minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code11minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code11minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code11minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code11minLength=0;
# Setting one property
Barcode.setProperty('code11minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code11minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code11minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code11minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode11redundancy'></a><div class='accordion property' id='pcode11redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode11redundancy"><strong>code11redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode11redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Code 11 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code11redundancy=true
# Setting one property
Barcode.setProperty :code11redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code11redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code11redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['code11redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code11redundancy=true;
# Setting one property
Barcode.setProperty('code11redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code11redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code11redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['code11redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode11reportCheckDigit'></a><div class='accordion property' id='pcode11reportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode11reportCheckDigit"><strong>code11reportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode11reportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned Code 11 barcodes
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code11reportCheckDigit=true
# Setting one property
Barcode.setProperty :code11reportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code11reportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code11reportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['code11reportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code11reportCheckDigit=true;
# Setting one property
Barcode.setProperty('code11reportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code11reportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code11reportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['code11reportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128'></a><div class='accordion property' id='pcode128'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128"><strong>code128</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Code128 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128=true
# Setting one property
Barcode.setProperty :code128, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code128 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code128')
# Getting multiple properties
myvar = Barcode.getProperties(['code128' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128=true;
# Setting one property
Barcode.setProperty('code128',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code128');
# Getting multiple properties
myvar = Barcode.getProperties(['code128' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128checkIsBtTable'></a><div class='accordion property' id='pcode128checkIsBtTable'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128checkIsBtTable"><strong>code128checkIsBtTable</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128checkIsBtTable" class="accordion-body collapse in">  <div class="accordion-inner">When true, decodes concatenated Code128 output only if the pair belongs to one of the commonly concatenated pairs as defined by the standard.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128checkIsBtTable=true
# Setting one property
Barcode.setProperty :code128checkIsBtTable, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code128checkIsBtTable => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code128checkIsBtTable')
# Getting multiple properties
myvar = Barcode.getProperties(['code128checkIsBtTable' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128checkIsBtTable=true;
# Setting one property
Barcode.setProperty('code128checkIsBtTable',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128checkIsBtTable:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code128checkIsBtTable');
# Getting multiple properties
myvar = Barcode.getProperties(['code128checkIsBtTable' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128ean128'></a><div class='accordion property' id='pcode128ean128'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128ean128"><strong>code128ean128</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128ean128" class="accordion-body collapse in">  <div class="accordion-inner">When true, barcodes with the EAN128 subtype property set will be read.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128ean128=true
# Setting one property
Barcode.setProperty :code128ean128, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code128ean128 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code128ean128')
# Getting multiple properties
myvar = Barcode.getProperties(['code128ean128' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128ean128=true;
# Setting one property
Barcode.setProperty('code128ean128',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128ean128:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code128ean128');
# Getting multiple properties
myvar = Barcode.getProperties(['code128ean128' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128isbt128'></a><div class='accordion property' id='pcode128isbt128'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128isbt128"><strong>code128isbt128</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128isbt128" class="accordion-body collapse in">  <div class="accordion-inner">When true, barcodes with the isbt128 subtype property set will be read.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128isbt128=true
# Setting one property
Barcode.setProperty :code128isbt128, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code128isbt128 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code128isbt128')
# Getting multiple properties
myvar = Barcode.getProperties(['code128isbt128' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128isbt128=true;
# Setting one property
Barcode.setProperty('code128isbt128',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128isbt128:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code128isbt128');
# Getting multiple properties
myvar = Barcode.getProperties(['code128isbt128' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128isbt128ConcatMode'></a><div class='accordion property' id='pcode128isbt128ConcatMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128isbt128ConcatMode"><strong>code128isbt128ConcatMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128isbt128ConcatMode" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Code128 ISBT concatenation mode property.  This feature allows a pair of barcodes which meet certain criteria defined in teh ISBT128 spec to be reported as a single barcode.  This paramter describes the different concatenation modes available for ISBT128
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>never</dt><dd>Will ignore the barcode pair and only output decode data for one of the barcodes</dt><dt>always</dt><dd>Will not decode if both barcodes are not present or if one of them can not be decoded</dt><dt>auto</dt><dd>Auto-Discriminate</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128isbt128ConcatMode='some string'
# Setting one property
Barcode.setProperty :code128isbt128ConcatMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :code128isbt128ConcatMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('code128isbt128ConcatMode')
# Getting multiple properties
myvar = Barcode.getProperties(['code128isbt128ConcatMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128isbt128ConcatMode='some string';
# Setting one property
Barcode.setProperty('code128isbt128ConcatMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128isbt128ConcatMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('code128isbt128ConcatMode');
# Getting multiple properties
myvar = Barcode.getProperties(['code128isbt128ConcatMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128maxLength'></a><div class='accordion property' id='pcode128maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128maxLength"><strong>code128maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a Code 128 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128maxLength=0
# Setting one property
Barcode.setProperty :code128maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code128maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code128maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code128maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128maxLength=0;
# Setting one property
Barcode.setProperty('code128maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code128maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code128maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128minLength'></a><div class='accordion property' id='pcode128minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128minLength"><strong>code128minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a Code 128 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128minLength=0
# Setting one property
Barcode.setProperty :code128minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code128minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code128minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code128minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128minLength=0;
# Setting one property
Barcode.setProperty('code128minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code128minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code128minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128other128'></a><div class='accordion property' id='pcode128other128'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128other128"><strong>code128other128</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128other128" class="accordion-body collapse in">  <div class="accordion-inner">Sets the other 128 property which enables the non EAN and non ISBT 128 subtype.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128other128=true
# Setting one property
Barcode.setProperty :code128other128, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code128other128 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code128other128')
# Getting multiple properties
myvar = Barcode.getProperties(['code128other128' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128other128=true;
# Setting one property
Barcode.setProperty('code128other128',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128other128:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code128other128');
# Getting multiple properties
myvar = Barcode.getProperties(['code128other128' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128redundancy'></a><div class='accordion property' id='pcode128redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128redundancy"><strong>code128redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Code 128 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128redundancy=true
# Setting one property
Barcode.setProperty :code128redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code128redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code128redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['code128redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128redundancy=true;
# Setting one property
Barcode.setProperty('code128redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code128redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['code128redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode128securityLevel'></a><div class='accordion property' id='pcode128securityLevel'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode128securityLevel"><strong>code128securityLevel</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode128securityLevel" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Code 128 security level and accepts a value between 0 and 3 inclusive.  0: Allows the scanner to operate in its most aggressive state, while providing sufficient security in decoding most 'in-spec' barcodes. 1: Eliminates most mis-decodes. 2: Select this option if security level 1 fails to eliminate mis-decodes. 3: Select this option if security level 1 and 2 fail to eliminate mis-decodes. Be advised that selecting level 3 is an extreme measure against mis-decoding and will significantly impair the decoding ability of the scanner.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code128securityLevel=0
# Setting one property
Barcode.setProperty :code128securityLevel, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code128securityLevel => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code128securityLevel')
# Getting multiple properties
myvar = Barcode.getProperties(['code128securityLevel' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code128securityLevel=0;
# Setting one property
Barcode.setProperty('code128securityLevel',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code128securityLevel:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code128securityLevel');
# Getting multiple properties
myvar = Barcode.getProperties(['code128securityLevel' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39'></a><div class='accordion property' id='pcode39'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39"><strong>code39</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Code 39 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39=true
# Setting one property
Barcode.setProperty :code39, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code39 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code39')
# Getting multiple properties
myvar = Barcode.getProperties(['code39' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39=true;
# Setting one property
Barcode.setProperty('code39',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code39');
# Getting multiple properties
myvar = Barcode.getProperties(['code39' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39code32Prefix'></a><div class='accordion property' id='pcode39code32Prefix'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39code32Prefix"><strong>code39code32Prefix</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39code32Prefix" class="accordion-body collapse in">  <div class="accordion-inner">Enables reporting of the Code32 prefix when a Code39 barcode is converted.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39code32Prefix=true
# Setting one property
Barcode.setProperty :code39code32Prefix, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code39code32Prefix => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code39code32Prefix')
# Getting multiple properties
myvar = Barcode.getProperties(['code39code32Prefix' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39code32Prefix=true;
# Setting one property
Barcode.setProperty('code39code32Prefix',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39code32Prefix:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code39code32Prefix');
# Getting multiple properties
myvar = Barcode.getProperties(['code39code32Prefix' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39convertToCode32'></a><div class='accordion property' id='pcode39convertToCode32'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39convertToCode32"><strong>code39convertToCode32</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39convertToCode32" class="accordion-body collapse in">  <div class="accordion-inner">Enables conversion from Code39 to Code 32 barcodes, when set the decoded barcode is converted to Code 32.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39convertToCode32=true
# Setting one property
Barcode.setProperty :code39convertToCode32, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code39convertToCode32 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code39convertToCode32')
# Getting multiple properties
myvar = Barcode.getProperties(['code39convertToCode32' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39convertToCode32=true;
# Setting one property
Barcode.setProperty('code39convertToCode32',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39convertToCode32:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code39convertToCode32');
# Getting multiple properties
myvar = Barcode.getProperties(['code39convertToCode32' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39fullAscii'></a><div class='accordion property' id='pcode39fullAscii'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39fullAscii"><strong>code39fullAscii</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39fullAscii" class="accordion-body collapse in">  <div class="accordion-inner">Enables full ASCII conversion of Code 39 barcodes
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39fullAscii=true
# Setting one property
Barcode.setProperty :code39fullAscii, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code39fullAscii => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code39fullAscii')
# Getting multiple properties
myvar = Barcode.getProperties(['code39fullAscii' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39fullAscii=true;
# Setting one property
Barcode.setProperty('code39fullAscii',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39fullAscii:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code39fullAscii');
# Getting multiple properties
myvar = Barcode.getProperties(['code39fullAscii' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39maxLength'></a><div class='accordion property' id='pcode39maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39maxLength"><strong>code39maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a Code 39 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39maxLength=0
# Setting one property
Barcode.setProperty :code39maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code39maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code39maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code39maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39maxLength=0;
# Setting one property
Barcode.setProperty('code39maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code39maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code39maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39minLength'></a><div class='accordion property' id='pcode39minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39minLength"><strong>code39minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a Code 39 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39minLength=0
# Setting one property
Barcode.setProperty :code39minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code39minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code39minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code39minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39minLength=0;
# Setting one property
Barcode.setProperty('code39minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code39minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code39minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39redundancy'></a><div class='accordion property' id='pcode39redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39redundancy"><strong>code39redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Code 39 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39redundancy=true
# Setting one property
Barcode.setProperty :code39redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code39redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code39redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['code39redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39redundancy=true;
# Setting one property
Barcode.setProperty('code39redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code39redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['code39redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39reportCheckDigit'></a><div class='accordion property' id='pcode39reportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39reportCheckDigit"><strong>code39reportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39reportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">Enables reporting of the Code 39 check digit when a Code 39 barcode is scanned.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39reportCheckDigit=true
# Setting one property
Barcode.setProperty :code39reportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code39reportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code39reportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['code39reportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39reportCheckDigit=true;
# Setting one property
Barcode.setProperty('code39reportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39reportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code39reportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['code39reportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39securityLevel'></a><div class='accordion property' id='pcode39securityLevel'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39securityLevel"><strong>code39securityLevel</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39securityLevel" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Code 128 security level and accepts a value between 0 and 3 inclusive. 0: This setting allows the scanner to operate in its most aggressive state, while providing sufficient security in decoding most 'in-spec' barcodes. 1: This setting eliminates most mis-decodes. 2: Select this option if security level 1 fails to eliminate mis-decodes. 3: Select this option if security level 1 and 2 fail to eliminate mis-decodes. Be advised that selecting level 3 is an extreme measure against mis-decoding and will significantly impair the decoding ability of the scanner.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39securityLevel=0
# Setting one property
Barcode.setProperty :code39securityLevel, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code39securityLevel => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code39securityLevel')
# Getting multiple properties
myvar = Barcode.getProperties(['code39securityLevel' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39securityLevel=0;
# Setting one property
Barcode.setProperty('code39securityLevel',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39securityLevel:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code39securityLevel');
# Getting multiple properties
myvar = Barcode.getProperties(['code39securityLevel' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode39verifyCheckDigit'></a><div class='accordion property' id='pcode39verifyCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode39verifyCheckDigit"><strong>code39verifyCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode39verifyCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">Turns on verification of the Code 39 check digit.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code39verifyCheckDigit=true
# Setting one property
Barcode.setProperty :code39verifyCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code39verifyCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code39verifyCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['code39verifyCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code39verifyCheckDigit=true;
# Setting one property
Barcode.setProperty('code39verifyCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code39verifyCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code39verifyCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['code39verifyCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode93'></a><div class='accordion property' id='pcode93'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode93"><strong>code93</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode93" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Code 93 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code93=true
# Setting one property
Barcode.setProperty :code93, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code93 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code93')
# Getting multiple properties
myvar = Barcode.getProperties(['code93' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code93=true;
# Setting one property
Barcode.setProperty('code93',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code93:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code93');
# Getting multiple properties
myvar = Barcode.getProperties(['code93' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode93maxLength'></a><div class='accordion property' id='pcode93maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode93maxLength"><strong>code93maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode93maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a Code 93 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code93maxLength=0
# Setting one property
Barcode.setProperty :code93maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code93maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code93maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code93maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code93maxLength=0;
# Setting one property
Barcode.setProperty('code93maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code93maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code93maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code93maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode93minLength'></a><div class='accordion property' id='pcode93minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode93minLength"><strong>code93minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode93minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a Code 93 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code93minLength=0
# Setting one property
Barcode.setProperty :code93minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :code93minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('code93minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['code93minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code93minLength=0;
# Setting one property
Barcode.setProperty('code93minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code93minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('code93minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['code93minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcode93redundancy'></a><div class='accordion property' id='pcode93redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycode93redundancy"><strong>code93redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycode93redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Code 93 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.code93redundancy=true
# Setting one property
Barcode.setProperty :code93redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :code93redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('code93redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['code93redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.code93redundancy=true;
# Setting one property
Barcode.setProperty('code93redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :code93redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('code93redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['code93redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcompositeAb'></a><div class='accordion property' id='pcompositeAb'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycompositeAb"><strong>compositeAb</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycompositeAb" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Composite AB barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.compositeAb=true
# Setting one property
Barcode.setProperty :compositeAb, true 
# Setting multiple properties using HASH
Barcode.setProperties { :compositeAb => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('compositeAb')
# Getting multiple properties
myvar = Barcode.getProperties(['compositeAb' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.compositeAb=true;
# Setting one property
Barcode.setProperty('compositeAb',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :compositeAb:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('compositeAb');
# Getting multiple properties
myvar = Barcode.getProperties(['compositeAb' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcompositeAbUccLinkMode'></a><div class='accordion property' id='pcompositeAbUccLinkMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycompositeAbUccLinkMode"><strong>compositeAbUccLinkMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycompositeAbUccLinkMode" class="accordion-body collapse in">  <div class="accordion-inner">Describes whether UCC link mode is enabled
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>never</dt><dd>Link flag is ignored</dt><dt>always</dt><dd>Composite AB barcodes are always linked</dt><dt>auto</dt><dd>Auto-discriminate whether Composite AB barcodes are linked</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.compositeAbUccLinkMode='some string'
# Setting one property
Barcode.setProperty :compositeAbUccLinkMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :compositeAbUccLinkMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('compositeAbUccLinkMode')
# Getting multiple properties
myvar = Barcode.getProperties(['compositeAbUccLinkMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.compositeAbUccLinkMode='some string';
# Setting one property
Barcode.setProperty('compositeAbUccLinkMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :compositeAbUccLinkMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('compositeAbUccLinkMode');
# Getting multiple properties
myvar = Barcode.getProperties(['compositeAbUccLinkMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcompositeAbUseUpcPreambleCheckDigitRules'></a><div class='accordion property' id='pcompositeAbUseUpcPreambleCheckDigitRules'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycompositeAbUseUpcPreambleCheckDigitRules"><strong>compositeAbUseUpcPreambleCheckDigitRules</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycompositeAbUseUpcPreambleCheckDigitRules" class="accordion-body collapse in">  <div class="accordion-inner">This setting causes the UPC rules specified in teh UPC EAN parameters to be used when reporting composite decode data.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.compositeAbUseUpcPreambleCheckDigitRules=true
# Setting one property
Barcode.setProperty :compositeAbUseUpcPreambleCheckDigitRules, true 
# Setting multiple properties using HASH
Barcode.setProperties { :compositeAbUseUpcPreambleCheckDigitRules => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('compositeAbUseUpcPreambleCheckDigitRules')
# Getting multiple properties
myvar = Barcode.getProperties(['compositeAbUseUpcPreambleCheckDigitRules' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.compositeAbUseUpcPreambleCheckDigitRules=true;
# Setting one property
Barcode.setProperty('compositeAbUseUpcPreambleCheckDigitRules',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :compositeAbUseUpcPreambleCheckDigitRules:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('compositeAbUseUpcPreambleCheckDigitRules');
# Getting multiple properties
myvar = Barcode.getProperties(['compositeAbUseUpcPreambleCheckDigitRules' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcompositeC'></a><div class='accordion property' id='pcompositeC'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycompositeC"><strong>compositeC</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycompositeC" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Composite C barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.compositeC=true
# Setting one property
Barcode.setProperty :compositeC, true 
# Setting multiple properties using HASH
Barcode.setProperties { :compositeC => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('compositeC')
# Getting multiple properties
myvar = Barcode.getProperties(['compositeC' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.compositeC=true;
# Setting one property
Barcode.setProperty('compositeC',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :compositeC:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('compositeC');
# Getting multiple properties
myvar = Barcode.getProperties(['compositeC' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pconnectionIdleTimeout'></a><div class='accordion property' id='pconnectionIdleTimeout'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyconnectionIdleTimeout"><strong>connectionIdleTimeout</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyconnectionIdleTimeout" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the time, in seconds, that an external scanner will be allowed to remain idle before the connection is terminated to conserve power.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Bluetooth Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.connectionIdleTimeout=0
# Setting one property
Barcode.setProperty :connectionIdleTimeout, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :connectionIdleTimeout => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('connectionIdleTimeout')
# Getting multiple properties
myvar = Barcode.getProperties(['connectionIdleTimeout' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.connectionIdleTimeout=0;
# Setting one property
Barcode.setProperty('connectionIdleTimeout',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :connectionIdleTimeout:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('connectionIdleTimeout');
# Getting multiple properties
myvar = Barcode.getProperties(['connectionIdleTimeout' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pd2of5'></a><div class='accordion property' id='pd2of5'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyd2of5"><strong>d2of5</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyd2of5" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for D2of5 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.d2of5=true
# Setting one property
Barcode.setProperty :d2of5, true 
# Setting multiple properties using HASH
Barcode.setProperties { :d2of5 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('d2of5')
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.d2of5=true;
# Setting one property
Barcode.setProperty('d2of5',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :d2of5:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('d2of5');
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pd2of5maxLength'></a><div class='accordion property' id='pd2of5maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyd2of5maxLength"><strong>d2of5maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyd2of5maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a D2of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.d2of5maxLength=0
# Setting one property
Barcode.setProperty :d2of5maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :d2of5maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('d2of5maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.d2of5maxLength=0;
# Setting one property
Barcode.setProperty('d2of5maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :d2of5maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('d2of5maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pd2of5minLength'></a><div class='accordion property' id='pd2of5minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyd2of5minLength"><strong>d2of5minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyd2of5minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a D2of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.d2of5minLength=0
# Setting one property
Barcode.setProperty :d2of5minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :d2of5minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('d2of5minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.d2of5minLength=0;
# Setting one property
Barcode.setProperty('d2of5minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :d2of5minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('d2of5minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pd2of5redundancy'></a><div class='accordion property' id='pd2of5redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyd2of5redundancy"><strong>d2of5redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyd2of5redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the D2of5 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.d2of5redundancy=true
# Setting one property
Barcode.setProperty :d2of5redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :d2of5redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('d2of5redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.d2of5redundancy=true;
# Setting one property
Barcode.setProperty('d2of5redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :d2of5redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('d2of5redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['d2of5redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdataBufferSize'></a><div class='accordion property' id='pdataBufferSize'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydataBufferSize"><strong>dataBufferSize</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydataBufferSize" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the number of bytes allocated to receive the scanned barcode. This parameter is designed to be used primarily with image based symbologies and should not be modified unless absolutely necessary (eg. Signature).
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.dataBufferSize=0
# Setting one property
Barcode.setProperty :dataBufferSize, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :dataBufferSize => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('dataBufferSize')
# Getting multiple properties
myvar = Barcode.getProperties(['dataBufferSize' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.dataBufferSize=0;
# Setting one property
Barcode.setProperty('dataBufferSize',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :dataBufferSize:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('dataBufferSize');
# Getting multiple properties
myvar = Barcode.getProperties(['dataBufferSize' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdatamatrix'></a><div class='accordion property' id='pdatamatrix'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydatamatrix"><strong>datamatrix</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydatamatrix" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Datamatrix barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.datamatrix=true
# Setting one property
Barcode.setProperty :datamatrix, true 
# Setting multiple properties using HASH
Barcode.setProperties { :datamatrix => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('datamatrix')
# Getting multiple properties
myvar = Barcode.getProperties(['datamatrix' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.datamatrix=true;
# Setting one property
Barcode.setProperty('datamatrix',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :datamatrix:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('datamatrix');
# Getting multiple properties
myvar = Barcode.getProperties(['datamatrix' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdbpMode'></a><div class='accordion property' id='pdbpMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydbpMode"><strong>dbpMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydbpMode" class="accordion-body collapse in">  <div class="accordion-inner">Describes the type of Digital Bar Pulse (DBP) being produced by the scan engine. 
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Laser Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>normal</dt><dd>Tells the scan engine to produce normal DBP.</dt><dt>composite</dt><dd>Tells the scan engine to produce composite DBP, which is 2 different sets of DBP data multiplexed together for better decode performance.  In order to enable this mode it must be supported by the scanner.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.dbpMode='some string'
# Setting one property
Barcode.setProperty :dbpMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :dbpMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('dbpMode')
# Getting multiple properties
myvar = Barcode.getProperties(['dbpMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.dbpMode='some string';
# Setting one property
Barcode.setProperty('dbpMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :dbpMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('dbpMode');
# Getting multiple properties
myvar = Barcode.getProperties(['dbpMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdecodeDuration'></a><div class='accordion property' id='pdecodeDuration'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydecodeDuration"><strong>decodeDuration</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydecodeDuration" class="accordion-body collapse in">  <div class="accordion-inner">The duration of the device beeper when a barcode is scanned, in milliseconds.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Default:</strong> 250</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.decodeDuration=0
# Setting one property
Barcode.setProperty :decodeDuration, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :decodeDuration => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('decodeDuration')
# Getting multiple properties
myvar = Barcode.getProperties(['decodeDuration' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.decodeDuration=0;
# Setting one property
Barcode.setProperty('decodeDuration',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :decodeDuration:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('decodeDuration');
# Getting multiple properties
myvar = Barcode.getProperties(['decodeDuration' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdecodeFrequency'></a><div class='accordion property' id='pdecodeFrequency'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydecodeFrequency"><strong>decodeFrequency</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydecodeFrequency" class="accordion-body collapse in">  <div class="accordion-inner">The frequency of the device beeper when a barcode is successfully decoded. This should be within the range of the beeper but the API will accept values in the range 0 to 65535.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Default:</strong> 3000</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.decodeFrequency=0
# Setting one property
Barcode.setProperty :decodeFrequency, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :decodeFrequency => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('decodeFrequency')
# Getting multiple properties
myvar = Barcode.getProperties(['decodeFrequency' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.decodeFrequency=0;
# Setting one property
Barcode.setProperty('decodeFrequency',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :decodeFrequency:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('decodeFrequency');
# Getting multiple properties
myvar = Barcode.getProperties(['decodeFrequency' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdecodeSound'></a><div class='accordion property' id='pdecodeSound'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydecodeSound"><strong>decodeSound</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydecodeSound" class="accordion-body collapse in">  <div class="accordion-inner">Local path to a wave file to be played when the scanner successfully decodes a barcode. This setting overrides the scanner beeper.  Not available on Android.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.decodeSound='some string'
# Setting one property
Barcode.setProperty :decodeSound, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :decodeSound => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('decodeSound')
# Getting multiple properties
myvar = Barcode.getProperties(['decodeSound' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.decodeSound='some string';
# Setting one property
Barcode.setProperty('decodeSound','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :decodeSound:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('decodeSound');
# Getting multiple properties
myvar = Barcode.getProperties(['decodeSound' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdecodeVolume'></a><div class='accordion property' id='pdecodeVolume'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydecodeVolume"><strong>decodeVolume</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydecodeVolume" class="accordion-body collapse in">  <div class="accordion-inner">The volume of the device beeper when a barcode is scanned.  0 to 5 with 5 being the loudest.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Default:</strong> 5</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.decodeVolume=0
# Setting one property
Barcode.setProperty :decodeVolume, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :decodeVolume => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('decodeVolume')
# Getting multiple properties
myvar = Barcode.getProperties(['decodeVolume' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.decodeVolume=0;
# Setting one property
Barcode.setProperty('decodeVolume',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :decodeVolume:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('decodeVolume');
# Getting multiple properties
myvar = Barcode.getProperties(['decodeVolume' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdifferentSymbolTimeout'></a><div class='accordion property' id='pdifferentSymbolTimeout'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydifferentSymbolTimeout"><strong>differentSymbolTimeout</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydifferentSymbolTimeout" class="accordion-body collapse in">  <div class="accordion-inner">When the aimType:continuousRead property is applied this value defines the interval between which different barcodes can be scanned. The value is specified in milliseconds, use 0 to indicate no interval between successive reads. Use this setting to allow time for the operator to reaim the device between successive scans.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.differentSymbolTimeout=0
# Setting one property
Barcode.setProperty :differentSymbolTimeout, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :differentSymbolTimeout => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('differentSymbolTimeout')
# Getting multiple properties
myvar = Barcode.getProperties(['differentSymbolTimeout' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.differentSymbolTimeout=0;
# Setting one property
Barcode.setProperty('differentSymbolTimeout',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :differentSymbolTimeout:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('differentSymbolTimeout');
# Getting multiple properties
myvar = Barcode.getProperties(['differentSymbolTimeout' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdisableScannerDuringNavigate'></a><div class='accordion property' id='pdisableScannerDuringNavigate'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydisableScannerDuringNavigate"><strong>disableScannerDuringNavigate</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydisableScannerDuringNavigate" class="accordion-body collapse in">  <div class="accordion-inner">By default if you have enabled the Scanner on a page, through either JavaScript or Ruby and navigate to a new page the Scanner will automatically disable. To override this behaviour you can set this option to false and once enabled the Scanner will remain so in the foreground application ultil you disable it.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Default:</strong> true</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.disableScannerDuringNavigate=true
# Setting one property
Barcode.setProperty :disableScannerDuringNavigate, true 
# Setting multiple properties using HASH
Barcode.setProperties { :disableScannerDuringNavigate => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('disableScannerDuringNavigate')
# Getting multiple properties
myvar = Barcode.getProperties(['disableScannerDuringNavigate' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.disableScannerDuringNavigate=true;
# Setting one property
Barcode.setProperty('disableScannerDuringNavigate',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :disableScannerDuringNavigate:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('disableScannerDuringNavigate');
# Getting multiple properties
myvar = Barcode.getProperties(['disableScannerDuringNavigate' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdisconnectBtOnDisable'></a><div class='accordion property' id='pdisconnectBtOnDisable'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydisconnectBtOnDisable"><strong>disconnectBtOnDisable</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydisconnectBtOnDisable" class="accordion-body collapse in">  <div class="accordion-inner">Forces the scanner to disconnect from the terminal when it is 'disabled'. Since the scanner is disabled when you navigate to a new page, set this value to false if you want to maintain the bluetooth connection to your remote scanner.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Bluetooth Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.disconnectBtOnDisable=true
# Setting one property
Barcode.setProperty :disconnectBtOnDisable, true 
# Setting multiple properties using HASH
Barcode.setProperties { :disconnectBtOnDisable => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('disconnectBtOnDisable')
# Getting multiple properties
myvar = Barcode.getProperties(['disconnectBtOnDisable' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.disconnectBtOnDisable=true;
# Setting one property
Barcode.setProperty('disconnectBtOnDisable',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :disconnectBtOnDisable:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('disconnectBtOnDisable');
# Getting multiple properties
myvar = Barcode.getProperties(['disconnectBtOnDisable' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdisplayBtAddressBarcodeOnEnable'></a><div class='accordion property' id='pdisplayBtAddressBarcodeOnEnable'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydisplayBtAddressBarcodeOnEnable"><strong>displayBtAddressBarcodeOnEnable</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydisplayBtAddressBarcodeOnEnable" class="accordion-body collapse in">  <div class="accordion-inner">If set to true the bluetooth address will be displayed as a barcode on the screen during the pairing process, initiated by calling 'enable' on a bluetooth scanner. Not all devices support this functionality. Note you must specify this parameter before or within the call to 'enable'.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Bluetooth Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.displayBtAddressBarcodeOnEnable=true
# Setting one property
Barcode.setProperty :displayBtAddressBarcodeOnEnable, true 
# Setting multiple properties using HASH
Barcode.setProperties { :displayBtAddressBarcodeOnEnable => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('displayBtAddressBarcodeOnEnable')
# Getting multiple properties
myvar = Barcode.getProperties(['displayBtAddressBarcodeOnEnable' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.displayBtAddressBarcodeOnEnable=true;
# Setting one property
Barcode.setProperty('displayBtAddressBarcodeOnEnable',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :displayBtAddressBarcodeOnEnable:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('displayBtAddressBarcodeOnEnable');
# Getting multiple properties
myvar = Barcode.getProperties(['displayBtAddressBarcodeOnEnable' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdpmMode'></a><div class='accordion property' id='pdpmMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydpmMode"><strong>dpmMode</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydpmMode" class="accordion-body collapse in">  <div class="accordion-inner">Allows Direct Part Marking (DPM) barcodes to be read when true but may adversely affect overall decoding performance. DPM is a way of stamping barcodes directly on physical objects and is only available on DPM terminals.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Imager / Camera Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.dpmMode=true
# Setting one property
Barcode.setProperty :dpmMode, true 
# Setting multiple properties using HASH
Barcode.setProperties { :dpmMode => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('dpmMode')
# Getting multiple properties
myvar = Barcode.getProperties(['dpmMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.dpmMode=true;
# Setting one property
Barcode.setProperty('dpmMode',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :dpmMode:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('dpmMode');
# Getting multiple properties
myvar = Barcode.getProperties(['dpmMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pdutchPostal'></a><div class='accordion property' id='pdutchPostal'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertydutchPostal"><strong>dutchPostal</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertydutchPostal" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Dutch Postal barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.dutchPostal=true
# Setting one property
Barcode.setProperty :dutchPostal, true 
# Setting multiple properties using HASH
Barcode.setProperties { :dutchPostal => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('dutchPostal')
# Getting multiple properties
myvar = Barcode.getProperties(['dutchPostal' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.dutchPostal=true;
# Setting one property
Barcode.setProperty('dutchPostal',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :dutchPostal:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('dutchPostal');
# Getting multiple properties
myvar = Barcode.getProperties(['dutchPostal' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pean13'></a><div class='accordion property' id='pean13'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyean13"><strong>ean13</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyean13" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for EAN 13 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.ean13=true
# Setting one property
Barcode.setProperty :ean13, true 
# Setting multiple properties using HASH
Barcode.setProperties { :ean13 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('ean13')
# Getting multiple properties
myvar = Barcode.getProperties(['ean13' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.ean13=true;
# Setting one property
Barcode.setProperty('ean13',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :ean13:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('ean13');
# Getting multiple properties
myvar = Barcode.getProperties(['ean13' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pean8'></a><div class='accordion property' id='pean8'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyean8"><strong>ean8</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyean8" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for EAN 8 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.ean8=true
# Setting one property
Barcode.setProperty :ean8, true 
# Setting multiple properties using HASH
Barcode.setProperties { :ean8 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('ean8')
# Getting multiple properties
myvar = Barcode.getProperties(['ean8' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.ean8=true;
# Setting one property
Barcode.setProperty('ean8',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :ean8:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('ean8');
# Getting multiple properties
myvar = Barcode.getProperties(['ean8' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pean8convertToEan13'></a><div class='accordion property' id='pean8convertToEan13'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyean8convertToEan13"><strong>ean8convertToEan13</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyean8convertToEan13" class="accordion-body collapse in">  <div class="accordion-inner">When true, EAN 8 barcodes will be converted to EAN 13 and EAN 13 parameters used.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.ean8convertToEan13=true
# Setting one property
Barcode.setProperty :ean8convertToEan13, true 
# Setting multiple properties using HASH
Barcode.setProperties { :ean8convertToEan13 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('ean8convertToEan13')
# Getting multiple properties
myvar = Barcode.getProperties(['ean8convertToEan13' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.ean8convertToEan13=true;
# Setting one property
Barcode.setProperty('ean8convertToEan13',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :ean8convertToEan13:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('ean8convertToEan13');
# Getting multiple properties
myvar = Barcode.getProperties(['ean8convertToEan13' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='penableTimeout'></a><div class='accordion property' id='penableTimeout'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyenableTimeout"><strong>enableTimeout</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyenableTimeout" class="accordion-body collapse in">  <div class="accordion-inner">Configures the time (in seconds) allowed to pair with the external bluetooth scanner after calling the 'enable()' method. You must specify this parameter before calling 'enable' to change the default.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Bluetooth Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.enableTimeout=0
# Setting one property
Barcode.setProperty :enableTimeout, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :enableTimeout => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('enableTimeout')
# Getting multiple properties
myvar = Barcode.getProperties(['enableTimeout' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.enableTimeout=0;
# Setting one property
Barcode.setProperty('enableTimeout',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :enableTimeout:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('enableTimeout');
# Getting multiple properties
myvar = Barcode.getProperties(['enableTimeout' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pfocusMode'></a><div class='accordion property' id='pfocusMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyfocusMode"><strong>focusMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyfocusMode" class="accordion-body collapse in">  <div class="accordion-inner">Sets the focus mode in use.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Imager / Camera Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>fixed</dt><dd>Use fixed focus.</dt><dt>auto</dt><dd>Use auto focus.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.focusMode='some string'
# Setting one property
Barcode.setProperty :focusMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :focusMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('focusMode')
# Getting multiple properties
myvar = Barcode.getProperties(['focusMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.focusMode='some string';
# Setting one property
Barcode.setProperty('focusMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :focusMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('focusMode');
# Getting multiple properties
myvar = Barcode.getProperties(['focusMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pfriendlyName'></a><div class='accordion property' id='pfriendlyName'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyfriendlyName"><strong>friendlyName</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyfriendlyName" class="accordion-body collapse in">  <div class="accordion-inner">Returns the friendly name associated with the scanner.  Maximum 23 characters.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('friendlyName')
# Getting multiple properties
myvar = Barcode.getProperties(['friendlyName' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('friendlyName');
# Getting multiple properties
myvar = Barcode.getProperties(['friendlyName' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pgs1dataBar'></a><div class='accordion property' id='pgs1dataBar'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertygs1dataBar"><strong>gs1dataBar</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertygs1dataBar" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for GS1 DataBar barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.  This symbology was previously known as rss.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.gs1dataBar=true
# Setting one property
Barcode.setProperty :gs1dataBar, true 
# Setting multiple properties using HASH
Barcode.setProperties { :gs1dataBar => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('gs1dataBar')
# Getting multiple properties
myvar = Barcode.getProperties(['gs1dataBar' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.gs1dataBar=true;
# Setting one property
Barcode.setProperty('gs1dataBar',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :gs1dataBar:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('gs1dataBar');
# Getting multiple properties
myvar = Barcode.getProperties(['gs1dataBar' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pgs1dataBarExpanded'></a><div class='accordion property' id='pgs1dataBarExpanded'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertygs1dataBarExpanded"><strong>gs1dataBarExpanded</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertygs1dataBarExpanded" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for GS1 Databar Expanded barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.  This symbology was previously known as rssExp.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.gs1dataBarExpanded=true
# Setting one property
Barcode.setProperty :gs1dataBarExpanded, true 
# Setting multiple properties using HASH
Barcode.setProperties { :gs1dataBarExpanded => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('gs1dataBarExpanded')
# Getting multiple properties
myvar = Barcode.getProperties(['gs1dataBarExpanded' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.gs1dataBarExpanded=true;
# Setting one property
Barcode.setProperty('gs1dataBarExpanded',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :gs1dataBarExpanded:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('gs1dataBarExpanded');
# Getting multiple properties
myvar = Barcode.getProperties(['gs1dataBarExpanded' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pgs1dataBarLimited'></a><div class='accordion property' id='pgs1dataBarLimited'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertygs1dataBarLimited"><strong>gs1dataBarLimited</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertygs1dataBarLimited" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for GS1 Databar Limited barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.  This symbology was previously known as rssLim.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.gs1dataBarLimited=true
# Setting one property
Barcode.setProperty :gs1dataBarLimited, true 
# Setting multiple properties using HASH
Barcode.setProperties { :gs1dataBarLimited => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('gs1dataBarLimited')
# Getting multiple properties
myvar = Barcode.getProperties(['gs1dataBarLimited' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.gs1dataBarLimited=true;
# Setting one property
Barcode.setProperty('gs1dataBarLimited',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :gs1dataBarLimited:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('gs1dataBarLimited');
# Getting multiple properties
myvar = Barcode.getProperties(['gs1dataBarLimited' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pi2of5'></a><div class='accordion property' id='pi2of5'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyi2of5"><strong>i2of5</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyi2of5" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for I2of5 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.i2of5=true
# Setting one property
Barcode.setProperty :i2of5, true 
# Setting multiple properties using HASH
Barcode.setProperties { :i2of5 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('i2of5')
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.i2of5=true;
# Setting one property
Barcode.setProperty('i2of5',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :i2of5:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('i2of5');
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pi2of5convertToEan13'></a><div class='accordion property' id='pi2of5convertToEan13'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyi2of5convertToEan13"><strong>i2of5convertToEan13</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyi2of5convertToEan13" class="accordion-body collapse in">  <div class="accordion-inner">When true, EAN 8 barcodes will be converted to EAN 13 and EAN 13 parameters used.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.i2of5convertToEan13=true
# Setting one property
Barcode.setProperty :i2of5convertToEan13, true 
# Setting multiple properties using HASH
Barcode.setProperties { :i2of5convertToEan13 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('i2of5convertToEan13')
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5convertToEan13' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.i2of5convertToEan13=true;
# Setting one property
Barcode.setProperty('i2of5convertToEan13',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :i2of5convertToEan13:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('i2of5convertToEan13');
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5convertToEan13' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pi2of5maxLength'></a><div class='accordion property' id='pi2of5maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyi2of5maxLength"><strong>i2of5maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyi2of5maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a I2of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.i2of5maxLength=0
# Setting one property
Barcode.setProperty :i2of5maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :i2of5maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('i2of5maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.i2of5maxLength=0;
# Setting one property
Barcode.setProperty('i2of5maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :i2of5maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('i2of5maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pi2of5minLength'></a><div class='accordion property' id='pi2of5minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyi2of5minLength"><strong>i2of5minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyi2of5minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a I2of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.i2of5minLength=0
# Setting one property
Barcode.setProperty :i2of5minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :i2of5minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('i2of5minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.i2of5minLength=0;
# Setting one property
Barcode.setProperty('i2of5minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :i2of5minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('i2of5minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pi2of5redundancy'></a><div class='accordion property' id='pi2of5redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyi2of5redundancy"><strong>i2of5redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyi2of5redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the I2of5 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.i2of5redundancy=true
# Setting one property
Barcode.setProperty :i2of5redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :i2of5redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('i2of5redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.i2of5redundancy=true;
# Setting one property
Barcode.setProperty('i2of5redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :i2of5redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('i2of5redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pi2of5reportCheckDigit'></a><div class='accordion property' id='pi2of5reportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyi2of5reportCheckDigit"><strong>i2of5reportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyi2of5reportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned I2of5 barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.i2of5reportCheckDigit=true
# Setting one property
Barcode.setProperty :i2of5reportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :i2of5reportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('i2of5reportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5reportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.i2of5reportCheckDigit=true;
# Setting one property
Barcode.setProperty('i2of5reportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :i2of5reportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('i2of5reportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5reportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pi2of5verifyCheckDigit'></a><div class='accordion property' id='pi2of5verifyCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyi2of5verifyCheckDigit"><strong>i2of5verifyCheckDigit</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyi2of5verifyCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">Enables the verification of the I2of5 check digit
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>Disables verification of the check digit.</dt><dt>uss</dt><dd>Enables the USS format for the check digit.</dt><dt>opcc</dt><dd>Enables the OPCC format for the check digit.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.i2of5verifyCheckDigit='some string'
# Setting one property
Barcode.setProperty :i2of5verifyCheckDigit, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :i2of5verifyCheckDigit => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('i2of5verifyCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5verifyCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.i2of5verifyCheckDigit='some string';
# Setting one property
Barcode.setProperty('i2of5verifyCheckDigit','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :i2of5verifyCheckDigit:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('i2of5verifyCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['i2of5verifyCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pilluminationMode'></a><div class='accordion property' id='pilluminationMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyilluminationMode"><strong>illuminationMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyilluminationMode" class="accordion-body collapse in">  <div class="accordion-inner">Selects the illumination mode to use.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Imager / Camera Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>auto</dt><dd>Auto-exposure algorithms will decide whether illumination is required or not.  Not available on Android.</dt><dt>alwaysOn</dt><dd>External illumination is always on.</dt><dt>alwaysOff</dt><dd>External illumination is always off.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.illuminationMode='some string'
# Setting one property
Barcode.setProperty :illuminationMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :illuminationMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('illuminationMode')
# Getting multiple properties
myvar = Barcode.getProperties(['illuminationMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.illuminationMode='some string';
# Setting one property
Barcode.setProperty('illuminationMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :illuminationMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('illuminationMode');
# Getting multiple properties
myvar = Barcode.getProperties(['illuminationMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pinvalidDecodeFrequency'></a><div class='accordion property' id='pinvalidDecodeFrequency'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyinvalidDecodeFrequency"><strong>invalidDecodeFrequency</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyinvalidDecodeFrequency" class="accordion-body collapse in">  <div class="accordion-inner">The frequency of the device beeper when a barcode is scanned but not successfully decoded. This should be within the range of the beeper but the API will accept values in the range 0 to 65535. Not applicable to Android.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Default:</strong> 2500</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.invalidDecodeFrequency=0
# Setting one property
Barcode.setProperty :invalidDecodeFrequency, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :invalidDecodeFrequency => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('invalidDecodeFrequency')
# Getting multiple properties
myvar = Barcode.getProperties(['invalidDecodeFrequency' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.invalidDecodeFrequency=0;
# Setting one property
Barcode.setProperty('invalidDecodeFrequency',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :invalidDecodeFrequency:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('invalidDecodeFrequency');
# Getting multiple properties
myvar = Barcode.getProperties(['invalidDecodeFrequency' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pinvalidDecodeSound'></a><div class='accordion property' id='pinvalidDecodeSound'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyinvalidDecodeSound"><strong>invalidDecodeSound</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyinvalidDecodeSound" class="accordion-body collapse in">  <div class="accordion-inner">Local path to a wave file to be played when a barcode is scanned but not successfully decoded. This setting overrides the scanner beeper. Not available on Android.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.invalidDecodeSound='some string'
# Setting one property
Barcode.setProperty :invalidDecodeSound, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :invalidDecodeSound => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('invalidDecodeSound')
# Getting multiple properties
myvar = Barcode.getProperties(['invalidDecodeSound' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.invalidDecodeSound='some string';
# Setting one property
Barcode.setProperty('invalidDecodeSound','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :invalidDecodeSound:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('invalidDecodeSound');
# Getting multiple properties
myvar = Barcode.getProperties(['invalidDecodeSound' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pinverse1dMode'></a><div class='accordion property' id='pinverse1dMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyinverse1dMode"><strong>inverse1dMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyinverse1dMode" class="accordion-body collapse in">  <div class="accordion-inner">Allows the user to select inverse 1D barcodes for decoding.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices.  The scanning engine must support inverse barcodes</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>enabled</dt><dd>Inverse 1D symbology decoding is enabled.</dt><dt>disabled</dt><dd>Inverse 1D symbology decoding is disabled.</dt><dt>auto</dt><dd>Allows decoding of both positive and inverse 1D symbologies.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.inverse1dMode='some string'
# Setting one property
Barcode.setProperty :inverse1dMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :inverse1dMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('inverse1dMode')
# Getting multiple properties
myvar = Barcode.getProperties(['inverse1dMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.inverse1dMode='some string';
# Setting one property
Barcode.setProperty('inverse1dMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :inverse1dMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('inverse1dMode');
# Getting multiple properties
myvar = Barcode.getProperties(['inverse1dMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pjapPostal'></a><div class='accordion property' id='pjapPostal'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyjapPostal"><strong>japPostal</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyjapPostal" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Japanese Postal barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.japPostal=true
# Setting one property
Barcode.setProperty :japPostal, true 
# Setting multiple properties using HASH
Barcode.setProperties { :japPostal => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('japPostal')
# Getting multiple properties
myvar = Barcode.getProperties(['japPostal' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.japPostal=true;
# Setting one property
Barcode.setProperty('japPostal',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :japPostal:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('japPostal');
# Getting multiple properties
myvar = Barcode.getProperties(['japPostal' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pklasseEins'></a><div class='accordion property' id='pklasseEins'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyklasseEins"><strong>klasseEins</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyklasseEins" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the Klasse Eins laser on time function.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Laser Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.klasseEins=true
# Setting one property
Barcode.setProperty :klasseEins, true 
# Setting multiple properties using HASH
Barcode.setProperties { :klasseEins => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('klasseEins')
# Getting multiple properties
myvar = Barcode.getProperties(['klasseEins' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.klasseEins=true;
# Setting one property
Barcode.setProperty('klasseEins',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :klasseEins:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('klasseEins');
# Getting multiple properties
myvar = Barcode.getProperties(['klasseEins' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pkorean3of5'></a><div class='accordion property' id='pkorean3of5'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertykorean3of5"><strong>korean3of5</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertykorean3of5" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Korean 3of5 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.korean3of5=true
# Setting one property
Barcode.setProperty :korean3of5, true 
# Setting multiple properties using HASH
Barcode.setProperties { :korean3of5 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('korean3of5')
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.korean3of5=true;
# Setting one property
Barcode.setProperty('korean3of5',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :korean3of5:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('korean3of5');
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pkorean3of5maxLength'></a><div class='accordion property' id='pkorean3of5maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertykorean3of5maxLength"><strong>korean3of5maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertykorean3of5maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a Korean 3of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.korean3of5maxLength=0
# Setting one property
Barcode.setProperty :korean3of5maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :korean3of5maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('korean3of5maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.korean3of5maxLength=0;
# Setting one property
Barcode.setProperty('korean3of5maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :korean3of5maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('korean3of5maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pkorean3of5minLength'></a><div class='accordion property' id='pkorean3of5minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertykorean3of5minLength"><strong>korean3of5minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertykorean3of5minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a Korean 3of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.korean3of5minLength=0
# Setting one property
Barcode.setProperty :korean3of5minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :korean3of5minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('korean3of5minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.korean3of5minLength=0;
# Setting one property
Barcode.setProperty('korean3of5minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :korean3of5minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('korean3of5minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pkorean3of5redundancy'></a><div class='accordion property' id='pkorean3of5redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertykorean3of5redundancy"><strong>korean3of5redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertykorean3of5redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets Korean 3of5 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.korean3of5redundancy=true
# Setting one property
Barcode.setProperty :korean3of5redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :korean3of5redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('korean3of5redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.korean3of5redundancy=true;
# Setting one property
Barcode.setProperty('korean3of5redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :korean3of5redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('korean3of5redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['korean3of5redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='plinearSecurityLevel'></a><div class='accordion property' id='plinearSecurityLevel'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertylinearSecurityLevel"><strong>linearSecurityLevel</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertylinearSecurityLevel" class="accordion-body collapse in">  <div class="accordion-inner">Describes the linear security level used during decoding.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>redundancyAndLength</dt><dd>Two times redundancy based on redundancy flags and code length.  Only applicable to laser scanners, not BlockBuster imager scanners.</dt><dt>shortOrCodabar</dt><dd>Two times redundancy if short barcode or Codabar.</dt><dt>longAndShort</dt><dd>Two times redundancy for long barcodes, three times for short barcodes.</dt><dt>allTwice</dt><dd>Two times redundancy for all barcodes.</dt><dt>allThrice</dt><dd>Three times redundancy for all barcodes.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.linearSecurityLevel='some string'
# Setting one property
Barcode.setProperty :linearSecurityLevel, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :linearSecurityLevel => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('linearSecurityLevel')
# Getting multiple properties
myvar = Barcode.getProperties(['linearSecurityLevel' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.linearSecurityLevel='some string';
# Setting one property
Barcode.setProperty('linearSecurityLevel','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :linearSecurityLevel:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('linearSecurityLevel');
# Getting multiple properties
myvar = Barcode.getProperties(['linearSecurityLevel' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='plowBatteryScan'></a><div class='accordion property' id='plowBatteryScan'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertylowBatteryScan"><strong>lowBatteryScan</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertylowBatteryScan" class="accordion-body collapse in">  <div class="accordion-inner">Set to false to disable scanning when the battery is low or set to true to enable it. Once disabled the scanner can be enabled again by calling enable().
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Default:</strong> false</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.lowBatteryScan=true
# Setting one property
Barcode.setProperty :lowBatteryScan, true 
# Setting multiple properties using HASH
Barcode.setProperties { :lowBatteryScan => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('lowBatteryScan')
# Getting multiple properties
myvar = Barcode.getProperties(['lowBatteryScan' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.lowBatteryScan=true;
# Setting one property
Barcode.setProperty('lowBatteryScan',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :lowBatteryScan:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('lowBatteryScan');
# Getting multiple properties
myvar = Barcode.getProperties(['lowBatteryScan' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroMicroPdf'></a><div class='accordion property' id='pmacroMicroPdf'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroMicroPdf"><strong>macroMicroPdf</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroMicroPdf" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Macro Micro PDF barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroMicroPdf=true
# Setting one property
Barcode.setProperty :macroMicroPdf, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroMicroPdf => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroMicroPdf')
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdf' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroMicroPdf=true;
# Setting one property
Barcode.setProperty('macroMicroPdf',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroMicroPdf:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroMicroPdf');
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdf' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroMicroPdfBufferLabels'></a><div class='accordion property' id='pmacroMicroPdfBufferLabels'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroMicroPdfBufferLabels"><strong>macroMicroPdfBufferLabels</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroMicroPdfBufferLabels" class="accordion-body collapse in">  <div class="accordion-inner">If true, the scanner driver will return the barcode data only after the complete macroMicroPdf sequence has been read. If false, the scanner driver will return each barcode in the macroMicroPdf sequence as it is read.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroMicroPdfBufferLabels=true
# Setting one property
Barcode.setProperty :macroMicroPdfBufferLabels, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroMicroPdfBufferLabels => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfBufferLabels')
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfBufferLabels' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroMicroPdfBufferLabels=true;
# Setting one property
Barcode.setProperty('macroMicroPdfBufferLabels',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroMicroPdfBufferLabels:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfBufferLabels');
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfBufferLabels' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroMicroPdfConvertToMicroPdf'></a><div class='accordion property' id='pmacroMicroPdfConvertToMicroPdf'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroMicroPdfConvertToMicroPdf"><strong>macroMicroPdfConvertToMicroPdf</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroMicroPdfConvertToMicroPdf" class="accordion-body collapse in">  <div class="accordion-inner">If true, MacroMicroPDF barcodes will be converted to MicroPDF codes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroMicroPdfConvertToMicroPdf=true
# Setting one property
Barcode.setProperty :macroMicroPdfConvertToMicroPdf, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroMicroPdfConvertToMicroPdf => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfConvertToMicroPdf')
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfConvertToMicroPdf' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroMicroPdfConvertToMicroPdf=true;
# Setting one property
Barcode.setProperty('macroMicroPdfConvertToMicroPdf',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroMicroPdfConvertToMicroPdf:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfConvertToMicroPdf');
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfConvertToMicroPdf' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroMicroPdfExclusive'></a><div class='accordion property' id='pmacroMicroPdfExclusive'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroMicroPdfExclusive"><strong>macroMicroPdfExclusive</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroMicroPdfExclusive" class="accordion-body collapse in">  <div class="accordion-inner">If true, the scanner driver will not complete read requests while in the middle of a macroMicroPdf sequence. Once a macroMicroPdf sequence has been started it must be completed or cancelled before the scan driver will complete other read requests.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroMicroPdfExclusive=true
# Setting one property
Barcode.setProperty :macroMicroPdfExclusive, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroMicroPdfExclusive => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfExclusive')
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfExclusive' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroMicroPdfExclusive=true;
# Setting one property
Barcode.setProperty('macroMicroPdfExclusive',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroMicroPdfExclusive:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfExclusive');
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfExclusive' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroMicroPdfReportAppendInfo'></a><div class='accordion property' id='pmacroMicroPdfReportAppendInfo'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroMicroPdfReportAppendInfo"><strong>macroMicroPdfReportAppendInfo</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroMicroPdfReportAppendInfo" class="accordion-body collapse in">  <div class="accordion-inner">If true, the appended info is concatenated to the decoded data before being returned.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroMicroPdfReportAppendInfo=true
# Setting one property
Barcode.setProperty :macroMicroPdfReportAppendInfo, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroMicroPdfReportAppendInfo => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfReportAppendInfo')
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfReportAppendInfo' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroMicroPdfReportAppendInfo=true;
# Setting one property
Barcode.setProperty('macroMicroPdfReportAppendInfo',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroMicroPdfReportAppendInfo:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroMicroPdfReportAppendInfo');
# Getting multiple properties
myvar = Barcode.getProperties(['macroMicroPdfReportAppendInfo' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroPdf'></a><div class='accordion property' id='pmacroPdf'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroPdf"><strong>macroPdf</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroPdf" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Macro PDF barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroPdf=true
# Setting one property
Barcode.setProperty :macroPdf, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroPdf => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroPdf')
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdf' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroPdf=true;
# Setting one property
Barcode.setProperty('macroPdf',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroPdf:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroPdf');
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdf' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroPdfBufferLabels'></a><div class='accordion property' id='pmacroPdfBufferLabels'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroPdfBufferLabels"><strong>macroPdfBufferLabels</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroPdfBufferLabels" class="accordion-body collapse in">  <div class="accordion-inner">When true, the scanner driver will return  he barcode data only after the complete macroPdf sequence has been read. If false, the scan driver will return each barcode in the macroPdf sequence as it is read.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroPdfBufferLabels=true
# Setting one property
Barcode.setProperty :macroPdfBufferLabels, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroPdfBufferLabels => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroPdfBufferLabels')
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdfBufferLabels' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroPdfBufferLabels=true;
# Setting one property
Barcode.setProperty('macroPdfBufferLabels',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroPdfBufferLabels:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroPdfBufferLabels');
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdfBufferLabels' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroPdfConvertToPdf417'></a><div class='accordion property' id='pmacroPdfConvertToPdf417'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroPdfConvertToPdf417"><strong>macroPdfConvertToPdf417</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroPdfConvertToPdf417" class="accordion-body collapse in">  <div class="accordion-inner">If true, MacroPDF barcodes will be converted to PDF417 codes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroPdfConvertToPdf417=true
# Setting one property
Barcode.setProperty :macroPdfConvertToPdf417, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroPdfConvertToPdf417 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroPdfConvertToPdf417')
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdfConvertToPdf417' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroPdfConvertToPdf417=true;
# Setting one property
Barcode.setProperty('macroPdfConvertToPdf417',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroPdfConvertToPdf417:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroPdfConvertToPdf417');
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdfConvertToPdf417' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmacroPdfExclusive'></a><div class='accordion property' id='pmacroPdfExclusive'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymacroPdfExclusive"><strong>macroPdfExclusive</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymacroPdfExclusive" class="accordion-body collapse in">  <div class="accordion-inner">If true, the scanner driver will not complete read requests while in the middle of a macroPdf sequence. Once a macroPdf sequence has been started it must be completed or cancelled before the scan driver will complete other read requests.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.macroPdfExclusive=true
# Setting one property
Barcode.setProperty :macroPdfExclusive, true 
# Setting multiple properties using HASH
Barcode.setProperties { :macroPdfExclusive => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('macroPdfExclusive')
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdfExclusive' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.macroPdfExclusive=true;
# Setting one property
Barcode.setProperty('macroPdfExclusive',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :macroPdfExclusive:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('macroPdfExclusive');
# Getting multiple properties
myvar = Barcode.getProperties(['macroPdfExclusive' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmatrix2of5'></a><div class='accordion property' id='pmatrix2of5'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymatrix2of5"><strong>matrix2of5</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymatrix2of5" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Matrix 2of5 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.matrix2of5=true
# Setting one property
Barcode.setProperty :matrix2of5, true 
# Setting multiple properties using HASH
Barcode.setProperties { :matrix2of5 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('matrix2of5')
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.matrix2of5=true;
# Setting one property
Barcode.setProperty('matrix2of5',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :matrix2of5:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('matrix2of5');
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmatrix2of5maxLength'></a><div class='accordion property' id='pmatrix2of5maxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymatrix2of5maxLength"><strong>matrix2of5maxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymatrix2of5maxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a Matrix 2of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.matrix2of5maxLength=0
# Setting one property
Barcode.setProperty :matrix2of5maxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :matrix2of5maxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('matrix2of5maxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5maxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.matrix2of5maxLength=0;
# Setting one property
Barcode.setProperty('matrix2of5maxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :matrix2of5maxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('matrix2of5maxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5maxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmatrix2of5minLength'></a><div class='accordion property' id='pmatrix2of5minLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymatrix2of5minLength"><strong>matrix2of5minLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymatrix2of5minLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a Matrix 2of5 barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.matrix2of5minLength=0
# Setting one property
Barcode.setProperty :matrix2of5minLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :matrix2of5minLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('matrix2of5minLength')
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5minLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.matrix2of5minLength=0;
# Setting one property
Barcode.setProperty('matrix2of5minLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :matrix2of5minLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('matrix2of5minLength');
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5minLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmatrix2of5reportCheckDigit'></a><div class='accordion property' id='pmatrix2of5reportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymatrix2of5reportCheckDigit"><strong>matrix2of5reportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymatrix2of5reportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned Matrix 2of5 barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.matrix2of5reportCheckDigit=true
# Setting one property
Barcode.setProperty :matrix2of5reportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :matrix2of5reportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('matrix2of5reportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5reportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.matrix2of5reportCheckDigit=true;
# Setting one property
Barcode.setProperty('matrix2of5reportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :matrix2of5reportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('matrix2of5reportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5reportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmatrix2of5verifyCheckDigit'></a><div class='accordion property' id='pmatrix2of5verifyCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymatrix2of5verifyCheckDigit"><strong>matrix2of5verifyCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymatrix2of5verifyCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">Enables verification of the Matrix 2of5 symbology check digit.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.matrix2of5verifyCheckDigit=true
# Setting one property
Barcode.setProperty :matrix2of5verifyCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :matrix2of5verifyCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('matrix2of5verifyCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5verifyCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.matrix2of5verifyCheckDigit=true;
# Setting one property
Barcode.setProperty('matrix2of5verifyCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :matrix2of5verifyCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('matrix2of5verifyCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['matrix2of5verifyCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmaxiCode'></a><div class='accordion property' id='pmaxiCode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymaxiCode"><strong>maxiCode</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymaxiCode" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Maxicode barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.maxiCode=true
# Setting one property
Barcode.setProperty :maxiCode, true 
# Setting multiple properties using HASH
Barcode.setProperties { :maxiCode => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('maxiCode')
# Getting multiple properties
myvar = Barcode.getProperties(['maxiCode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.maxiCode=true;
# Setting one property
Barcode.setProperty('maxiCode',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :maxiCode:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('maxiCode');
# Getting multiple properties
myvar = Barcode.getProperties(['maxiCode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmicroPdf'></a><div class='accordion property' id='pmicroPdf'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymicroPdf"><strong>microPdf</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymicroPdf" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Micro PDF barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.microPdf=true
# Setting one property
Barcode.setProperty :microPdf, true 
# Setting multiple properties using HASH
Barcode.setProperties { :microPdf => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('microPdf')
# Getting multiple properties
myvar = Barcode.getProperties(['microPdf' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.microPdf=true;
# Setting one property
Barcode.setProperty('microPdf',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :microPdf:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('microPdf');
# Getting multiple properties
myvar = Barcode.getProperties(['microPdf' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmicroQr'></a><div class='accordion property' id='pmicroQr'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymicroQr"><strong>microQr</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymicroQr" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Micro QR barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.microQr=true
# Setting one property
Barcode.setProperty :microQr, true 
# Setting multiple properties using HASH
Barcode.setProperties { :microQr => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('microQr')
# Getting multiple properties
myvar = Barcode.getProperties(['microQr' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.microQr=true;
# Setting one property
Barcode.setProperty('microQr',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :microQr:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('microQr');
# Getting multiple properties
myvar = Barcode.getProperties(['microQr' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmsi'></a><div class='accordion property' id='pmsi'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymsi"><strong>msi</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymsi" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for MSI barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.msi=true
# Setting one property
Barcode.setProperty :msi, true 
# Setting multiple properties using HASH
Barcode.setProperties { :msi => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('msi')
# Getting multiple properties
myvar = Barcode.getProperties(['msi' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.msi=true;
# Setting one property
Barcode.setProperty('msi',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :msi:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('msi');
# Getting multiple properties
myvar = Barcode.getProperties(['msi' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmsiCheckDigitScheme'></a><div class='accordion property' id='pmsiCheckDigitScheme'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymsiCheckDigitScheme"><strong>msiCheckDigitScheme</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymsiCheckDigitScheme" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the check digit scheme used to verify MSI barcodes
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>mod11</dt><dd>The first check digit is MOD 11, the second is MOD 10.</dt><dt>mod10</dt><dd>Both check digits are MOD 10.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.msiCheckDigitScheme='some string'
# Setting one property
Barcode.setProperty :msiCheckDigitScheme, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :msiCheckDigitScheme => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('msiCheckDigitScheme')
# Getting multiple properties
myvar = Barcode.getProperties(['msiCheckDigitScheme' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.msiCheckDigitScheme='some string';
# Setting one property
Barcode.setProperty('msiCheckDigitScheme','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :msiCheckDigitScheme:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('msiCheckDigitScheme');
# Getting multiple properties
myvar = Barcode.getProperties(['msiCheckDigitScheme' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmsiCheckDigits'></a><div class='accordion property' id='pmsiCheckDigits'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymsiCheckDigits"><strong>msiCheckDigits</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymsiCheckDigits" class="accordion-body collapse in">  <div class="accordion-inner">Sets the number of MSI check digits to use
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>one</dt><dd>Use one check digit for MSI barcodes.</dt><dt>two</dt><dd>Use two check digits for MSI barcodes.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.msiCheckDigits='some string'
# Setting one property
Barcode.setProperty :msiCheckDigits, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :msiCheckDigits => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('msiCheckDigits')
# Getting multiple properties
myvar = Barcode.getProperties(['msiCheckDigits' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.msiCheckDigits='some string';
# Setting one property
Barcode.setProperty('msiCheckDigits','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :msiCheckDigits:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('msiCheckDigits');
# Getting multiple properties
myvar = Barcode.getProperties(['msiCheckDigits' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmsiMaxLength'></a><div class='accordion property' id='pmsiMaxLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymsiMaxLength"><strong>msiMaxLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymsiMaxLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the maximum number of allowable characters in a MSI barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.msiMaxLength=0
# Setting one property
Barcode.setProperty :msiMaxLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :msiMaxLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('msiMaxLength')
# Getting multiple properties
myvar = Barcode.getProperties(['msiMaxLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.msiMaxLength=0;
# Setting one property
Barcode.setProperty('msiMaxLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :msiMaxLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('msiMaxLength');
# Getting multiple properties
myvar = Barcode.getProperties(['msiMaxLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmsiMinLength'></a><div class='accordion property' id='pmsiMinLength'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymsiMinLength"><strong>msiMinLength</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymsiMinLength" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the minimum number of allowable characters in a MSI barcode.  If your application only expects barcode lengths in a certain range, reducing the allowed range can improve scanning performance.  Allowed values are 0 to 55
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.msiMinLength=0
# Setting one property
Barcode.setProperty :msiMinLength, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :msiMinLength => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('msiMinLength')
# Getting multiple properties
myvar = Barcode.getProperties(['msiMinLength' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.msiMinLength=0;
# Setting one property
Barcode.setProperty('msiMinLength',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :msiMinLength:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('msiMinLength');
# Getting multiple properties
myvar = Barcode.getProperties(['msiMinLength' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmsiRedundancy'></a><div class='accordion property' id='pmsiRedundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymsiRedundancy"><strong>msiRedundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymsiRedundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the MSI Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.msiRedundancy=true
# Setting one property
Barcode.setProperty :msiRedundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :msiRedundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('msiRedundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['msiRedundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.msiRedundancy=true;
# Setting one property
Barcode.setProperty('msiRedundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :msiRedundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('msiRedundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['msiRedundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmsiReportCheckDigit'></a><div class='accordion property' id='pmsiReportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymsiReportCheckDigit"><strong>msiReportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymsiReportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned MSI barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.msiReportCheckDigit=true
# Setting one property
Barcode.setProperty :msiReportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :msiReportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('msiReportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['msiReportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.msiReportCheckDigit=true;
# Setting one property
Barcode.setProperty('msiReportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :msiReportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('msiReportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['msiReportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppdf417'></a><div class='accordion property' id='ppdf417'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypdf417"><strong>pdf417</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypdf417" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for PDF 417 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.pdf417=true
# Setting one property
Barcode.setProperty :pdf417, true 
# Setting multiple properties using HASH
Barcode.setProperties { :pdf417 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('pdf417')
# Getting multiple properties
myvar = Barcode.getProperties(['pdf417' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.pdf417=true;
# Setting one property
Barcode.setProperty('pdf417',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :pdf417:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('pdf417');
# Getting multiple properties
myvar = Barcode.getProperties(['pdf417' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppicklistMode'></a><div class='accordion property' id='ppicklistMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypicklistMode"><strong>picklistMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypicklistMode" class="accordion-body collapse in">  <div class="accordion-inner">Allows the imager to decode only the barcode that is directly under the cross-hair / center of the reticle. This feature is most useful in applications where multiple barcodes may appear in the field of view during a decode session and only one of them is targeted for decode. When enabled picklistMode will override aimMode if no aiming is chosen and use aimMode:reticle. This mode will also interact with viewfinderMode, see the EMDK for C help file for more information. Enabling picklist mode may adversely affect overall decoding performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Imager / Camera Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>disabled</dt><dd>Disables picklist mode so any barcode within the field of view can be decoded.</dt><dt>hardwareReticle</dt><dd>Enables picklist mode so that only the barcode under the projected reticle can be decoded.  If the imager does not support a projected reticle then the behaviour is the same as softwareReticle.</dt><dt>softwareReticle</dt><dd>Enables picklist mode so that only the barcode in the center of the image is decoded.  This is most useful when used in conjunction with static and dynamic reticle viewfinder modes.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.picklistMode='some string'
# Setting one property
Barcode.setProperty :picklistMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :picklistMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('picklistMode')
# Getting multiple properties
myvar = Barcode.getProperties(['picklistMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.picklistMode='some string';
# Setting one property
Barcode.setProperty('picklistMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :picklistMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('picklistMode');
# Getting multiple properties
myvar = Barcode.getProperties(['picklistMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppoorQuality1dMode'></a><div class='accordion property' id='ppoorQuality1dMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypoorQuality1dMode"><strong>poorQuality1dMode</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypoorQuality1dMode" class="accordion-body collapse in">  <div class="accordion-inner">Allows poor quality 1D barcodes to be read when true but this will adversely affect the overall decoding performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Imager / Camera Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.poorQuality1dMode=true
# Setting one property
Barcode.setProperty :poorQuality1dMode, true 
# Setting multiple properties using HASH
Barcode.setProperties { :poorQuality1dMode => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('poorQuality1dMode')
# Getting multiple properties
myvar = Barcode.getProperties(['poorQuality1dMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.poorQuality1dMode=true;
# Setting one property
Barcode.setProperty('poorQuality1dMode',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :poorQuality1dMode:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('poorQuality1dMode');
# Getting multiple properties
myvar = Barcode.getProperties(['poorQuality1dMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pqrCode'></a><div class='accordion property' id='pqrCode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyqrCode"><strong>qrCode</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyqrCode" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for QR Code barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.qrCode=true
# Setting one property
Barcode.setProperty :qrCode, true 
# Setting multiple properties using HASH
Barcode.setProperties { :qrCode => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('qrCode')
# Getting multiple properties
myvar = Barcode.getProperties(['qrCode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.qrCode=true;
# Setting one property
Barcode.setProperty('qrCode',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :qrCode:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('qrCode');
# Getting multiple properties
myvar = Barcode.getProperties(['qrCode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prasterHeight'></a><div class='accordion property' id='prasterHeight'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrasterHeight"><strong>rasterHeight</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrasterHeight" class="accordion-body collapse in">  <div class="accordion-inner">Vertical rastering height to use, as a percentage, when rasterMode:openAlways is applied.  This value must be between 0 - 100.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Laser Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rasterHeight=0
# Setting one property
Barcode.setProperty :rasterHeight, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :rasterHeight => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('rasterHeight')
# Getting multiple properties
myvar = Barcode.getProperties(['rasterHeight' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rasterHeight=0;
# Setting one property
Barcode.setProperty('rasterHeight',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rasterHeight:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('rasterHeight');
# Getting multiple properties
myvar = Barcode.getProperties(['rasterHeight' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prasterMode'></a><div class='accordion property' id='prasterMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrasterMode"><strong>rasterMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrasterMode" class="accordion-body collapse in">  <div class="accordion-inner">Describes the type of vertical rastering to use. <p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>No vertical rastering</dt><dt>openAlways</dt><dd> Vertical rastering is always full open.  To adjust the rastering height use the rasterHeight property.</dt><dt>smart</dt><dd>Vertical rastering mode is 'Smart'.</dt><dt>cyclone</dt><dd>Vertical rastering mode is 'Cyclone'.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rasterMode='some string'
# Setting one property
Barcode.setProperty :rasterMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rasterMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rasterMode')
# Getting multiple properties
myvar = Barcode.getProperties(['rasterMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rasterMode='some string';
# Setting one property
Barcode.setProperty('rasterMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rasterMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rasterMode');
# Getting multiple properties
myvar = Barcode.getProperties(['rasterMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBatteryCapacity'></a><div class='accordion property' id='prsmBatteryCapacity'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBatteryCapacity"><strong>rsmBatteryCapacity</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBatteryCapacity" class="accordion-body collapse in">  <div class="accordion-inner">The remaining capacity of the battery, in the range 0 to 100.  'Unknown' will be returned if the capacity could not be determined, for example if the scanner had no battery.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmBatteryCapacity')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBatteryCapacity' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmBatteryCapacity');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBatteryCapacity' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBatteryId'></a><div class='accordion property' id='prsmBatteryId'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBatteryId"><strong>rsmBatteryId</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBatteryId" class="accordion-body collapse in">  <div class="accordion-inner">One of 'Simple', 'Double', 'Cabled' or 'Unknown'
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmBatteryId')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBatteryId' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmBatteryId');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBatteryId' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBatteryStatus'></a><div class='accordion property' id='prsmBatteryStatus'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBatteryStatus"><strong>rsmBatteryStatus</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBatteryStatus" class="accordion-body collapse in">  <div class="accordion-inner">Indicates the status of the remote scanner's battery, will be one of 'Unknown', 'Full', 'Medium', 'Empty', 'Charging-FullRate', 'Charging-HalfRate', 'Charging-Trickle' or 'Discharging'
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmBatteryStatus')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBatteryStatus' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmBatteryStatus');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBatteryStatus' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothAddress'></a><div class='accordion property' id='prsmBluetoothAddress'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothAddress"><strong>rsmBluetoothAddress</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothAddress" class="accordion-body collapse in">  <div class="accordion-inner">Bluetooth address as FF:FF:FF:FF:FF:FF where FF is a hex number.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmBluetoothAddress')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothAddress' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmBluetoothAddress');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothAddress' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothAuthentication'></a><div class='accordion property' id='prsmBluetoothAuthentication'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothAuthentication"><strong>rsmBluetoothAuthentication</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothAuthentication" class="accordion-body collapse in">  <div class="accordion-inner">True if authentication is required
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothAuthentication=true
# Setting one property
Barcode.setProperty :rsmBluetoothAuthentication, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothAuthentication => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothAuthentication')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothAuthentication' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothAuthentication=true;
# Setting one property
Barcode.setProperty('rsmBluetoothAuthentication',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothAuthentication:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothAuthentication');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothAuthentication' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothAutoReconnect'></a><div class='accordion property' id='prsmBluetoothAutoReconnect'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothAutoReconnect"><strong>rsmBluetoothAutoReconnect</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothAutoReconnect" class="accordion-body collapse in">  <div class="accordion-inner">{}
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>No scheme.</dt><dt>onPower</dt><dd>When powered on.</dt><dt>onOutOfRange</dt><dd>When device goes out of range.</dt><dt>onPowerOutOfRange</dt><dd>When powered on or when the device goes out of range.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothAutoReconnect='some string'
# Setting one property
Barcode.setProperty :rsmBluetoothAutoReconnect, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothAutoReconnect => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothAutoReconnect')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothAutoReconnect' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothAutoReconnect='some string';
# Setting one property
Barcode.setProperty('rsmBluetoothAutoReconnect','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothAutoReconnect:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothAutoReconnect');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothAutoReconnect' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothBeepOnReconnectAttempt'></a><div class='accordion property' id='prsmBluetoothBeepOnReconnectAttempt'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothBeepOnReconnectAttempt"><strong>rsmBluetoothBeepOnReconnectAttempt</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothBeepOnReconnectAttempt" class="accordion-body collapse in">  <div class="accordion-inner">When 'True' scanner will emit 5 beeps every 5 seconds whilst re-connection in progress
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothBeepOnReconnectAttempt='some string'
# Setting one property
Barcode.setProperty :rsmBluetoothBeepOnReconnectAttempt, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothBeepOnReconnectAttempt => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothBeepOnReconnectAttempt')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothBeepOnReconnectAttempt' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothBeepOnReconnectAttempt='some string';
# Setting one property
Barcode.setProperty('rsmBluetoothBeepOnReconnectAttempt','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothBeepOnReconnectAttempt:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothBeepOnReconnectAttempt');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothBeepOnReconnectAttempt' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothEncryption'></a><div class='accordion property' id='prsmBluetoothEncryption'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothEncryption"><strong>rsmBluetoothEncryption</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothEncryption" class="accordion-body collapse in">  <div class="accordion-inner">True if encryption is required.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothEncryption=true
# Setting one property
Barcode.setProperty :rsmBluetoothEncryption, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothEncryption => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothEncryption')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothEncryption' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothEncryption=true;
# Setting one property
Barcode.setProperty('rsmBluetoothEncryption',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothEncryption:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothEncryption');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothEncryption' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothFriendlyName'></a><div class='accordion property' id='prsmBluetoothFriendlyName'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothFriendlyName"><strong>rsmBluetoothFriendlyName</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothFriendlyName" class="accordion-body collapse in">  <div class="accordion-inner">Friendly Bluetooth name, e.g. 'MyBTScanner'
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothFriendlyName='some string'
# Setting one property
Barcode.setProperty :rsmBluetoothFriendlyName, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothFriendlyName => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothFriendlyName')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothFriendlyName' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothFriendlyName='some string';
# Setting one property
Barcode.setProperty('rsmBluetoothFriendlyName','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothFriendlyName:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothFriendlyName');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothFriendlyName' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothHidAutoReconnect'></a><div class='accordion property' id='prsmBluetoothHidAutoReconnect'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothHidAutoReconnect"><strong>rsmBluetoothHidAutoReconnect</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothHidAutoReconnect" class="accordion-body collapse in">  <div class="accordion-inner">'NeverReconnect', 'ReconnectOnData' or 'ReconnectImmediately'
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothHidAutoReconnect='some string'
# Setting one property
Barcode.setProperty :rsmBluetoothHidAutoReconnect, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothHidAutoReconnect => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothHidAutoReconnect')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothHidAutoReconnect' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothHidAutoReconnect='some string';
# Setting one property
Barcode.setProperty('rsmBluetoothHidAutoReconnect','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothHidAutoReconnect:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothHidAutoReconnect');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothHidAutoReconnect' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothInquiryMode'></a><div class='accordion property' id='prsmBluetoothInquiryMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothInquiryMode"><strong>rsmBluetoothInquiryMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothInquiryMode" class="accordion-body collapse in">  <div class="accordion-inner">'General' to use a general inquiry mode, else 'Limited'
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothInquiryMode='some string'
# Setting one property
Barcode.setProperty :rsmBluetoothInquiryMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothInquiryMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothInquiryMode')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothInquiryMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothInquiryMode='some string';
# Setting one property
Barcode.setProperty('rsmBluetoothInquiryMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothInquiryMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothInquiryMode');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothInquiryMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothPinCode'></a><div class='accordion property' id='prsmBluetoothPinCode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothPinCode"><strong>rsmBluetoothPinCode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothPinCode" class="accordion-body collapse in">  <div class="accordion-inner">Up to 5 character PIN code used for Bluetooth authentication
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothPinCode='some string'
# Setting one property
Barcode.setProperty :rsmBluetoothPinCode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothPinCode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothPinCode')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothPinCode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothPinCode='some string';
# Setting one property
Barcode.setProperty('rsmBluetoothPinCode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothPinCode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothPinCode');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothPinCode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothPinCodeType'></a><div class='accordion property' id='prsmBluetoothPinCodeType'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothPinCodeType"><strong>rsmBluetoothPinCodeType</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothPinCodeType" class="accordion-body collapse in">  <div class="accordion-inner">'UseStored' will use the PIN code stored in the memory of the ring scanner, by default '12345'.  'PromptUser' indicates that the ring scanner should be used to scan 5 alpha numeric barcodes to define the PIN, eg. "1", "2", "3", "4", "5" (for PIN 12345). This parameter is not saved permanently on the ring scanner.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothPinCodeType='some string'
# Setting one property
Barcode.setProperty :rsmBluetoothPinCodeType, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothPinCodeType => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothPinCodeType')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothPinCodeType' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothPinCodeType='some string';
# Setting one property
Barcode.setProperty('rsmBluetoothPinCodeType','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothPinCodeType:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothPinCodeType');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothPinCodeType' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmBluetoothReconnectionAttempts'></a><div class='accordion property' id='prsmBluetoothReconnectionAttempts'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmBluetoothReconnectionAttempts"><strong>rsmBluetoothReconnectionAttempts</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmBluetoothReconnectionAttempts" class="accordion-body collapse in">  <div class="accordion-inner">How long the scanner tries to re-establish connection if it goes out of range, in seconds.  This value must be a multiple of 5 and in the range 30 to 60 seconds.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmBluetoothReconnectionAttempts=0
# Setting one property
Barcode.setProperty :rsmBluetoothReconnectionAttempts, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmBluetoothReconnectionAttempts => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothReconnectionAttempts')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothReconnectionAttempts' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmBluetoothReconnectionAttempts=0;
# Setting one property
Barcode.setProperty('rsmBluetoothReconnectionAttempts',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmBluetoothReconnectionAttempts:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('rsmBluetoothReconnectionAttempts');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmBluetoothReconnectionAttempts' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmDateOfManufacture'></a><div class='accordion property' id='prsmDateOfManufacture'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmDateOfManufacture"><strong>rsmDateOfManufacture</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmDateOfManufacture" class="accordion-body collapse in">  <div class="accordion-inner">Ring scanner date of manufacture as DDMMYY
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmDateOfManufacture')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDateOfManufacture' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmDateOfManufacture');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDateOfManufacture' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmDateOfService'></a><div class='accordion property' id='prsmDateOfService'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmDateOfService"><strong>rsmDateOfService</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmDateOfService" class="accordion-body collapse in">  <div class="accordion-inner">Ring scanner date of service as DDMMYY
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmDateOfService')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDateOfService' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmDateOfService');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDateOfService' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmDecodeFeedback'></a><div class='accordion property' id='prsmDecodeFeedback'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmDecodeFeedback"><strong>rsmDecodeFeedback</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmDecodeFeedback" class="accordion-body collapse in">  <div class="accordion-inner">If true, the remote scanner beeps and illuminates its green LED on a successful decode.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmDecodeFeedback=true
# Setting one property
Barcode.setProperty :rsmDecodeFeedback, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmDecodeFeedback => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmDecodeFeedback')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDecodeFeedback' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmDecodeFeedback=true;
# Setting one property
Barcode.setProperty('rsmDecodeFeedback',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmDecodeFeedback:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmDecodeFeedback');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDecodeFeedback' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmDeviceClass'></a><div class='accordion property' id='prsmDeviceClass'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmDeviceClass"><strong>rsmDeviceClass</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmDeviceClass" class="accordion-body collapse in">  <div class="accordion-inner">The device class of the ring scanner
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmDeviceClass')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDeviceClass' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmDeviceClass');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmDeviceClass' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmFirmwareVersion'></a><div class='accordion property' id='prsmFirmwareVersion'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmFirmwareVersion"><strong>rsmFirmwareVersion</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmFirmwareVersion" class="accordion-body collapse in">  <div class="accordion-inner">Scanner's operating system version.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmFirmwareVersion')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmFirmwareVersion' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmFirmwareVersion');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmFirmwareVersion' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmForceSavePairingBarcode'></a><div class='accordion property' id='prsmForceSavePairingBarcode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmForceSavePairingBarcode"><strong>rsmForceSavePairingBarcode</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmForceSavePairingBarcode" class="accordion-body collapse in">  <div class="accordion-inner">Force saving the barcode assigned to the device to which the scanner has been paired
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmForceSavePairingBarcode=true
# Setting one property
Barcode.setProperty :rsmForceSavePairingBarcode, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmForceSavePairingBarcode => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmForceSavePairingBarcode')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmForceSavePairingBarcode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmForceSavePairingBarcode=true;
# Setting one property
Barcode.setProperty('rsmForceSavePairingBarcode',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmForceSavePairingBarcode:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmForceSavePairingBarcode');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmForceSavePairingBarcode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmGoodScansDelay'></a><div class='accordion property' id='prsmGoodScansDelay'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmGoodScansDelay"><strong>rsmGoodScansDelay</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmGoodScansDelay" class="accordion-body collapse in">  <div class="accordion-inner">Delay between good scans in proximity continuous mode, measured in milliseconds. Range 0 to 15000.  This value must be a multiple of 100.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmGoodScansDelay=0
# Setting one property
Barcode.setProperty :rsmGoodScansDelay, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmGoodScansDelay => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('rsmGoodScansDelay')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmGoodScansDelay' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmGoodScansDelay=0;
# Setting one property
Barcode.setProperty('rsmGoodScansDelay',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmGoodScansDelay:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('rsmGoodScansDelay');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmGoodScansDelay' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmIgnoreCode128Usps'></a><div class='accordion property' id='prsmIgnoreCode128Usps'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmIgnoreCode128Usps"><strong>rsmIgnoreCode128Usps</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmIgnoreCode128Usps" class="accordion-body collapse in">  <div class="accordion-inner">Feature for ignoring Code 128 barcodes beginning with 420 and 421
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmIgnoreCode128Usps=true
# Setting one property
Barcode.setProperty :rsmIgnoreCode128Usps, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmIgnoreCode128Usps => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmIgnoreCode128Usps')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmIgnoreCode128Usps' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmIgnoreCode128Usps=true;
# Setting one property
Barcode.setProperty('rsmIgnoreCode128Usps',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmIgnoreCode128Usps:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmIgnoreCode128Usps');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmIgnoreCode128Usps' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmLowBatteryIndication'></a><div class='accordion property' id='prsmLowBatteryIndication'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmLowBatteryIndication"><strong>rsmLowBatteryIndication</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmLowBatteryIndication" class="accordion-body collapse in">  <div class="accordion-inner">Whether or not the ring scanner should give a low battery indication
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmLowBatteryIndication=true
# Setting one property
Barcode.setProperty :rsmLowBatteryIndication, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmLowBatteryIndication => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmLowBatteryIndication')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmLowBatteryIndication' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmLowBatteryIndication=true;
# Setting one property
Barcode.setProperty('rsmLowBatteryIndication',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmLowBatteryIndication:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmLowBatteryIndication');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmLowBatteryIndication' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmLowBatteryIndicationCycle'></a><div class='accordion property' id='prsmLowBatteryIndicationCycle'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmLowBatteryIndicationCycle"><strong>rsmLowBatteryIndicationCycle</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmLowBatteryIndicationCycle" class="accordion-body collapse in">  <div class="accordion-inner">Low battery indication cycle time, in seconds.  Must be one of 15, 30, 60, 90 or 120
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmLowBatteryIndicationCycle=0
# Setting one property
Barcode.setProperty :rsmLowBatteryIndicationCycle, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmLowBatteryIndicationCycle => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('rsmLowBatteryIndicationCycle')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmLowBatteryIndicationCycle' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmLowBatteryIndicationCycle=0;
# Setting one property
Barcode.setProperty('rsmLowBatteryIndicationCycle',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmLowBatteryIndicationCycle:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('rsmLowBatteryIndicationCycle');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmLowBatteryIndicationCycle' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmMems'></a><div class='accordion property' id='prsmMems'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmMems"><strong>rsmMems</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmMems" class="accordion-body collapse in">  <div class="accordion-inner">If you press the trigger on an RSM scanner, proximity enabled will be turned off, even though it still reports its self as being turned on if you query the property. In order to use ProximityEnable you need to also have Mems enabled, this is the motion sensor and if you disable Mems the scanner will not function.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmMems=true
# Setting one property
Barcode.setProperty :rsmMems, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmMems => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmMems')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmMems' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmMems=true;
# Setting one property
Barcode.setProperty('rsmMems',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmMems:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmMems');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmMems' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmModelNumber'></a><div class='accordion property' id='prsmModelNumber'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmModelNumber"><strong>rsmModelNumber</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmModelNumber" class="accordion-body collapse in">  <div class="accordion-inner">The ring scanner model number.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmModelNumber')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmModelNumber' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmModelNumber');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmModelNumber' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmPagingBeepSequence'></a><div class='accordion property' id='prsmPagingBeepSequence'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmPagingBeepSequence"><strong>rsmPagingBeepSequence</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmPagingBeepSequence" class="accordion-body collapse in">  <div class="accordion-inner">Range 0 to 15 to specify the pattern for the paging beep sequence. 
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmPagingBeepSequence=0
# Setting one property
Barcode.setProperty :rsmPagingBeepSequence, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmPagingBeepSequence => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('rsmPagingBeepSequence')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmPagingBeepSequence' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmPagingBeepSequence=0;
# Setting one property
Barcode.setProperty('rsmPagingBeepSequence',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmPagingBeepSequence:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('rsmPagingBeepSequence');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmPagingBeepSequence' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmPagingEnable'></a><div class='accordion property' id='prsmPagingEnable'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmPagingEnable"><strong>rsmPagingEnable</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmPagingEnable" class="accordion-body collapse in">  <div class="accordion-inner">Specify whether paging the device is enabled
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmPagingEnable=true
# Setting one property
Barcode.setProperty :rsmPagingEnable, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmPagingEnable => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmPagingEnable')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmPagingEnable' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmPagingEnable=true;
# Setting one property
Barcode.setProperty('rsmPagingEnable',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmPagingEnable:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmPagingEnable');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmPagingEnable' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmProximityContinuous'></a><div class='accordion property' id='prsmProximityContinuous'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmProximityContinuous"><strong>rsmProximityContinuous</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmProximityContinuous" class="accordion-body collapse in">  <div class="accordion-inner">Proximity continuous mode
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmProximityContinuous=true
# Setting one property
Barcode.setProperty :rsmProximityContinuous, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmProximityContinuous => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmProximityContinuous')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmProximityContinuous' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmProximityContinuous=true;
# Setting one property
Barcode.setProperty('rsmProximityContinuous',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmProximityContinuous:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmProximityContinuous');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmProximityContinuous' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmProximityDistance'></a><div class='accordion property' id='prsmProximityDistance'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmProximityDistance"><strong>rsmProximityDistance</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmProximityDistance" class="accordion-body collapse in">  <div class="accordion-inner">Specify the distance for the proximity feature as 'Short', 'Medium' or 'Long' 
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmProximityDistance='some string'
# Setting one property
Barcode.setProperty :rsmProximityDistance, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmProximityDistance => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmProximityDistance')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmProximityDistance' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmProximityDistance='some string';
# Setting one property
Barcode.setProperty('rsmProximityDistance','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmProximityDistance:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmProximityDistance');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmProximityDistance' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmProximityEnable'></a><div class='accordion property' id='prsmProximityEnable'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmProximityEnable"><strong>rsmProximityEnable</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmProximityEnable" class="accordion-body collapse in">  <div class="accordion-inner">If you press the trigger on an RSM scanner, proximity enabled will be turned off, even though it still reports its self as being turned on if you query the property. In order to use ProximityEnable you need to also have Mems enabled, this is the motion sensor and if you disable Mems the scanner will not function.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmProximityEnable=true
# Setting one property
Barcode.setProperty :rsmProximityEnable, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmProximityEnable => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmProximityEnable')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmProximityEnable' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmProximityEnable=true;
# Setting one property
Barcode.setProperty('rsmProximityEnable',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmProximityEnable:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmProximityEnable');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmProximityEnable' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmScanLineWidth'></a><div class='accordion property' id='prsmScanLineWidth'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmScanLineWidth"><strong>rsmScanLineWidth</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmScanLineWidth" class="accordion-body collapse in">  <div class="accordion-inner">The laser scan line width, 'Wide' or 'Narrow'.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmScanLineWidth='some string'
# Setting one property
Barcode.setProperty :rsmScanLineWidth, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmScanLineWidth => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('rsmScanLineWidth')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmScanLineWidth' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmScanLineWidth='some string';
# Setting one property
Barcode.setProperty('rsmScanLineWidth','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmScanLineWidth:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('rsmScanLineWidth');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmScanLineWidth' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmScanTriggerWakeup'></a><div class='accordion property' id='prsmScanTriggerWakeup'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmScanTriggerWakeup"><strong>rsmScanTriggerWakeup</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmScanTriggerWakeup" class="accordion-body collapse in">  <div class="accordion-inner">Scanner trigger will wakeup the device from a low power state
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.rsmScanTriggerWakeup=true
# Setting one property
Barcode.setProperty :rsmScanTriggerWakeup, true 
# Setting multiple properties using HASH
Barcode.setProperties { :rsmScanTriggerWakeup => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('rsmScanTriggerWakeup')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmScanTriggerWakeup' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.rsmScanTriggerWakeup=true;
# Setting one property
Barcode.setProperty('rsmScanTriggerWakeup',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :rsmScanTriggerWakeup:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('rsmScanTriggerWakeup');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmScanTriggerWakeup' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='prsmSerialNumber'></a><div class='accordion property' id='prsmSerialNumber'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyrsmSerialNumber"><strong>rsmSerialNumber</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyrsmSerialNumber" class="accordion-body collapse in">  <div class="accordion-inner">The ring scanner serial number
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Motorola Solutions' Bluetooth barcode scanners, model RS507</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('rsmSerialNumber')
# Getting multiple properties
myvar = Barcode.getProperties(['rsmSerialNumber' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('rsmSerialNumber');
# Getting multiple properties
myvar = Barcode.getProperties(['rsmSerialNumber' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='psameSymbolTimeout'></a><div class='accordion property' id='psameSymbolTimeout'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertysameSymbolTimeout"><strong>sameSymbolTimeout</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertysameSymbolTimeout" class="accordion-body collapse in">  <div class="accordion-inner">When the aimType:continuousRead property is applied this value defines the interval between which the same barcode can be decoded twice. The value is specified in milliseconds, use 0 to indicate no interval between successive reads. Use this value to prevent accidental duplicate scans.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.sameSymbolTimeout=0
# Setting one property
Barcode.setProperty :sameSymbolTimeout, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :sameSymbolTimeout => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('sameSymbolTimeout')
# Getting multiple properties
myvar = Barcode.getProperties(['sameSymbolTimeout' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.sameSymbolTimeout=0;
# Setting one property
Barcode.setProperty('sameSymbolTimeout',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :sameSymbolTimeout:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('sameSymbolTimeout');
# Getting multiple properties
myvar = Barcode.getProperties(['sameSymbolTimeout' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pscanTimeout'></a><div class='accordion property' id='pscanTimeout'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyscanTimeout"><strong>scanTimeout</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyscanTimeout" class="accordion-body collapse in">  <div class="accordion-inner">Maximum time in milliseconds that laser scanners will emit a beam or imager scanners will enable the imager. A value of 0 indicates an infinite timeout. This parameter is compatibile with aimType:trigger, aimType:timedHold, aimType:timedRelease and aimType:pressAndRelease. Note that for regulatory reasons scanTimeout is not configurable on all laser/imager scanners.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.scanTimeout=0
# Setting one property
Barcode.setProperty :scanTimeout, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :scanTimeout => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('scanTimeout')
# Getting multiple properties
myvar = Barcode.getProperties(['scanTimeout' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.scanTimeout=0;
# Setting one property
Barcode.setProperty('scanTimeout',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :scanTimeout:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('scanTimeout');
# Getting multiple properties
myvar = Barcode.getProperties(['scanTimeout' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pscannerType'></a><div class='accordion property' id='pscannerType'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyscannerType"><strong>scannerType</strong> : <span class='text-info'>STRING</span> <span class='label'>Read Only</span> <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyscannerType" class="accordion-body collapse in">  <div class="accordion-inner">The type of scanner in use, will be one of 'Imager' or 'Laser'.  Imager scanners rely on capturing and processing an image of the barcode, either via dedicated scanning hardware or the device camera, they are capable of decoding 1D or 2D barcodes.  Laser scanners are only capable of decoding 1D barcodes and rely on a sweeping laser.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: All Scanners</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby


# Getting one property
myvar = Barcode.getProperty('scannerType')
# Getting multiple properties
myvar = Barcode.getProperties(['scannerType' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript


# Getting one property
myvar = Barcode.getProperty('scannerType');
# Getting multiple properties
myvar = Barcode.getProperties(['scannerType' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='psignature'></a><div class='accordion property' id='psignature'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertysignature"><strong>signature</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertysignature" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Signature barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.  Signature barcodes return their data in Data URI format, it is recommended you adjust the dataBufferSize and barcodeDataFormat properties when scanning Signature barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.signature=true
# Setting one property
Barcode.setProperty :signature, true 
# Setting multiple properties using HASH
Barcode.setProperties { :signature => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('signature')
# Getting multiple properties
myvar = Barcode.getProperties(['signature' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.signature=true;
# Setting one property
Barcode.setProperty('signature',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :signature:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('signature');
# Getting multiple properties
myvar = Barcode.getProperties(['signature' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='psignatureImageHeight'></a><div class='accordion property' id='psignatureImageHeight'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertysignatureImageHeight"><strong>signatureImageHeight</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertysignatureImageHeight" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the output height of the captured signature barcode.  Signature barcodes return their data in Data URI format, it is recommended you adjust the dataBufferSize and barcodeDataFormat properties when scanning Signature barcodes.  Provide a number greater than or equal to 20.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.signatureImageHeight=0
# Setting one property
Barcode.setProperty :signatureImageHeight, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :signatureImageHeight => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('signatureImageHeight')
# Getting multiple properties
myvar = Barcode.getProperties(['signatureImageHeight' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.signatureImageHeight=0;
# Setting one property
Barcode.setProperty('signatureImageHeight',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :signatureImageHeight:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('signatureImageHeight');
# Getting multiple properties
myvar = Barcode.getProperties(['signatureImageHeight' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='psignatureImageQuality'></a><div class='accordion property' id='psignatureImageQuality'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertysignatureImageQuality"><strong>signatureImageQuality</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertysignatureImageQuality" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the output quality of the captured signature barcode.  Signature barcodes return their data in Data URI format, it is recommended you adjust the dataBufferSize and barcodeDataFormat properties when scanning Signature barcodes.  Provide a value between 1 and 100 inclusive
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.signatureImageQuality=0
# Setting one property
Barcode.setProperty :signatureImageQuality, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :signatureImageQuality => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('signatureImageQuality')
# Getting multiple properties
myvar = Barcode.getProperties(['signatureImageQuality' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.signatureImageQuality=0;
# Setting one property
Barcode.setProperty('signatureImageQuality',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :signatureImageQuality:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('signatureImageQuality');
# Getting multiple properties
myvar = Barcode.getProperties(['signatureImageQuality' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='psignatureImageWidth'></a><div class='accordion property' id='psignatureImageWidth'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertysignatureImageWidth"><strong>signatureImageWidth</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertysignatureImageWidth" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the output width of the captured signature barcode.  Signature barcodes return their data in Data URI format, it is recommended you adjust the dataBufferSize and barcodeDataFormat properties when scanning Signature barcodes.  Provide a number greater than or equal to 20.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.signatureImageWidth=0
# Setting one property
Barcode.setProperty :signatureImageWidth, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :signatureImageWidth => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('signatureImageWidth')
# Getting multiple properties
myvar = Barcode.getProperties(['signatureImageWidth' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.signatureImageWidth=0;
# Setting one property
Barcode.setProperty('signatureImageWidth',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :signatureImageWidth:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('signatureImageWidth');
# Getting multiple properties
myvar = Barcode.getProperties(['signatureImageWidth' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ptimedAimDuration'></a><div class='accordion property' id='ptimedAimDuration'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertytimedAimDuration"><strong>timedAimDuration</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertytimedAimDuration" class="accordion-body collapse in">  <div class="accordion-inner">Duration in milliseconds for aimType:timedHold and aimType:timedRelease
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.timedAimDuration=0
# Setting one property
Barcode.setProperty :timedAimDuration, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :timedAimDuration => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('timedAimDuration')
# Getting multiple properties
myvar = Barcode.getProperties(['timedAimDuration' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.timedAimDuration=0;
# Setting one property
Barcode.setProperty('timedAimDuration',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :timedAimDuration:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('timedAimDuration');
# Getting multiple properties
myvar = Barcode.getProperties(['timedAimDuration' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ptlc39'></a><div class='accordion property' id='ptlc39'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertytlc39"><strong>tlc39</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertytlc39" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for TLC 39 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.tlc39=true
# Setting one property
Barcode.setProperty :tlc39, true 
# Setting multiple properties using HASH
Barcode.setProperties { :tlc39 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('tlc39')
# Getting multiple properties
myvar = Barcode.getProperties(['tlc39' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.tlc39=true;
# Setting one property
Barcode.setProperty('tlc39',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :tlc39:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('tlc39');
# Getting multiple properties
myvar = Barcode.getProperties(['tlc39' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ptrioptic39'></a><div class='accordion property' id='ptrioptic39'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertytrioptic39"><strong>trioptic39</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertytrioptic39" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Trioptic 39 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.trioptic39=true
# Setting one property
Barcode.setProperty :trioptic39, true 
# Setting multiple properties using HASH
Barcode.setProperties { :trioptic39 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('trioptic39')
# Getting multiple properties
myvar = Barcode.getProperties(['trioptic39' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.trioptic39=true;
# Setting one property
Barcode.setProperty('trioptic39',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :trioptic39:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('trioptic39');
# Getting multiple properties
myvar = Barcode.getProperties(['trioptic39' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ptrioptic39Redundancy'></a><div class='accordion property' id='ptrioptic39Redundancy'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertytrioptic39Redundancy"><strong>trioptic39Redundancy</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertytrioptic39Redundancy" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Trioptic 39 Redundancy property, if set the barcode must be decoded twice before being accepted.  This will slow scanning but improve reliability.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.trioptic39Redundancy=true
# Setting one property
Barcode.setProperty :trioptic39Redundancy, true 
# Setting multiple properties using HASH
Barcode.setProperties { :trioptic39Redundancy => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('trioptic39Redundancy')
# Getting multiple properties
myvar = Barcode.getProperties(['trioptic39Redundancy' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.trioptic39Redundancy=true;
# Setting one property
Barcode.setProperty('trioptic39Redundancy',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :trioptic39Redundancy:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('trioptic39Redundancy');
# Getting multiple properties
myvar = Barcode.getProperties(['trioptic39Redundancy' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pukPostal'></a><div class='accordion property' id='pukPostal'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyukPostal"><strong>ukPostal</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyukPostal" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for UK Postal barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.ukPostal=true
# Setting one property
Barcode.setProperty :ukPostal, true 
# Setting multiple properties using HASH
Barcode.setProperties { :ukPostal => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('ukPostal')
# Getting multiple properties
myvar = Barcode.getProperties(['ukPostal' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.ukPostal=true;
# Setting one property
Barcode.setProperty('ukPostal',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :ukPostal:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('ukPostal');
# Getting multiple properties
myvar = Barcode.getProperties(['ukPostal' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pukPostalReportCheckDigit'></a><div class='accordion property' id='pukPostalReportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyukPostalReportCheckDigit"><strong>ukPostalReportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyukPostalReportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned UK Postal barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.ukPostalReportCheckDigit=true
# Setting one property
Barcode.setProperty :ukPostalReportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :ukPostalReportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('ukPostalReportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['ukPostalReportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.ukPostalReportCheckDigit=true;
# Setting one property
Barcode.setProperty('ukPostalReportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :ukPostalReportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('ukPostalReportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['ukPostalReportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanBookland'></a><div class='accordion property' id='pupcEanBookland'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanBookland"><strong>upcEanBookland</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanBookland" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables decoding of UPC EAN Bookland barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanBookland=true
# Setting one property
Barcode.setProperty :upcEanBookland, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanBookland => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcEanBookland')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanBookland' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanBookland=true;
# Setting one property
Barcode.setProperty('upcEanBookland',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanBookland:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcEanBookland');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanBookland' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanBooklandFormat'></a><div class='accordion property' id='pupcEanBooklandFormat'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanBooklandFormat"><strong>upcEanBooklandFormat</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanBooklandFormat" class="accordion-body collapse in">  <div class="accordion-inner">Specifies the bookland format to use when decoding UPC EAN Bookland barcodes
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>isbn10</dt><dd>Causes 978 bookland barcodes to be reported in 10 digit mode.</dt><dt>isbn13</dt><dd>Causes 978/979 bookland barcodes to be transmitted as EAN13 as per 2007 ISBN-13 protocol.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanBooklandFormat='some string'
# Setting one property
Barcode.setProperty :upcEanBooklandFormat, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanBooklandFormat => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('upcEanBooklandFormat')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanBooklandFormat' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanBooklandFormat='some string';
# Setting one property
Barcode.setProperty('upcEanBooklandFormat','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanBooklandFormat:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('upcEanBooklandFormat');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanBooklandFormat' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanConvertGs1dataBarToUpcEan'></a><div class='accordion property' id='pupcEanConvertGs1dataBarToUpcEan'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanConvertGs1dataBarToUpcEan"><strong>upcEanConvertGs1dataBarToUpcEan</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.1.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanConvertGs1dataBarToUpcEan" class="accordion-body collapse in">  <div class="accordion-inner">If true, RSS barcodes will be converted to UPC/EAN format. For this setting to work UPC/EAN symbologies must be enabled.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanConvertGs1dataBarToUpcEan=true
# Setting one property
Barcode.setProperty :upcEanConvertGs1dataBarToUpcEan, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanConvertGs1dataBarToUpcEan => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcEanConvertGs1dataBarToUpcEan')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanConvertGs1dataBarToUpcEan' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanConvertGs1dataBarToUpcEan=true;
# Setting one property
Barcode.setProperty('upcEanConvertGs1dataBarToUpcEan',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanConvertGs1dataBarToUpcEan:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcEanConvertGs1dataBarToUpcEan');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanConvertGs1dataBarToUpcEan' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanCoupon'></a><div class='accordion property' id='pupcEanCoupon'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanCoupon"><strong>upcEanCoupon</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanCoupon" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables decoding of UPC EAN Coupon barcodes
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanCoupon=true
# Setting one property
Barcode.setProperty :upcEanCoupon, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanCoupon => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcEanCoupon')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanCoupon' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanCoupon=true;
# Setting one property
Barcode.setProperty('upcEanCoupon',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanCoupon:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcEanCoupon');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanCoupon' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanLinearDecode'></a><div class='accordion property' id='pupcEanLinearDecode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanLinearDecode"><strong>upcEanLinearDecode</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanLinearDecode" class="accordion-body collapse in">  <div class="accordion-inner">Sets the linear decode property.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanLinearDecode=true
# Setting one property
Barcode.setProperty :upcEanLinearDecode, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanLinearDecode => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcEanLinearDecode')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanLinearDecode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanLinearDecode=true;
# Setting one property
Barcode.setProperty('upcEanLinearDecode',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanLinearDecode:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcEanLinearDecode');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanLinearDecode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanRandomWeightCheckDigit'></a><div class='accordion property' id='pupcEanRandomWeightCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanRandomWeightCheckDigit"><strong>upcEanRandomWeightCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanRandomWeightCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true, enables random weight check digit verification.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanRandomWeightCheckDigit=true
# Setting one property
Barcode.setProperty :upcEanRandomWeightCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanRandomWeightCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcEanRandomWeightCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanRandomWeightCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanRandomWeightCheckDigit=true;
# Setting one property
Barcode.setProperty('upcEanRandomWeightCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanRandomWeightCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcEanRandomWeightCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanRandomWeightCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanRetryCount'></a><div class='accordion property' id='pupcEanRetryCount'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanRetryCount"><strong>upcEanRetryCount</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanRetryCount" class="accordion-body collapse in">  <div class="accordion-inner">Sets the retry count for auto-discriminating for supplementals.  The value must be between 2 - 20 inclusive.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanRetryCount=0
# Setting one property
Barcode.setProperty :upcEanRetryCount, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanRetryCount => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('upcEanRetryCount')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanRetryCount' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanRetryCount=0;
# Setting one property
Barcode.setProperty('upcEanRetryCount',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanRetryCount:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('upcEanRetryCount');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanRetryCount' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanSecurityLevel'></a><div class='accordion property' id='pupcEanSecurityLevel'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanSecurityLevel"><strong>upcEanSecurityLevel</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanSecurityLevel" class="accordion-body collapse in">  <div class="accordion-inner">Sets the Security level for decoding UPC EAN barcodes and accepts a value between 0 and 3 inclusive.  0: This setting allows the scanner to operate in its most aggressive state, while providing sufficient security in decoding most 'in-spec' barcodes. 1: This setting eliminates most mis-decodes. 2: Select this option if security level 1 fails to eliminate mis-decodes. 3: Select this option if security level 1 and 2 fail to eliminate mis-decodes. Be advised that selecting level 3 is an extreme measure against mis-decoding and will significantly impair the decoding ability of the scanner.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanSecurityLevel='some string'
# Setting one property
Barcode.setProperty :upcEanSecurityLevel, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanSecurityLevel => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('upcEanSecurityLevel')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSecurityLevel' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanSecurityLevel='some string';
# Setting one property
Barcode.setProperty('upcEanSecurityLevel','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanSecurityLevel:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('upcEanSecurityLevel');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSecurityLevel' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanSupplemental2'></a><div class='accordion property' id='pupcEanSupplemental2'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanSupplemental2"><strong>upcEanSupplemental2</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanSupplemental2" class="accordion-body collapse in">  <div class="accordion-inner">When true, enables the supplemental barcode decoding. Note you must have upcEanSupplementalMode:always set for this parameter to take effect
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanSupplemental2=true
# Setting one property
Barcode.setProperty :upcEanSupplemental2, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanSupplemental2 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcEanSupplemental2')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSupplemental2' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanSupplemental2=true;
# Setting one property
Barcode.setProperty('upcEanSupplemental2',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanSupplemental2:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcEanSupplemental2');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSupplemental2' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanSupplemental5'></a><div class='accordion property' id='pupcEanSupplemental5'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanSupplemental5"><strong>upcEanSupplemental5</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanSupplemental5" class="accordion-body collapse in">  <div class="accordion-inner">When true, enables the supplemental barcode decoding. Note you must have upcEanSupplementalMode:always set for this parameter to take effect.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanSupplemental5=true
# Setting one property
Barcode.setProperty :upcEanSupplemental5, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanSupplemental5 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcEanSupplemental5')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSupplemental5' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanSupplemental5=true;
# Setting one property
Barcode.setProperty('upcEanSupplemental5',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanSupplemental5:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcEanSupplemental5');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSupplemental5' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcEanSupplementalMode'></a><div class='accordion property' id='pupcEanSupplementalMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcEanSupplementalMode"><strong>upcEanSupplementalMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcEanSupplementalMode" class="accordion-body collapse in">  <div class="accordion-inner">Describes the UPC EAN Supplemental mode.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>Supplementals are ignored.</dt><dt>auto</dt><dd>Auto-discriminates supplementals.</dt><dt>always</dt><dd>Will not decode upc/ean without supplementals</dt><dt>smart</dt><dd>The decoder will return the decoded value of the main block right away if it does not belong to any of the supplemental types.  If the barcode starts with one of the prefixes it will search the image more aggressively for a supplemental.  The scanner will try to scan the supplemental if it is present but if that fails, the main barcode will be returned.  </dt><dt>378or379</dt><dd>Auto-discriminates supplemental for upc/ean codes starting with 378 or 379.  Will disable reading of supplementals for any other upc/ean barcodes not starting with these values.  The supplemental will be scanned if present but if scanning fails then the main barcode will be returned.</dt><dt>978or979</dt><dd>Auto-discriminates supplemental for upc/ean codes starting with 978 or 979.  Will disable reading of supplementals for any other upc/ean barcodes not starting with these values.  The supplemental will be scanned if present but if scanning fails then the main barcode will be returned.</dt><dt>414or419or434or439</dt><dd>Auto-discriminates supplemental for upc/ean codes starting with 414 or 419 or 434 or 439.  Will disable reading of supplementals for any other upc/ean barcodes not starting with these values.  The supplemental will be scanned if present but if scanning fails then the main barcode will be returned.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcEanSupplementalMode='some string'
# Setting one property
Barcode.setProperty :upcEanSupplementalMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :upcEanSupplementalMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('upcEanSupplementalMode')
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSupplementalMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcEanSupplementalMode='some string';
# Setting one property
Barcode.setProperty('upcEanSupplementalMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcEanSupplementalMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('upcEanSupplementalMode');
# Getting multiple properties
myvar = Barcode.getProperties(['upcEanSupplementalMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupca'></a><div class='accordion property' id='pupca'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupca"><strong>upca</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupca" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for UPCA barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upca=true
# Setting one property
Barcode.setProperty :upca, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upca => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upca')
# Getting multiple properties
myvar = Barcode.getProperties(['upca' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upca=true;
# Setting one property
Barcode.setProperty('upca',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upca:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upca');
# Getting multiple properties
myvar = Barcode.getProperties(['upca' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcaPreamble'></a><div class='accordion property' id='pupcaPreamble'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcaPreamble"><strong>upcaPreamble</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcaPreamble" class="accordion-body collapse in">  <div class="accordion-inner">Controls the preamble applied to the UPCA barcode.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>Applies no preamble to the bar code.</dt><dt>systemChar</dt><dd>Applies system character preamble to the bar code.</dt><dt>countryAndSystemChars</dt><dd>Applies both system and country code preamble to the bar code</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcaPreamble='some string'
# Setting one property
Barcode.setProperty :upcaPreamble, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :upcaPreamble => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('upcaPreamble')
# Getting multiple properties
myvar = Barcode.getProperties(['upcaPreamble' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcaPreamble='some string';
# Setting one property
Barcode.setProperty('upcaPreamble','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcaPreamble:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('upcaPreamble');
# Getting multiple properties
myvar = Barcode.getProperties(['upcaPreamble' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupcaReportCheckDigit'></a><div class='accordion property' id='pupcaReportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupcaReportCheckDigit"><strong>upcaReportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupcaReportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned UPCA barcodes
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upcaReportCheckDigit=true
# Setting one property
Barcode.setProperty :upcaReportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upcaReportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upcaReportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['upcaReportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upcaReportCheckDigit=true;
# Setting one property
Barcode.setProperty('upcaReportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upcaReportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upcaReportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['upcaReportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce0'></a><div class='accordion property' id='pupce0'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce0"><strong>upce0</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce0" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for UPCE0 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce0=true
# Setting one property
Barcode.setProperty :upce0, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upce0 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upce0')
# Getting multiple properties
myvar = Barcode.getProperties(['upce0' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce0=true;
# Setting one property
Barcode.setProperty('upce0',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce0:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upce0');
# Getting multiple properties
myvar = Barcode.getProperties(['upce0' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce0convertToUpca'></a><div class='accordion property' id='pupce0convertToUpca'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce0convertToUpca"><strong>upce0convertToUpca</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce0convertToUpca" class="accordion-body collapse in">  <div class="accordion-inner">When true, scanned UPCE0 barcodes will be converted to UPCA and UPCA parameters used.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce0convertToUpca=true
# Setting one property
Barcode.setProperty :upce0convertToUpca, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upce0convertToUpca => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upce0convertToUpca')
# Getting multiple properties
myvar = Barcode.getProperties(['upce0convertToUpca' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce0convertToUpca=true;
# Setting one property
Barcode.setProperty('upce0convertToUpca',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce0convertToUpca:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upce0convertToUpca');
# Getting multiple properties
myvar = Barcode.getProperties(['upce0convertToUpca' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce0preamble'></a><div class='accordion property' id='pupce0preamble'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce0preamble"><strong>upce0preamble</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce0preamble" class="accordion-body collapse in">  <div class="accordion-inner">Controls the preamble applied to the UPCE0 barcode.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>Applies no preamble to the bar code.</dt><dt>systemChar</dt><dd>Applies system character preamble to the bar code.</dt><dt>countryAndSystemChars</dt><dd>Applies both system and country code preamble to the bar code</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce0preamble='some string'
# Setting one property
Barcode.setProperty :upce0preamble, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :upce0preamble => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('upce0preamble')
# Getting multiple properties
myvar = Barcode.getProperties(['upce0preamble' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce0preamble='some string';
# Setting one property
Barcode.setProperty('upce0preamble','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce0preamble:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('upce0preamble');
# Getting multiple properties
myvar = Barcode.getProperties(['upce0preamble' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce0reportCheckDigit'></a><div class='accordion property' id='pupce0reportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce0reportCheckDigit"><strong>upce0reportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce0reportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned UPCE0 barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce0reportCheckDigit=true
# Setting one property
Barcode.setProperty :upce0reportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upce0reportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upce0reportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['upce0reportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce0reportCheckDigit=true;
# Setting one property
Barcode.setProperty('upce0reportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce0reportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upce0reportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['upce0reportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce1'></a><div class='accordion property' id='pupce1'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce1"><strong>upce1</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce1" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for UPCE1 barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce1=true
# Setting one property
Barcode.setProperty :upce1, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upce1 => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upce1')
# Getting multiple properties
myvar = Barcode.getProperties(['upce1' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce1=true;
# Setting one property
Barcode.setProperty('upce1',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce1:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upce1');
# Getting multiple properties
myvar = Barcode.getProperties(['upce1' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce1convertToUpca'></a><div class='accordion property' id='pupce1convertToUpca'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce1convertToUpca"><strong>upce1convertToUpca</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce1convertToUpca" class="accordion-body collapse in">  <div class="accordion-inner">When true, scanned UPCE1 barcodes will be converted to UPCA and UPCA parameters used.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce1convertToUpca=true
# Setting one property
Barcode.setProperty :upce1convertToUpca, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upce1convertToUpca => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upce1convertToUpca')
# Getting multiple properties
myvar = Barcode.getProperties(['upce1convertToUpca' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce1convertToUpca=true;
# Setting one property
Barcode.setProperty('upce1convertToUpca',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce1convertToUpca:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upce1convertToUpca');
# Getting multiple properties
myvar = Barcode.getProperties(['upce1convertToUpca' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce1preamble'></a><div class='accordion property' id='pupce1preamble'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce1preamble"><strong>upce1preamble</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce1preamble" class="accordion-body collapse in">  <div class="accordion-inner">Controls the preamble applied to the UPCE1 barcode.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>none</dt><dd>Applies no preamble to the bar code.</dt><dt>systemChar</dt><dd>Applies system character preamble to the bar code.</dt><dt>countryAndSystemChars</dt><dd>Applies both system and country code preamble to the bar code</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce1preamble='some string'
# Setting one property
Barcode.setProperty :upce1preamble, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :upce1preamble => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('upce1preamble')
# Getting multiple properties
myvar = Barcode.getProperties(['upce1preamble' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce1preamble='some string';
# Setting one property
Barcode.setProperty('upce1preamble','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce1preamble:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('upce1preamble');
# Getting multiple properties
myvar = Barcode.getProperties(['upce1preamble' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pupce1reportCheckDigit'></a><div class='accordion property' id='pupce1reportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyupce1reportCheckDigit"><strong>upce1reportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyupce1reportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned UPCE1 barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.upce1reportCheckDigit=true
# Setting one property
Barcode.setProperty :upce1reportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :upce1reportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('upce1reportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['upce1reportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.upce1reportCheckDigit=true;
# Setting one property
Barcode.setProperty('upce1reportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :upce1reportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('upce1reportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['upce1reportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pus4state'></a><div class='accordion property' id='pus4state'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyus4state"><strong>us4state</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyus4state" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for US 4-State barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.us4state=true
# Setting one property
Barcode.setProperty :us4state, true 
# Setting multiple properties using HASH
Barcode.setProperties { :us4state => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('us4state')
# Getting multiple properties
myvar = Barcode.getProperties(['us4state' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.us4state=true;
# Setting one property
Barcode.setProperty('us4state',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :us4state:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('us4state');
# Getting multiple properties
myvar = Barcode.getProperties(['us4state' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pus4stateFics'></a><div class='accordion property' id='pus4stateFics'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyus4stateFics"><strong>us4stateFics</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyus4stateFics" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for US 4-State FICS barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.us4stateFics=true
# Setting one property
Barcode.setProperty :us4stateFics, true 
# Setting multiple properties using HASH
Barcode.setProperties { :us4stateFics => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('us4stateFics')
# Getting multiple properties
myvar = Barcode.getProperties(['us4stateFics' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.us4stateFics=true;
# Setting one property
Barcode.setProperty('us4stateFics',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :us4stateFics:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('us4stateFics');
# Getting multiple properties
myvar = Barcode.getProperties(['us4stateFics' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pusPlanet'></a><div class='accordion property' id='pusPlanet'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyusPlanet"><strong>usPlanet</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyusPlanet" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for US Planet barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.usPlanet=true
# Setting one property
Barcode.setProperty :usPlanet, true 
# Setting multiple properties using HASH
Barcode.setProperties { :usPlanet => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('usPlanet')
# Getting multiple properties
myvar = Barcode.getProperties(['usPlanet' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.usPlanet=true;
# Setting one property
Barcode.setProperty('usPlanet',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :usPlanet:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('usPlanet');
# Getting multiple properties
myvar = Barcode.getProperties(['usPlanet' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pusPlanetReportCheckDigit'></a><div class='accordion property' id='pusPlanetReportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyusPlanetReportCheckDigit"><strong>usPlanetReportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyusPlanetReportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned US Planet barcodes.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.usPlanetReportCheckDigit=true
# Setting one property
Barcode.setProperty :usPlanetReportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :usPlanetReportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('usPlanetReportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['usPlanetReportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.usPlanetReportCheckDigit=true;
# Setting one property
Barcode.setProperty('usPlanetReportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :usPlanetReportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('usPlanetReportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['usPlanetReportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pusPostNet'></a><div class='accordion property' id='pusPostNet'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyusPostNet"><strong>usPostNet</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyusPostNet" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for US Post Net barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.usPostNet=true
# Setting one property
Barcode.setProperty :usPostNet, true 
# Setting multiple properties using HASH
Barcode.setProperties { :usPostNet => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('usPostNet')
# Getting multiple properties
myvar = Barcode.getProperties(['usPostNet' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.usPostNet=true;
# Setting one property
Barcode.setProperty('usPostNet',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :usPostNet:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('usPostNet');
# Getting multiple properties
myvar = Barcode.getProperties(['usPostNet' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pusPostNetReportCheckDigit'></a><div class='accordion property' id='pusPostNetReportCheckDigit'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyusPostNetReportCheckDigit"><strong>usPostNetReportCheckDigit</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyusPostNetReportCheckDigit" class="accordion-body collapse in">  <div class="accordion-inner">When true the barcode check digit(s) will be reported for scanned US Post Net barcodes
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.usPostNetReportCheckDigit=true
# Setting one property
Barcode.setProperty :usPostNetReportCheckDigit, true 
# Setting multiple properties using HASH
Barcode.setProperties { :usPostNetReportCheckDigit => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('usPostNetReportCheckDigit')
# Getting multiple properties
myvar = Barcode.getProperties(['usPostNetReportCheckDigit' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.usPostNetReportCheckDigit=true;
# Setting one property
Barcode.setProperty('usPostNetReportCheckDigit',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :usPostNetReportCheckDigit:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('usPostNetReportCheckDigit');
# Getting multiple properties
myvar = Barcode.getProperties(['usPostNetReportCheckDigit' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pviewfinderFeedback'></a><div class='accordion property' id='pviewfinderFeedback'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyviewfinderFeedback"><strong>viewfinderFeedback</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyviewfinderFeedback" class="accordion-body collapse in">  <div class="accordion-inner">Configures the feedback given after a successful scan in milliseconds. This value is ignored if aimType is set to continuousRead and no feedback will be given.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>enabled</dt><dd>The last image that was successfully decoded is displayed.  The time for which the image is displayed can be configured by the viewfinderFeedbackTime parameter.</dt><dt>disabled</dt><dd>No feedback is given in the viewfinder after a successful decode.</dt><dt>reticle</dt><dd>The last image that was successfully decoded is displayed along with a red reticle in the center of the image.  The time for which the image is displayed can be configured by the viewfinderFeedbackTime parameter.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.viewfinderFeedback='some string'
# Setting one property
Barcode.setProperty :viewfinderFeedback, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :viewfinderFeedback => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('viewfinderFeedback')
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderFeedback' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.viewfinderFeedback='some string';
# Setting one property
Barcode.setProperty('viewfinderFeedback','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :viewfinderFeedback:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('viewfinderFeedback');
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderFeedback' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pviewfinderFeedbackTime'></a><div class='accordion property' id='pviewfinderFeedbackTime'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyviewfinderFeedbackTime"><strong>viewfinderFeedbackTime</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyviewfinderFeedbackTime" class="accordion-body collapse in">  <div class="accordion-inner">If the viewfinderFeedback:enabled or viewfinderFeedback:reticle are applied then the decoded barcode will remain on the screen for this duration.  Specified in milliseconds.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.viewfinderFeedbackTime=0
# Setting one property
Barcode.setProperty :viewfinderFeedbackTime, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :viewfinderFeedbackTime => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('viewfinderFeedbackTime')
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderFeedbackTime' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.viewfinderFeedbackTime=0;
# Setting one property
Barcode.setProperty('viewfinderFeedbackTime',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :viewfinderFeedbackTime:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('viewfinderFeedbackTime');
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderFeedbackTime' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pviewfinderHeight'></a><div class='accordion property' id='pviewfinderHeight'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyviewfinderHeight"><strong>viewfinderHeight</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyviewfinderHeight" class="accordion-body collapse in">  <div class="accordion-inner">When scanning a barcode using a Camera scanner the viewfinder preview window will be this number of pixels high. The images displayed in the viewfinder will be scaled as appropriate.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.viewfinderHeight=0
# Setting one property
Barcode.setProperty :viewfinderHeight, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :viewfinderHeight => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('viewfinderHeight')
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderHeight' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.viewfinderHeight=0;
# Setting one property
Barcode.setProperty('viewfinderHeight',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :viewfinderHeight:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('viewfinderHeight');
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderHeight' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pviewfinderMode'></a><div class='accordion property' id='pviewfinderMode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyviewfinderMode"><strong>viewfinderMode</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyviewfinderMode" class="accordion-body collapse in">  <div class="accordion-inner">Configures the mode of the scanner viewfinder window. This attribute is not supported on all Scanners and will interact with the picklistMode parameter, see the EMDK for C help file for more information.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera Scanners on Motorola Solutions' devices</td>
</table>

<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>enabled</dt><dd>Only the viewfinder is enabled (not the reticle).  Displays a viewfinder on the screen showing the image being captured by the camera.</dt><dt>disabled</dt><dd> The viewfinder will not be displayed during aiming or scanning.  Not supported on Android.</dt><dt>staticReticle</dt><dd> Displays the viewfinder as well as draws a red reticle in the center of the image which helps with tracking the barcode.</dt><dt>dynamicReticle</dt><dd>Displays the viewfinder as well as draws a red reticle in the center of the image.  If the barcode in the image is 'decodable' the reticle turns green to indicate this.  This mode requires a second trigger press to decode the barcode after the reticle turns green.  Not supported on Android</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.viewfinderMode='some string'
# Setting one property
Barcode.setProperty :viewfinderMode, 'some string' 
# Setting multiple properties using HASH
Barcode.setProperties { :viewfinderMode => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Barcode.getProperty('viewfinderMode')
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderMode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.viewfinderMode='some string';
# Setting one property
Barcode.setProperty('viewfinderMode','some string');
# Setting multiple properties using JSON object
Barcode.setProperties({ :viewfinderMode:'some string' , :another_property:'some string'});

# Getting one property
myvar = Barcode.getProperty('viewfinderMode');
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderMode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pviewfinderWidth'></a><div class='accordion property' id='pviewfinderWidth'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyviewfinderWidth"><strong>viewfinderWidth</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyviewfinderWidth" class="accordion-body collapse in">  <div class="accordion-inner">When scanning a barcode using a Camera scanner the viewfinder preview window will be this number of pixels wide. The images displayed in the viewfinder will be scaled as appropriate.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.viewfinderWidth=0
# Setting one property
Barcode.setProperty :viewfinderWidth, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :viewfinderWidth => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('viewfinderWidth')
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderWidth' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.viewfinderWidth=0;
# Setting one property
Barcode.setProperty('viewfinderWidth',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :viewfinderWidth:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('viewfinderWidth');
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderWidth' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pviewfinderX'></a><div class='accordion property' id='pviewfinderX'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyviewfinderX"><strong>viewfinderX</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyviewfinderX" class="accordion-body collapse in">  <div class="accordion-inner">When scanning a barcode using a Camera scanner the viewfinder preview window will appear this number of pixels from the left hand side of the screen. The images displayed in the viewfinder will be scaled as appropriate.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.viewfinderX=0
# Setting one property
Barcode.setProperty :viewfinderX, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :viewfinderX => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('viewfinderX')
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderX' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.viewfinderX=0;
# Setting one property
Barcode.setProperty('viewfinderX',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :viewfinderX:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('viewfinderX');
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderX' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pviewfinderY'></a><div class='accordion property' id='pviewfinderY'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyviewfinderY"><strong>viewfinderY</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyviewfinderY" class="accordion-body collapse in">  <div class="accordion-inner">When scanning a barcode using a Camera scanner the viewfinder preview window will appear this number of pixels from the top of the screen. The images displayed in the viewfinder will be scaled as appropriate.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Camera Scanners on Motorola Solutions' devices</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.viewfinderY=0
# Setting one property
Barcode.setProperty :viewfinderY, 0 
# Setting multiple properties using HASH
Barcode.setProperties { :viewfinderY => 0 , :another_property => 0}

# Getting one property
myvar = Barcode.getProperty('viewfinderY')
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderY' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.viewfinderY=0;
# Setting one property
Barcode.setProperty('viewfinderY',0);
# Setting multiple properties using JSON object
Barcode.setProperties({ :viewfinderY:0 , :another_property:0});

# Getting one property
myvar = Barcode.getProperty('viewfinderY');
# Getting multiple properties
myvar = Barcode.getProperties(['viewfinderY' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pwebcode'></a><div class='accordion property' id='pwebcode'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertywebcode"><strong>webcode</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertywebcode" class="accordion-body collapse in">  <div class="accordion-inner">Enables or disables the symbology for Webcode barcodes.  If your application does not expect to scan this symbology you should disable it to improve scanning performance.
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.webcode=true
# Setting one property
Barcode.setProperty :webcode, true 
# Setting multiple properties using HASH
Barcode.setProperties { :webcode => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('webcode')
# Getting multiple properties
myvar = Barcode.getProperties(['webcode' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.webcode=true;
# Setting one property
Barcode.setProperty('webcode',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :webcode:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('webcode');
# Getting multiple properties
myvar = Barcode.getProperties(['webcode' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pwebcodeDecodeGtSubtype'></a><div class='accordion property' id='pwebcodeDecodeGtSubtype'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertywebcodeDecodeGtSubtype"><strong>webcodeDecodeGtSubtype</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>2.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertywebcodeDecodeGtSubtype" class="accordion-body collapse in">  <div class="accordion-inner">If true, the GT Webcode subtype will be decoded
<table class='note'>
<td class='icon'></td><td class='content'>Applies to: Not all scanning engines support all symbologies or all symbology properties</td>
</table>

<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Barcode.webcodeDecodeGtSubtype=true
# Setting one property
Barcode.setProperty :webcodeDecodeGtSubtype, true 
# Setting multiple properties using HASH
Barcode.setProperties { :webcodeDecodeGtSubtype => true , :another_property => true}

# Getting one property
myvar = Barcode.getProperty('webcodeDecodeGtSubtype')
# Getting multiple properties
myvar = Barcode.getProperties(['webcodeDecodeGtSubtype' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Barcode.webcodeDecodeGtSubtype=true;
# Setting one property
Barcode.setProperty('webcodeDecodeGtSubtype',true);
# Setting multiple properties using JSON object
Barcode.setProperties({ :webcodeDecodeGtSubtype:true , :another_property:true});

# Getting one property
myvar = Barcode.getProperty('webcodeDecodeGtSubtype');
# Getting multiple properties
myvar = Barcode.getProperties(['webcodeDecodeGtSubtype' , 'another_property']);</code></pre></p>  </div></div></div></div>
<a name='Methods'></a>
<h2><i class='icon-cog'></i>Methods</h2>

<div class="accordion" id="accordion"><div class='accordion method' id='mclearAllProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodclearAllProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">clearAllProperties</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodclearAllProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mcommandRemoteScanner'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodcommandRemoteScanner"><strong data-toggle="tooltip" title data-original-title="Instruct the connected RS507 scanner to perform some action">commandRemoteScanner</strong>(<span class="text-info">STRING</span> command)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodcommandRemoteScanner" class="accordion-body collapse in">  <div class="accordion-inner">Instruct the connected RS507 scanner to perform some action<div><p><strong>Parameters</strong></p><ul><li>command : <span class='text-info'>STRING</span><p>The action the RS507 scanner should perform, can be 'Disconnect' which disconnects the bluetooth RS507; 'unpair' which unpairs the RS507 from the device for association with another device; 'StartPaging' or 'StopPaging' which will cause the RS507 scanner to start or stop emitting a beep, to allow it to be located. </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mdefault'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethoddefault"><strong data-toggle="tooltip" title data-original-title="This is documentation">default</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethoddefault" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>SELF_INSTANCE : Default object of Module.</li></ul></div>  </div></div></div></div><div class='accordion method' id='mdisable'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethoddisable"><strong data-toggle="tooltip" title data-original-title="This is documentation">disable</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethoddisable" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='menable'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodenable"><strong data-toggle="tooltip" title data-original-title="Enabling the scanner puts it in a state where it will respond to the trigger (on devices with a hardware trigger) or will accept a command to initiate a soft scan (start method).  Scanned barcodes will be available to the application through the callback provided to this method.  Only one scanner on the device can be enabled at any one time, to switch between the imager and camera scanners (for example) then first disable the currently enabled scanner.  If specifying a callback it is recommended to have it called asynchronously.">enable</strong>(<span class="text-info">HASH</span> propertyMap, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodenable" class="accordion-body collapse in">  <div class="accordion-inner">Enabling the scanner puts it in a state where it will respond to the trigger (on devices with a hardware trigger) or will accept a command to initiate a soft scan (start method).  Scanned barcodes will be available to the application through the callback provided to this method.  Only one scanner on the device can be enabled at any one time, to switch between the imager and camera scanners (for example) then first disable the currently enabled scanner.  If specifying a callback it is recommended to have it called asynchronously.<div><p><strong>Parameters</strong></p><ul><li>propertyMap : <span class='text-info'>HASH</span> <span class='label label-info'>Optional</span><p>Proivde a set of properties to configure the scanner, for example enable specific symbologies or check digits. Not providing properties to this function will use the scanner's default properties, or those previously set on the Scanner instance</p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span> <span class='label label-info'>Optional</span> <p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.enable(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.enable(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.enable(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.enable(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.enable(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Barcode.enable(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void : Not providing a callback to be invoked when a barcode is scanned will result in that barcode being output as keystrokes.</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>data : <span class='text-info'>STRING</span><p>The data decoded by the scanner or imaging device</p></li><li>source : <span class='text-info'>STRING</span><p>The source device and human readable decoder type of the decoded barcode or symbol</p></li><li>type : <span class='text-info'>STRING</span><p>Hex value representing the decoder type</p></li><li>time : <span class='text-info'>STRING</span><p>The time at which the decode occurred (hh:mm:ss)</p></li><li>length : <span class='text-info'>STRING</span><p>The length of the decoded barcode or symbol</p></li><li>direction : <span class='text-info'>STRING</span><p>The direction the barcode was scanned, either forward or reverse</p></li></ul></div>  </div></div></div></div><div class='accordion method' id='menumerate'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodenumerate"><strong data-toggle="tooltip" title data-original-title="Used to gain access to all scanner objects present on the device.  For consumer devices you will most likely only have a single scanner, your device's camera but Enterprise grade hardware may have two or more scanners attached.">enumerate</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodenumerate" class="accordion-body collapse in">  <div class="accordion-inner">Used to gain access to all scanner objects present on the device.  For consumer devices you will most likely only have a single scanner, your device's camera but Enterprise grade hardware may have two or more scanners attached.<div><p><strong>Return:</strong></p><ul><li>ARRAY : Array of Barcode objects, one for each hardware scanner on the device.  Methdods and properties can be set separately on each scanner but if you are using one scanner you must first disable it before being able to use another scanner on the same device.</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetAllProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetAllProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">getAllProperties</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetAllProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>HASH : Map of properties I want to know about</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">getProperties</strong>(<span class="text-info">ARRAY</span> arrayofNames, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>arrayofNames : <span class='text-info'>ARRAY</span><p>List of properties I want to know about </p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span> <span class='label label-info'>Optional</span> <p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.getProperties(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.getProperties(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.getProperties(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.getProperties(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.getProperties(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Barcode.getProperties(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>HASH : Map of properties I want to know about</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetProperty'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetProperty"><strong data-toggle="tooltip" title data-original-title="This is documentation">getProperty</strong>(<span class="text-info">STRING</span> propertyName, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetProperty" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyName : <span class='text-info'>STRING</span><p>The one property that I want to know about </p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span> <span class='label label-info'>Optional</span> <p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.getProperty(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.getProperty(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.getProperty(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.getProperty(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.getProperty(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Barcode.getProperty(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>STRING : The one property that I want to know about</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>value : <span class='text-info'>STRING</span><p>The one property that I want to know about</p></li></ul></div>  </div></div></div></div><div class='accordion method' id='mregisterBluetoothStatus'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodregisterBluetoothStatus"><strong data-toggle="tooltip" title data-original-title="If you are using an RS507 barcode scanner you can register to receive connected or disconnected events through this method.">registerBluetoothStatus</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodregisterBluetoothStatus" class="accordion-body collapse in">  <div class="accordion-inner">If you are using an RS507 barcode scanner you can register to receive connected or disconnected events through this method.<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>status : <span class='text-info'>STRING</span><p>The message describing the bluetooth connection: BluetoothConnected, BluetoothDisconnected or BTScanAssociationBarcode.  See below for further descriptions.</p></li></ul></div>  </div></div></div></div><div class='accordion method' id='msetDefault'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetDefault"><strong data-toggle="tooltip" title data-original-title="This is documentation">setDefault</strong>(<span class="text-info">SELF_INSTANCE</span> defaultInstance)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetDefault" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>defaultInstance : <span class='text-info'>SELF_INSTANCE</span><p>Default instance I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">setProperties</strong>(<span class="text-info">HASH</span> propertyMap)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyMap : <span class='text-info'>HASH</span><p>Map of properties I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetProperty'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetProperty"><strong data-toggle="tooltip" title data-original-title="This is documentation">setProperty</strong>(<span class="text-info">STRING</span> propertyName, <span class="text-info">STRING</span> propertyValue)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetProperty" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyName : <span class='text-info'>STRING</span><p>The one property name that I want to set </p></li><li>propertyValue : <span class='text-info'>STRING</span><p>The one property value that I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mstart'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodstart"><strong data-toggle="tooltip" title data-original-title="Performs a soft trigger start, initiating a scan without pressing the hardware trigger. If the scan does not result in a decode it is necessary to perform a soft stop before another soft start.">start</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodstart" class="accordion-body collapse in">  <div class="accordion-inner">Performs a soft trigger start, initiating a scan without pressing the hardware trigger. If the scan does not result in a decode it is necessary to perform a soft stop before another soft start.<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mstop'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodstop"><strong data-toggle="tooltip" title data-original-title="Performs a soft trigger stop">stop</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodstop" class="accordion-body collapse in">  <div class="accordion-inner">Performs a soft trigger stop<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mtake'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodtake"><strong data-toggle="tooltip" title data-original-title="Enable the scanner and start capturing the barcode automatically.  On Motorola Solutions' devices the amount of time to scan the barcode is defined by the scanTimeout property.  On iPhone and Android if a barcode is found, the user can confirm barcode recognition, or continue to try to recognize the barcode. When the user confirms or cancels, the callback is called.  Once the callback has been called the barcode hardware is disabled.">take</strong>(<span class="text-info">HASH</span> propertyMap, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodtake" class="accordion-body collapse in">  <div class="accordion-inner">Enable the scanner and start capturing the barcode automatically.  On Motorola Solutions' devices the amount of time to scan the barcode is defined by the scanTimeout property.  On iPhone and Android if a barcode is found, the user can confirm barcode recognition, or continue to try to recognize the barcode. When the user confirms or cancels, the callback is called.  Once the callback has been called the barcode hardware is disabled.<div><p><strong>Parameters</strong></p><ul><li>propertyMap : <span class='text-info'>HASH</span> <span class='label label-info'>Optional</span><p>Proivde a set of properties to configure the scanner, for example enable specific symbologies or check digits. Not providing properties to this function will use the scanner's default properties, or those previously set on the Scanner instance</p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span><p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.take(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.take(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.take(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Barcode.take(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Barcode.take(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Barcode.take(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>barcode : <span class='text-info'>STRING</span><p>The data decoded by the scanner or imaging device</p></li><li>status : <span class='text-info'>STRING</span><p>Whether or not the barcode was successfully scanned, status will be 'ok' or 'cancel'</p></li></ul></div>  </div></div></div></div></div>
<a name='Remarks'></a>
<h2><i class='icon-warning-sign'></i>Remarks</h2>

<a name='r0'></a><div class='accordion property' id='r0'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cRemark0"><strong>Bluetooth Scanner Overview</strong><i class="icon-chevron-down pull-left"></i></span></div><div id="cRemark0" class="accordion-body collapse in">  <div class="accordion-inner"><p>Once associated with the Device a Bluetooth Scanner will remain associated even after losing the BT connection. In order to associate a different Bluetooth scanner with the device it is necessary to scan the &lsquo;unpairing&rsquo; barcode and then invoke the &lsquo;disabled&rsquo; method followed by the &lsquo;enabled&rsquo; method, this will allow you to scan the BT association barcode with a different scanner. You can override this default behaviour using the disconnectBtOnDisable property.</p>

<p>The following messages will be received from the Bluetooth Scanner in the bluetoothStatus event:</p>

<p><strong>&lsquo;BTScanAssociationBarcode&rsquo;</strong>
Means the device is ready to be associated with a BT scanner.  You must scan the
association barcode.  It is only necessary to scan the association
barcode when you first associate a scanner with the device, this pairing will be remembered until
you scan the unpairing barcode.</p>

<p><strong> &lsquo;BluetoothConnected&rsquo;</strong>
The remote scanner has successfully connected to the device.</p>

<p><strong> &lsquo;BluetoothDisconnected&rsquo;</strong>
The remote scanner has become disconnected from the device, this may be due to loss of battery, being out
of range or scanning the &lsquo;unpairing&rsquo; barcode.  The scanner will attempt to reconnect automatically for
a period of time once it regains power or goes out of range, if it fails to reconnect after the specified
timeout the reconnect button on the device should be pushed.  Once the unpairing barcode is scanned
it is necessary to disable the scanner and then re-enable it before another scanner can be associated.</p>
  </div></div></div></div><a name='r1'></a><div class='accordion property' id='r1'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cRemark1"><strong>Viewfinder Position Parameters</strong><i class="icon-chevron-down pull-left"></i></span></div><div id="cRemark1" class="accordion-body collapse in">  <div class="accordion-inner"><p>On Motorola Solutions' scanners the scanner viewfinder window is not infinitely resizable, when setting ViewFinderX, ViewFinderY, ViewFinderWidth and ViewFinderHeight ensure you do not exceed the size of the screen and it is recommended to use the same aspect ratio as your device. For applications designed to handle screen rotation it is recommended to use a scan window whose longest side will fit within both the screen width and screen height. If your viewfinder position fails to be applied it is recommended you query your log file to see which parameter is causing trouble, or reposition the window away from the edges of the screen.</p>
  </div></div></div></div><a name='r2'></a><div class='accordion property' id='r2'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cRemark2"><strong>Scanning and Camera Interaction</strong><i class="icon-chevron-down pull-left"></i></span></div><div id="cRemark2" class="accordion-body collapse in">  <div class="accordion-inner"><p>In some device configurations the scanner and camera share the same hardware.  Where two modules share the same physical hardware they cannot be enabled simultaneously, in this circumstance once the scanner is enabled it must be disabled before the camera can be used, and vice versa.</p>
  </div></div></div></div><a name='r3'></a><div class='accordion property' id='r3'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cRemark3"><strong>DataWedge Interaction With Native Apps</strong><i class="icon-chevron-down pull-left"></i></span></div><div id="cRemark3" class="accordion-body collapse in">  <div class="accordion-inner"><p>In order to use the scanner with RhoElements Native Apps you will need to either disable DataWedge or create a DataWedge profile for your app.</p>

<p><strong>Disabling Datawedge</strong></p>

<ol>
<li>Start the DataWedge app</li>
<li>Click the menu button > &ldquo;Settings&rdquo; and untick &ldquo;DataWedge enabled&rdquo;.</li>
</ol>


<p><strong>RhoElements Datawedge Profile</strong></p>

<ol>
<li>Install your RhoElements native app,</li>
<li>Start the DataWedge app</li>
<li>Click the menu button > &ldquo;New Profile&rdquo; and enter a name,</li>
<li>Click on the link to the new profile in the profile list,</li>
<li>Click on &ldquo;Associated apps&rdquo; in the &ldquo;Applications&rdquo; section,</li>
<li>Click the menu button > &ldquo;New app/activity&rdquo;,</li>
<li>Select the package name for your app,</li>
<li>Select &ldquo;*&rdquo;,</li>
<li>Click the &ldquo;Back&rdquo; capacitive button,</li>
<li>Make sure the &ldquo;Profile enabled&rdquo; checkbox is ticked.</li>
<li>Uncheck all three &ldquo;Enabled&rdquo; checkboxes under the sections of:
&ldquo;Barcode input&rdquo;, &ldquo;Keystroke output&rdquo; and &ldquo;Intent output&rdquo;.</li>
</ol>

  </div></div></div></div></div>