#Cardreader
<div class="btn-group"><a href="#Properties" class="btn"><i class="icon-list"></i> Properties</a><button href="#" class="btn dropdown-toggle" data-toggle="dropdown">  <span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a href="#pautoEnter" data-target="cPropertyautoEnter" class="autouncollapse">autoEnter</a></li><li><a href="#pautoTab" data-target="cPropertyautoTab" class="autouncollapse">autoTab</a></li><li><a href="#pmoduleName" data-target="cPropertymoduleName" class="autouncollapse">moduleName</a></li><li><a href="#ppanData" data-target="cPropertypanData" class="autouncollapse">panData</a></li><li><a href="#ppinEntry" data-target="cPropertypinEntry" class="autouncollapse">pinEntry</a></li><li><a href="#ppinTimeout" data-target="cPropertypinTimeout" class="autouncollapse">pinTimeout</a></li></ul></div><div class="btn-group"><a href="#Methods" class="btn"><i class="icon-cog"></i> Methods</a><a class="btn dropdown-toggle" data-toggle="dropdown" data-target="#" href="#Methods" >  <span class="caret"></span>&nbsp;</a><ul class="dropdown-menu"><li><a href="#mclearAllProperties" data-target="cMethodclearAllProperties" class="autouncollapse">clearAllProperties</a></li><li><a href="#mclose" data-target="cMethodclose" class="autouncollapse">close</a></li><li><a href="#mdefault" data-target="cMethoddefault" class="autouncollapse">default</a></li><li><a href="#menumerate" data-target="cMethodenumerate" class="autouncollapse">enumerate</a></li><li><a href="#mgetAllProperties" data-target="cMethodgetAllProperties" class="autouncollapse">getAllProperties</a></li><li><a href="#mgetProperties" data-target="cMethodgetProperties" class="autouncollapse">getProperties</a></li><li><a href="#mgetProperty" data-target="cMethodgetProperty" class="autouncollapse">getProperty</a></li><li><a href="#mopen" data-target="cMethodopen" class="autouncollapse">open</a></li><li><a href="#msetDefault" data-target="cMethodsetDefault" class="autouncollapse">setDefault</a></li><li><a href="#msetProperties" data-target="cMethodsetProperties" class="autouncollapse">setProperties</a></li><li><a href="#msetProperty" data-target="cMethodsetProperty" class="autouncollapse">setProperty</a></li></ul></div><div class="btn-group pull-right"><button class="btn" id="expandAll" tooltip="Expand all"><i class="icon-th-list "></i>&nbsp;</button></div><div data-spy="scroll"  >
The Card Reader module decodes the card data when read through a card reader attachment. Currently this is available only on Motorola Solutions devices.

<a name='Properties'></a>
<h2><i class='icon-list'></i>Properties</h2>

<a name='pautoEnter'></a><div class='accordion property' id='pautoEnter'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyautoEnter"><strong>autoEnter</strong> : <span class='text-info'>BOOLEAN</span>  <i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyautoEnter" class="accordion-body collapse in">  <div class="accordion-inner">When enabled, appends a carriage return to any data returned as keystrokes by the cardreader.<p><strong>Default:</strong> false</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Cardreader.autoEnter=true
# Setting one property
Cardreader.setProperty :autoEnter, true 
# Setting multiple properties using HASH
Cardreader.setProperties { :autoEnter => true , :another_property => true}

# Getting one property
myvar = Cardreader.getProperty('autoEnter')
# Getting multiple properties
myvar = Cardreader.getProperties(['autoEnter' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Cardreader.autoEnter=true;
# Setting one property
Cardreader.setProperty('autoEnter',true);
# Setting multiple properties using JSON object
Cardreader.setProperties({ :autoEnter:true , :another_property:true});

# Getting one property
myvar = Cardreader.getProperty('autoEnter');
# Getting multiple properties
myvar = Cardreader.getProperties(['autoEnter' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pautoTab'></a><div class='accordion property' id='pautoTab'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyautoTab"><strong>autoTab</strong> : <span class='text-info'>BOOLEAN</span>  <i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyautoTab" class="accordion-body collapse in">  <div class="accordion-inner">When enabled, appends a tab to any data returned as keystrokes by the cardreader.<p><strong>Default:</strong> false</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Cardreader.autoTab=true
# Setting one property
Cardreader.setProperty :autoTab, true 
# Setting multiple properties using HASH
Cardreader.setProperties { :autoTab => true , :another_property => true}

# Getting one property
myvar = Cardreader.getProperty('autoTab')
# Getting multiple properties
myvar = Cardreader.getProperties(['autoTab' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Cardreader.autoTab=true;
# Setting one property
Cardreader.setProperty('autoTab',true);
# Setting multiple properties using JSON object
Cardreader.setProperties({ :autoTab:true , :another_property:true});

# Getting one property
myvar = Cardreader.getProperty('autoTab');
# Getting multiple properties
myvar = Cardreader.getProperties(['autoTab' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pmoduleName'></a><div class='accordion property' id='pmoduleName'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertymoduleName"><strong>moduleName</strong> : <span class='text-info'>STRING</span>  <i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertymoduleName" class="accordion-body collapse in">  <div class="accordion-inner">This method is present to provide backwards compatibility with PocketBrowser code, devices supported by RhoElements will have a single card reader driver installed as part of the platform.  If the device has multiple card reader drivers installed this parameter is used to select which driver to use.  The drivers present are output in the log file when the card reader is initialised.  This parameter is also used to distinguish between an MSR and a DCR, e.g. if you attach a DCR7000 to your device you can specify that only the MSR functionality is used by specifying this parameter as 'MSR7000'<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>fixed</dt><dd>MSR9000 drivers</dt><dt>fixed</dt><dd>MSR9001 drivers</dt><dt>fixed</dt><dd>MSR9500 drivers</dt><dt>fixed</dt><dd>MSRCAMEO drivers</dt><dt>fixed</dt><dd>MSR7000 drivers</dt><dt>fixed</dt><dd>DCR7000 drivers</dt><dt>fixed</dt><dd>MSR55 drivers</dt><dt>fixed</dt><dd>MSR3000 drivers</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Cardreader.moduleName='some string'
# Setting one property
Cardreader.setProperty :moduleName, 'some string' 
# Setting multiple properties using HASH
Cardreader.setProperties { :moduleName => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Cardreader.getProperty('moduleName')
# Getting multiple properties
myvar = Cardreader.getProperties(['moduleName' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Cardreader.moduleName='some string';
# Setting one property
Cardreader.setProperty('moduleName','some string');
# Setting multiple properties using JSON object
Cardreader.setProperties({ :moduleName:'some string' , :another_property:'some string'});

# Getting one property
myvar = Cardreader.getProperty('moduleName');
# Getting multiple properties
myvar = Cardreader.getProperties(['moduleName' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppanData'></a><div class='accordion property' id='ppanData'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypanData"><strong>panData</strong> : <span class='text-info'>INTEGER</span>  <i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypanData" class="accordion-body collapse in">  <div class="accordion-inner">Sets the card data without the need of a swipe.  This accepts any 16 digit number as the value.<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Cardreader.panData=0
# Setting one property
Cardreader.setProperty :panData, 0 
# Setting multiple properties using HASH
Cardreader.setProperties { :panData => 0 , :another_property => 0}

# Getting one property
myvar = Cardreader.getProperty('panData')
# Getting multiple properties
myvar = Cardreader.getProperties(['panData' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Cardreader.panData=0;
# Setting one property
Cardreader.setProperty('panData',0);
# Setting multiple properties using JSON object
Cardreader.setProperties({ :panData:0 , :another_property:0});

# Getting one property
myvar = Cardreader.getProperty('panData');
# Getting multiple properties
myvar = Cardreader.getProperties(['panData' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppinEntry'></a><div class='accordion property' id='ppinEntry'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypinEntry"><strong>pinEntry</strong> : <span class='text-info'>BOOLEAN</span>  <i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypinEntry" class="accordion-body collapse in">  <div class="accordion-inner">Turns the PIN entry on or off.<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Cardreader.pinEntry=true
# Setting one property
Cardreader.setProperty :pinEntry, true 
# Setting multiple properties using HASH
Cardreader.setProperties { :pinEntry => true , :another_property => true}

# Getting one property
myvar = Cardreader.getProperty('pinEntry')
# Getting multiple properties
myvar = Cardreader.getProperties(['pinEntry' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Cardreader.pinEntry=true;
# Setting one property
Cardreader.setProperty('pinEntry',true);
# Setting multiple properties using JSON object
Cardreader.setProperties({ :pinEntry:true , :another_property:true});

# Getting one property
myvar = Cardreader.getProperty('pinEntry');
# Getting multiple properties
myvar = Cardreader.getProperties(['pinEntry' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppinTimeout'></a><div class='accordion property' id='ppinTimeout'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypinTimeout"><strong>pinTimeout</strong> : <span class='text-info'>INTEGER</span>  <i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypinTimeout" class="accordion-body collapse in">  <div class="accordion-inner">PIN entry timeout in milliseconds. A value of 65535 sets the timeout to infinite. Accepts values between 0 and 65535.<p><strong>Default:</strong> 30000</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Cardreader.pinTimeout=0
# Setting one property
Cardreader.setProperty :pinTimeout, 0 
# Setting multiple properties using HASH
Cardreader.setProperties { :pinTimeout => 0 , :another_property => 0}

# Getting one property
myvar = Cardreader.getProperty('pinTimeout')
# Getting multiple properties
myvar = Cardreader.getProperties(['pinTimeout' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Cardreader.pinTimeout=0;
# Setting one property
Cardreader.setProperty('pinTimeout',0);
# Setting multiple properties using JSON object
Cardreader.setProperties({ :pinTimeout:0 , :another_property:0});

# Getting one property
myvar = Cardreader.getProperty('pinTimeout');
# Getting multiple properties
myvar = Cardreader.getProperties(['pinTimeout' , 'another_property']);</code></pre></p>  </div></div></div></div>
<a name='Methods'></a>
<h2><i class='icon-cog'></i>Methods</h2>

<div class="accordion" id="accordion"><div class='accordion method' id='mclearAllProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodclearAllProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">clearAllProperties</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodclearAllProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mclose'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodclose"><strong data-toggle="tooltip" title data-original-title="Closes the card reader">close</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodclose" class="accordion-body collapse in">  <div class="accordion-inner">Closes the card reader<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mdefault'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethoddefault"><strong data-toggle="tooltip" title data-original-title="This is documentation">default</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethoddefault" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>SELF_INSTANCE : Default object of Module.</li></ul></div>  </div></div></div></div><div class='accordion method' id='menumerate'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodenumerate"><strong data-toggle="tooltip" title data-original-title="This is documentation">enumerate</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodenumerate" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>ARRAY : Array of objects.</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetAllProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetAllProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">getAllProperties</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetAllProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>HASH : Map of properties I want to know about</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">getProperties</strong>(<span class="text-info">ARRAY</span> arrayofNames, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>arrayofNames : <span class='text-info'>ARRAY</span><p>List of properties I want to know about </p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span> <span class='label label-info'>Optional</span> <p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Cardreader.getProperties(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Cardreader.getProperties(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Cardreader.getProperties(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Cardreader.getProperties(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Cardreader.getProperties(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Cardreader.getProperties(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>HASH : Map of properties I want to know about</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetProperty'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetProperty"><strong data-toggle="tooltip" title data-original-title="This is documentation">getProperty</strong>(<span class="text-info">STRING</span> propertyName, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetProperty" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyName : <span class='text-info'>STRING</span><p>The one property that I want to know about </p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span> <span class='label label-info'>Optional</span> <p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Cardreader.getProperty(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Cardreader.getProperty(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Cardreader.getProperty(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Cardreader.getProperty(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Cardreader.getProperty(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Cardreader.getProperty(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>STRING : The one property that I want to know about</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>value : <span class='text-info'>STRING</span><p>The one property that I want to know about</p></li></ul></div>  </div></div></div></div><div class='accordion method' id='mopen'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodopen"><strong data-toggle="tooltip" title data-original-title="Opens the card reader.">open</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodopen" class="accordion-body collapse in">  <div class="accordion-inner">Opens the card reader.<div><p><strong>Return:</strong></p><ul><li>Void : Not providing a callback to be invoked when a card is swiped will result in that card data being output as keystrokes.</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>data : <span class='text-info'>STRING</span><p>Data read by the card reader. This may be card data, the PAN data extracted from the card data, encrypted PIN block data, or a message. In case of an ISO/ABA card [eg: a financial card], data is encrypted. For other cards, data is in the clear.</p></li><li>mode : <span class='text-info'>STRING</span><p>Describes the data. This will be either: 'CR','ENCDATA','PAN', or 'MESSAGE'.  This equates to card data, encrypted PIN block data, PAN data, or a message, respectively.</p></li><li>encryption : <span class='text-info'>BOOLEAN</span><p>This provides the information regarding the card reader head configuration. Available only on Android.</p></li><li>rawData : <span class='text-info'>STRING</span><p>This is the raw data read by the card reader from all the tracks. Available only on Android and the value is in HEX format.</p></li><li>track1 : <span class='text-info'>STRING</span><p>The track1 clear/masked data read by the card reader. Available only on Android and the value is in HEX format. This value should be used only when the track1Status value returned is true.</p></li><li>track2 : <span class='text-info'>STRING</span><p>The track2 clear/masked data read by the card reader. Available only on Android and the value is in HEX format. This value should be used only when the track2Status value returned is true.</p></li><li>track3 : <span class='text-info'>STRING</span><p>The track3 clear/masked data read by the card reader. Available only on Android and the value is in HEX format. This value should be used only when the track3Status value returned is true.</p></li><li>track1Status : <span class='text-info'>BOOLEAN</span><p>The status of the track1 clear/masked data read by the card reader. Available only on Android.</p></li><li>track2Status : <span class='text-info'>BOOLEAN</span><p>The status of the track2 clear/masked data read by the card reader. Available only on Android.</p></li><li>track3Status : <span class='text-info'>BOOLEAN</span><p>The status of the track3 clear/masked data read by the card reader. Available only on Android.</p></li><li>track1Encrypted : <span class='text-info'>STRING</span><p>The track1 encrypted data read by the card reader. Available only on Android and the value is in HEX format. This value should be used only when the track1EncryptedStatus value returned is true.</p></li><li>track2Encrypted : <span class='text-info'>STRING</span><p>The track2 encrypted data read by the card reader. Available only on Android and the value is in HEX format. This value should be used only when the track2EncryptedStatus value returned is true.</p></li><li>track3Encrypted : <span class='text-info'>STRING</span><p>The track3 encrypted data read by the card reader. Available only on Android and the value is in HEX format. This value should be used only when the track3EncryptedStatus value returned is true.</p></li><li>track1EncryptedStatus : <span class='text-info'>BOOLEAN</span><p>The status of the track1 encrypted data read by the card reader. Available only on Android.</p></li><li>track2EncryptedStatus : <span class='text-info'>BOOLEAN</span><p>The status of the track2 encrypted data read by the card reader. Available only on Android.</p></li><li>track3EncryptedStatus : <span class='text-info'>BOOLEAN</span><p>The status of the track3 encrypted data read by the card reader. Available only on Android.</p></li><li>ksn : <span class='text-info'>STRING</span><p>The encrypted KSN serial number read by the card reader. Available only on Android and the value is in HEX format.</p></li></ul></div>  </div></div></div></div><div class='accordion method' id='msetDefault'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetDefault"><strong data-toggle="tooltip" title data-original-title="This is documentation">setDefault</strong>(<span class="text-info">SELF_INSTANCE</span> defaultInstance)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetDefault" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>defaultInstance : <span class='text-info'>SELF_INSTANCE</span><p>Default instance I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">setProperties</strong>(<span class="text-info">HASH</span> propertyMap)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyMap : <span class='text-info'>HASH</span><p>Map of properties I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetProperty'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetProperty"><strong data-toggle="tooltip" title data-original-title="This is documentation">setProperty</strong>(<span class="text-info">STRING</span> propertyName, <span class="text-info">STRING</span> propertyValue)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetProperty" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyName : <span class='text-info'>STRING</span><p>The one property name that I want to set </p></li><li>propertyValue : <span class='text-info'>STRING</span><p>The one property value that I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div></div></div>