#Signature
<div class="btn-group"><a href="#Properties" class="btn"><i class="icon-list"></i> Properties<sup>&nbsp;11</sup></a><button href="#" class="btn dropdown-toggle" data-toggle="dropdown">  <span class="caret"></span>&nbsp;</button><ul class="dropdown-menu"><li><a href="#pbgColor" data-target="cPropertybgColor" class="autouncollapse">bgColor</a></li><li><a href="#pborder" data-target="cPropertyborder" class="autouncollapse">border</a></li><li><a href="#pcompressionFormat" data-target="cPropertycompressionFormat" class="autouncollapse"><span class="text-info">compressionFormat</span></a></li><li><a href="#pheight" data-target="cPropertyheight" class="autouncollapse">height</a></li><li><a href="#pleft" data-target="cPropertyleft" class="autouncollapse">left</a></li><li><a href="#poutputFormat" data-target="cPropertyoutputFormat" class="autouncollapse">outputFormat</a></li><li><a href="#ppenColor" data-target="cPropertypenColor" class="autouncollapse">penColor</a></li><li><a href="#ppenWidth" data-target="cPropertypenWidth" class="autouncollapse">penWidth</a></li><li><a href="#psetFullscreen" data-target="cPropertysetFullscreen" class="autouncollapse">setFullscreen</a></li><li><a href="#ptop" data-target="cPropertytop" class="autouncollapse">top</a></li><li><a href="#pwidth" data-target="cPropertywidth" class="autouncollapse">width</a></li></ul></div><div class="btn-group"><a href="#Methods" class="btn"><i class="icon-cog"></i> Methods<sup>&nbsp;15</sub></a><a class="btn dropdown-toggle" data-toggle="dropdown" data-target="#" href="#Methods" >  <span class="caret"></span>&nbsp;</a><ul class="dropdown-menu"><li><a href="#mcapture" data-target="cMethodcapture" class="autouncollapse">capture</a></li><li><a href="#mclear" data-target="cMethodclear" class="autouncollapse">clear</a></li><li><a href="#mclearAllProperties" data-target="cMethodclearAllProperties" class="autouncollapse">clearAllProperties</a></li><li><a href="#mdefault" data-target="cMethoddefault" class="autouncollapse">default</a></li><li><a href="#menumerate" data-target="cMethodenumerate" class="autouncollapse">enumerate</a></li><li><a href="#mgetAllProperties" data-target="cMethodgetAllProperties" class="autouncollapse">getAllProperties</a></li><li><a href="#mgetProperties" data-target="cMethodgetProperties" class="autouncollapse">getProperties</a></li><li><a href="#mgetProperty" data-target="cMethodgetProperty" class="autouncollapse">getProperty</a></li><li><a href="#mhide" data-target="cMethodhide" class="autouncollapse">hide</a></li><li><a href="#msetDefault" data-target="cMethodsetDefault" class="autouncollapse">setDefault</a></li><li><a href="#msetProperties" data-target="cMethodsetProperties" class="autouncollapse">setProperties</a></li><li><a href="#msetProperty" data-target="cMethodsetProperty" class="autouncollapse">setProperty</a></li><li><a href="#msetVectorCallback" data-target="cMethodsetVectorCallback" class="autouncollapse">setVectorCallback</a></li><li><a href="#mtake" data-target="cMethodtake" class="autouncollapse">take</a></li></ul></div><div class="btn-group pull-right"><button class="btn" id="expandAll" tooltip="Expand all"><i class="icon-th-list "></i>&nbsp;</button></div><div  >
creates a rectangular box within which the user can draw by using a finger or the device's stylus to record handwritten data. Common usages for this tag include the capture of client/customer signatures and the input of handwritten text/notations.

<a name='Properties'></a>
<h2><i class='icon-list'></i>Properties</h2>

<a name='pbgColor'></a><div class='accordion property' id='pbgColor'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertybgColor"><strong>bgColor</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertybgColor" class="accordion-body collapse in">  <div class="accordion-inner">RGB or RGBA value that sets the background color of the signature capture area.<p><strong>Default:</strong> #FFFFFFFF</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.bgColor='some string'
# Setting one property
Signature.setProperty :bgColor, 'some string' 
# Setting multiple properties using HASH
Signature.setProperties { :bgColor => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Signature.getProperty('bgColor')
# Getting multiple properties
myvar = Signature.getProperties(['bgColor' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.bgColor='some string';
# Setting one property
Signature.setProperty('bgColor','some string');
# Setting multiple properties using JSON object
Signature.setProperties({ :bgColor:'some string' , :another_property:'some string'});

# Getting one property
myvar = Signature.getProperty('bgColor');
# Getting multiple properties
myvar = Signature.getProperties(['bgColor' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pborder'></a><div class='accordion property' id='pborder'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyborder"><strong>border</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyborder" class="accordion-body collapse in">  <div class="accordion-inner">Shows or hides a border for the rectangular capture area. Not applicable to fullscreen signature capture area.<p><strong>Default:</strong> true</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.border=true
# Setting one property
Signature.setProperty :border, true 
# Setting multiple properties using HASH
Signature.setProperties { :border => true , :another_property => true}

# Getting one property
myvar = Signature.getProperty('border')
# Getting multiple properties
myvar = Signature.getProperties(['border' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.border=true;
# Setting one property
Signature.setProperty('border',true);
# Setting multiple properties using JSON object
Signature.setProperties({ :border:true , :another_property:true});

# Getting one property
myvar = Signature.getProperty('border');
# Getting multiple properties
myvar = Signature.getProperties(['border' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pcompressionFormat'></a><div class='accordion property' id='pcompressionFormat'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertycompressionFormat"><strong><span class="text-info">compressionFormat</span></strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertycompressionFormat" class="accordion-body collapse in">  <div class="accordion-inner"><span class='label label-info'>Replaces:imageFormat</span> Compression format of the image file for the captured signature.<p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>jpg</dt><dd>JPEG file format. Not supported on Windows Mobile/CE.</dt><dt>png</dt><dd>Portable Network Graphics file. Not supported on Windows Mobile/CE.</dt><dt>bmp</dt><dd>Bitmap image file.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.compressionFormat='some string'
# Setting one property
Signature.setProperty :compressionFormat, 'some string' 
# Setting multiple properties using HASH
Signature.setProperties { :compressionFormat => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Signature.getProperty('compressionFormat')
# Getting multiple properties
myvar = Signature.getProperties(['compressionFormat' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.compressionFormat='some string';
# Setting one property
Signature.setProperty('compressionFormat','some string');
# Setting multiple properties using JSON object
Signature.setProperties({ :compressionFormat:'some string' , :another_property:'some string'});

# Getting one property
myvar = Signature.getProperty('compressionFormat');
# Getting multiple properties
myvar = Signature.getProperties(['compressionFormat' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pheight'></a><div class='accordion property' id='pheight'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyheight"><strong>height</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyheight" class="accordion-body collapse in">  <div class="accordion-inner">The height of the signature capture area in pixels. Not applicable to fullscreen signature capture area.<p><strong>Default:</strong> 150</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.height=0
# Setting one property
Signature.setProperty :height, 0 
# Setting multiple properties using HASH
Signature.setProperties { :height => 0 , :another_property => 0}

# Getting one property
myvar = Signature.getProperty('height')
# Getting multiple properties
myvar = Signature.getProperties(['height' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.height=0;
# Setting one property
Signature.setProperty('height',0);
# Setting multiple properties using JSON object
Signature.setProperties({ :height:0 , :another_property:0});

# Getting one property
myvar = Signature.getProperty('height');
# Getting multiple properties
myvar = Signature.getProperties(['height' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pleft'></a><div class='accordion property' id='pleft'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyleft"><strong>left</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyleft" class="accordion-body collapse in">  <div class="accordion-inner">The coordinates in pixels of the left side of the signature capture area. Not applicable to fullscreen signature capture area.<p><strong>Default:</strong> 15</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.left=0
# Setting one property
Signature.setProperty :left, 0 
# Setting multiple properties using HASH
Signature.setProperties { :left => 0 , :another_property => 0}

# Getting one property
myvar = Signature.getProperty('left')
# Getting multiple properties
myvar = Signature.getProperties(['left' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.left=0;
# Setting one property
Signature.setProperty('left',0);
# Setting multiple properties using JSON object
Signature.setProperties({ :left:0 , :another_property:0});

# Getting one property
myvar = Signature.getProperty('left');
# Getting multiple properties
myvar = Signature.getProperties(['left' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='poutputFormat'></a><div class='accordion property' id='poutputFormat'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertyoutputFormat"><strong>outputFormat</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertyoutputFormat" class="accordion-body collapse in">  <div class="accordion-inner">The return type of the saved signature capture image.<p><strong>Default:</strong> image</p><p><strong>Possible Values</strong> (<span class='text-info'>STRING</span>):</p> <dt>image</dt><dd>Outputs the signature capture image into an image file. The compression method and extension of the image file can be specified in compressionFormat.</dt><dt>dataUri</dt><dd>Outputs the signature capture image as a DataURI string.</dt></dl><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.outputFormat='some string'
# Setting one property
Signature.setProperty :outputFormat, 'some string' 
# Setting multiple properties using HASH
Signature.setProperties { :outputFormat => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Signature.getProperty('outputFormat')
# Getting multiple properties
myvar = Signature.getProperties(['outputFormat' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.outputFormat='some string';
# Setting one property
Signature.setProperty('outputFormat','some string');
# Setting multiple properties using JSON object
Signature.setProperties({ :outputFormat:'some string' , :another_property:'some string'});

# Getting one property
myvar = Signature.getProperty('outputFormat');
# Getting multiple properties
myvar = Signature.getProperties(['outputFormat' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppenColor'></a><div class='accordion property' id='ppenColor'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypenColor"><strong>penColor</strong> : <span class='text-info'>STRING</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypenColor" class="accordion-body collapse in">  <div class="accordion-inner">RGB or RGBA value that sets the color of the stylus pen ink using HTML web colors.<p><strong>Default:</strong> #000000FF</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.penColor='some string'
# Setting one property
Signature.setProperty :penColor, 'some string' 
# Setting multiple properties using HASH
Signature.setProperties { :penColor => 'some string' , :another_property => 'some string'}

# Getting one property
myvar = Signature.getProperty('penColor')
# Getting multiple properties
myvar = Signature.getProperties(['penColor' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.penColor='some string';
# Setting one property
Signature.setProperty('penColor','some string');
# Setting multiple properties using JSON object
Signature.setProperties({ :penColor:'some string' , :another_property:'some string'});

# Getting one property
myvar = Signature.getProperty('penColor');
# Getting multiple properties
myvar = Signature.getProperties(['penColor' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ppenWidth'></a><div class='accordion property' id='ppenWidth'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertypenWidth"><strong>penWidth</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertypenWidth" class="accordion-body collapse in">  <div class="accordion-inner">Sets the width of the pen line in pixels.<p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.penWidth=0
# Setting one property
Signature.setProperty :penWidth, 0 
# Setting multiple properties using HASH
Signature.setProperties { :penWidth => 0 , :another_property => 0}

# Getting one property
myvar = Signature.getProperty('penWidth')
# Getting multiple properties
myvar = Signature.getProperties(['penWidth' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.penWidth=0;
# Setting one property
Signature.setProperty('penWidth',0);
# Setting multiple properties using JSON object
Signature.setProperties({ :penWidth:0 , :another_property:0});

# Getting one property
myvar = Signature.getProperty('penWidth');
# Getting multiple properties
myvar = Signature.getProperties(['penWidth' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='psetFullscreen'></a><div class='accordion property' id='psetFullscreen'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertysetFullscreen"><strong>setFullscreen</strong> : <span class='text-info'>BOOLEAN</span>  <span class='muted pull-right'>4.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertysetFullscreen" class="accordion-body collapse in">  <div class="accordion-inner">Sets whether the signature capture area should be fullscreen (true) or inline (false).<p><strong>Default:</strong> true</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.setFullscreen=true
# Setting one property
Signature.setProperty :setFullscreen, true 
# Setting multiple properties using HASH
Signature.setProperties { :setFullscreen => true , :another_property => true}

# Getting one property
myvar = Signature.getProperty('setFullscreen')
# Getting multiple properties
myvar = Signature.getProperties(['setFullscreen' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.setFullscreen=true;
# Setting one property
Signature.setProperty('setFullscreen',true);
# Setting multiple properties using JSON object
Signature.setProperties({ :setFullscreen:true , :another_property:true});

# Getting one property
myvar = Signature.getProperty('setFullscreen');
# Getting multiple properties
myvar = Signature.getProperties(['setFullscreen' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='ptop'></a><div class='accordion property' id='ptop'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertytop"><strong>top</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertytop" class="accordion-body collapse in">  <div class="accordion-inner">The coordinates in pixels of the top side of the signature capture area. Not applicable to fullscreen signature capture area.<p><strong>Default:</strong> 60</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.top=0
# Setting one property
Signature.setProperty :top, 0 
# Setting multiple properties using HASH
Signature.setProperties { :top => 0 , :another_property => 0}

# Getting one property
myvar = Signature.getProperty('top')
# Getting multiple properties
myvar = Signature.getProperties(['top' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.top=0;
# Setting one property
Signature.setProperty('top',0);
# Setting multiple properties using JSON object
Signature.setProperties({ :top:0 , :another_property:0});

# Getting one property
myvar = Signature.getProperty('top');
# Getting multiple properties
myvar = Signature.getProperties(['top' , 'another_property']);</code></pre></p>  </div></div></div></div><a name='pwidth'></a><div class='accordion property' id='pwidth'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cPropertywidth"><strong>width</strong> : <span class='text-info'>INTEGER</span>  <span class='muted pull-right'>1.0.0</span><i class="icon-chevron-down pull-left"></i></span></div><div id="cPropertywidth" class="accordion-body collapse in">  <div class="accordion-inner">The width of the signature capture area in pixels. Not applicable to fullscreen signature capture area.<p><strong>Default:</strong> 200</p><p>

<strong>Ruby Usage</strong>

<pre class='CodeRay'><code>:::ruby
# Setting directly
Signature.width=0
# Setting one property
Signature.setProperty :width, 0 
# Setting multiple properties using HASH
Signature.setProperties { :width => 0 , :another_property => 0}

# Getting one property
myvar = Signature.getProperty('width')
# Getting multiple properties
myvar = Signature.getProperties(['width' , 'another_property'])</code></pre>

<strong>Javascript Usage</strong>

<pre class='CodeRay'><code>:::javascript

# Setting directly
Signature.width=0;
# Setting one property
Signature.setProperty('width',0);
# Setting multiple properties using JSON object
Signature.setProperties({ :width:0 , :another_property:0});

# Getting one property
myvar = Signature.getProperty('width');
# Getting multiple properties
myvar = Signature.getProperties(['width' , 'another_property']);</code></pre></p>  </div></div></div></div>
<a name='Methods'></a>
<h2><i class='icon-cog'></i>Methods</h2>

<div class="accordion" id="accordion"><div class='accordion method' id='mcapture'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodcapture"><strong data-toggle="tooltip" title data-original-title="Captures the signature area as an image.">capture</strong>(<span class="text-info">STRING</span> callback_url)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodcapture" class="accordion-body collapse in">  <div class="accordion-inner">Captures the signature area as an image.<div><p><strong>Parameters</strong></p><ul><li>callback_url : <span class='text-info'>STRING</span> <span class='label label-info'>Optional</span><p>Deprecated. Use take callback instead. Url to callback method called after the user enters a signature. Parameter ignored.</p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mclear'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodclear"><strong data-toggle="tooltip" title data-original-title="Clears the capture area">clear</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodclear" class="accordion-body collapse in">  <div class="accordion-inner">Clears the capture area<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mclearAllProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodclearAllProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">clearAllProperties</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodclearAllProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='mdefault'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethoddefault"><strong data-toggle="tooltip" title data-original-title="This is documentation">default</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethoddefault" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>SELF_INSTANCE : Default object of Module.</li></ul></div>  </div></div></div></div><div class='accordion method' id='menumerate'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodenumerate"><strong data-toggle="tooltip" title data-original-title="This is documentation">enumerate</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodenumerate" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>ARRAY : Array of objects.</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetAllProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetAllProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">getAllProperties</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetAllProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Return:</strong></p><ul><li>HASH : Map of properties I want to know about</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">getProperties</strong>(<span class="text-info">ARRAY</span> arrayofNames, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>arrayofNames : <span class='text-info'>ARRAY</span><p>List of properties I want to know about </p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span> <span class='label label-info'>Optional</span> <p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.getProperties(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Signature.getProperties(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.getProperties(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Signature.getProperties(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.getProperties(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Signature.getProperties(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>HASH : Map of properties I want to know about</li></ul></div>  </div></div></div></div><div class='accordion method' id='mgetProperty'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodgetProperty"><strong data-toggle="tooltip" title data-original-title="This is documentation">getProperty</strong>(<span class="text-info">STRING</span> propertyName, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodgetProperty" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyName : <span class='text-info'>STRING</span><p>The one property that I want to know about </p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span> <span class='label label-info'>Optional</span> <p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.getProperty(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Signature.getProperty(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.getProperty(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Signature.getProperty(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.getProperty(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Signature.getProperty(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>STRING : The one property that I want to know about</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>value : <span class='text-info'>STRING</span><p>The one property that I want to know about</p></li></ul></div>  </div></div></div></div><div class='accordion method' id='mhide'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodhide"><strong data-toggle="tooltip" title data-original-title="Hides the signature capture area from view but doesnt clear the inputed signature data. In a hidden state, a user cannot interact with the signature capture area">hide</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodhide" class="accordion-body collapse in">  <div class="accordion-inner">Hides the signature capture area from view but doesnt clear the inputed signature data. In a hidden state, a user cannot interact with the signature capture area<div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetDefault'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetDefault"><strong data-toggle="tooltip" title data-original-title="This is documentation">setDefault</strong>(<span class="text-info">SELF_INSTANCE</span> defaultInstance)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetDefault" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>defaultInstance : <span class='text-info'>SELF_INSTANCE</span><p>Default instance I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetProperties'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetProperties"><strong data-toggle="tooltip" title data-original-title="This is documentation">setProperties</strong>(<span class="text-info">HASH</span> propertyMap)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetProperties" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyMap : <span class='text-info'>HASH</span><p>Map of properties I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetProperty'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetProperty"><strong data-toggle="tooltip" title data-original-title="This is documentation">setProperty</strong>(<span class="text-info">STRING</span> propertyName, <span class="text-info">STRING</span> propertyValue)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetProperty" class="accordion-body collapse in">  <div class="accordion-inner">This is documentation<div><p><strong>Parameters</strong></p><ul><li>propertyName : <span class='text-info'>STRING</span><p>The one property name that I want to set </p></li><li>propertyValue : <span class='text-info'>STRING</span><p>The one property value that I want to set </p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div>  </div></div></div></div><div class='accordion method' id='msetVectorCallback'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodsetVectorCallback"><strong data-toggle="tooltip" title data-original-title="Signature data is formatted into a series of vectors and returned to the application via this callback function. The received data may not represent the entire signature as the vectors will be sent in batches if the signature is large. A single vector (array entry) contains an X, Y coordinate and the beginning / end of the signature is defined by (65535, 65535). This callback is independent of the callback of the capture method, when specified the callback will be called whenever a 'pen up' occurs in the signature box.">setVectorCallback</strong>()<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodsetVectorCallback" class="accordion-body collapse in">  <div class="accordion-inner">Signature data is formatted into a series of vectors and returned to the application via this callback function. The received data may not represent the entire signature as the vectors will be sent in batches if the signature is large. A single vector (array entry) contains an X, Y coordinate and the beginning / end of the signature is defined by (65535, 65535). This callback is independent of the callback of the capture method, when specified the callback will be called whenever a 'pen up' occurs in the signature box.<div><p><strong>Return:</strong></p><ul><li>Void : Not providing a callback will result in the vector callback being cleared</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>vectorArray : <span class='text-info'>ARRAY</span><p>JavaScript array of vectors which represent the signature.</p></li></ul></div>  </div></div></div></div><div class='accordion method' id='mtake'><div class="accordion-group"><div class="accordion-heading"><span class="accordion-toggle" data-toggle="collapse"  href="#cMethodtake"><strong data-toggle="tooltip" title data-original-title="Shows a signature area. The callback is fired when the signature is closed (when in fullscreen) or when capture is called.">take</strong>(<span class="text-info">HASH</span> propertyMap, <span class='text-info'>Callback &lt;Object&gt;</span> callback)<i class="icon-chevron-down pull-right"></i></span></div><div id="cMethodtake" class="accordion-body collapse in">  <div class="accordion-inner">Shows a signature area. The callback is fired when the signature is closed (when in fullscreen) or when capture is called.<div><p><strong>Parameters</strong></p><ul><li>propertyMap : <span class='text-info'>HASH</span> <span class='label label-info'>Optional</span><p>Map of signature properties to be set Use already set properties</p></li><li>callback : <span class='text-info'>Callback &lt;Object&gt;</span><p><p>The callback parameter can take on one of three forms</p><ol><li>Controller action URL<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.take(...., url_for :action => :mycallback)</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Signature.take(....,'/app/model/mycallback');</code></pre></li><li>Anonymous function:<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.take(....,lambda{ 
|params| }
Proc.new{
 |params| })</code></pre><p>Javascript</p>
<pre class='CodeRay'><code>:::javascript
Signature.take(....,function(params){
//Your code here
};);</code></pre></li><li>Function<p>Ruby</p>
<pre class='CodeRay'><code>:::ruby
Signature.take(...., mycallback() )</code></pre><p>Javascript</p>
ok	<pre class='CodeRay'><code>:::javascript
Signature.take(...., mycallback());</code></pre></li></ol></p></li></ul></div><div><p><strong>Return:</strong></p><ul><li>Void</li></ul></div><div><p><strong>Callback Returning Parameters</strong></p><ul><li>status : <span class='text-info'>STRING</span><p>Whether a signature was captured or the signature capture area was dismissed (Fullscreen version only). Possible values:'ok' or 'cancel'</p></li><li>imageUri : <span class='text-info'>STRING</span><p>If the outputFormat is "image", this will be the URI of the captured signature image. If the outputFormat is "dataUri", this will be the DataURI representation of the captured signature image.</p></li></ul></div>  </div></div></div></div></div></div>