Background Tasks with Delayed Job (DJ)
======================================

<p style='color:red;font-weight:bold;text-align:center;font-size:x-large'>
  THIS IS A DRAFT. DO NOT DISTRIBUTE.
</p>

[Delayed Job](http://blog.leetsoft.com/2008/2/17/delayed-job-dj)
is a popular Rails plugin for deferring long running or low
priority tasks to a background process. Use it for sending email,
image manipulation, uploading files to S3, or interacting with external web APIs.

Quick start
-----------

If you have an existing app that uses DJ, you can start a worker
process on heroku immediately. Change into your app's working
directory and install the "dj" addon:

    $ cd fleeting-mist
    $ heroku addons:add dj

A DJ process starts when the addon is selected and stays running
until the addon is removed.

_[Would love to have that status screen right about now. --Ed]_

You can confirm that the background process came up by inspecting
the logs:

    $ heroku logs
    *** Starting job worker host:railgun.4682 pid:25794

To clear the job queue:

    $ heroku rake jobs:clear

To stop the worker, remove the addon:

    $ heroku addons:remove dj

Installing the DJ plugin (Rails)
--------------------------------

Getting DJ setup within an existing Rails app is quick and
painless. The following is a basic outline of installing the
plugin and starting the worker process on Heroku. See [DJ's
`README`][gh] for detailed information and configuration options.

Start in in the Rails app's working directory and install the DJ
plugin:

    $ script/plugin install git://github.com/tobi/delayed_job.git

Creating the `delayed_jobs` table
---------------------------------

DJ uses a table in the database to implement the job queue.
Generate a database migration and create the table as follows:

    $ script/generation migration create_delayed_jobs
    class CreateDelayedJobs
      def self.up
        create_table :delayed_jobs, :force => true do |table|
          table.integer  :priority, :default => 0      # jobs can jump to the front of
          table.integer  :attempts, :default => 0      # retries, but still fail eventually
          table.text     :handler                      # YAML object dump
          table.string   :last_error                   # last failure
          table.datetime :run_at                       # schedule for later
          table.datetime :locked_at                    # set when client working this job
          table.datetime :failed_at                    # set when all retries have failed
          table.string   :locked_by                    # who is working on this object
          table.timestamps
        end
      end
      def self.down
        drop_table :delayed_jobs
      end
    end

Commit the migration and plugin and push to heroku:

    $ git add db/migrate/*_create_delayed_jobs.rb
    $ git add vendor/plugins/delayed_job
    $ git commit -m 'installed the DJ plugin'

Deploying and starting the DJ process
-------------------------------------

Push deploy and run the migrations:

    $ git push heroku master
    $ heroku rake db:migrate

Install the addon to start your DJ process:

    $ heroku addons:add dj

See Also
--------

  * [Tobias LÃ¼tke's introductory blog post on DJ][dj]
  * [The delayed_job github project][gh]

[gh]: http://github.com/tobi/delayed_job/tree/master
      "tobi's delayed_job at master"

[dj]: http://blog.leetsoft.com/2008/2/17/delayed-job-dj
      "Delayed Job (DJ)"
