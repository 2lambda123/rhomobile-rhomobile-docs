<?xml version = "1.0"?>
<API>
  <MODULE name="DPX" parent="Rho">
    <HELP_OVERVIEW>The DPX (Document Processing eXtensions) is a software solution that enables customers to extract and
process various types of information from documents. A single document may contain barcodes, text, image data and
forms, using DPX this data can be extracted programmatically using OCR, barcode decoding and image capture. For
example, a driver's license can be thought of as a template containing regions such as name and address, signature
and photo, each of these regions are processed and returned to RhoElements separately by DPX so Optical Character
Recognition captures the owners name and address whilst their photo is captured separately. These regions are
defined by a template which maps the various regions of the document to the data they contain and can be created
online at [The MSI DPX template builder](https://dpx.motorolasolutions.com/)
    </HELP_OVERVIEW>
    <MORE_HELP>
## Enabling the API
In order to use this API you must include the following extension in your `build.yml`
    :::ruby
    extensions: ["dpx"]

The `dpx` extension is also included automatically if you specify the following in your `build.yml`
    :::ruby
    app_type: "rhoelements"

**NOTE: If you are building a Windows Mobile or Windows CE app with this API, you must set your app_type as "rhoelements" in your build.yml as shown [here](../guide/build_config#other-build-time-settings).**

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API
in JavaScript

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in
Ruby

    </MORE_HELP>

    <TEMPLATES>
      <DEFAULT_INSTANCE/>
      <PROPERTY_BAG/>
    </TEMPLATES>

    <PROPERTIES>
      <DESC>These properties are used to configure how the DPX works, for example how feedback is provided to the user
      </DESC>
      <PROPERTY name="template" type="STRING">
        <DESC>The template XML which defines the document to be processed. This should be file URI to the template
          on the device. You must provide this property to define the form being captured and what is contained in each
          region on that form. Templates are specific to each document format you intend on capturing and can be created
          online at https://dpx.motorolasolutions.com/.
        </DESC>
      </PROPERTY>
      <PROPERTY name="audioFeedback" type="BOOLEAN" default="true">
        <DESC>Whether or not to provide audio feedback to the user following document processing</DESC>
      </PROPERTY>
      <PROPERTY name="debug" type="BOOLEAN" default="false">
        <DESC>If enabled, allows a session to write form capture, region images, region values, and other data to storage.</DESC>
      </PROPERTY>
      <PROPERTY name="hapticFeedback" type="BOOLEAN" default="true">
        <DESC>Whether or not to provide haptic feedback to the user following document processing</DESC>
      </PROPERTY>
      <PROPERTY name="ledFeedback" type="BOOLEAN" default="true">
        <DESC>Whether or not to provide LED feedback to the user following document processing</DESC>
      </PROPERTY>
      <PROPERTY name="flashMode" type="STRING" default="off">
        <DESC>Flash mode (off, on).</DESC>
        <VALUES>
          <VALUE constName="FLASH_OFF"  value="off"><DESC>Turn flash off.</DESC></VALUE>
          <VALUE constName="FLASH_ON"   value="on"><DESC>Turn flash on.</DESC></VALUE>
        </VALUES>
      </PROPERTY>
      <PROPERTY name="identificationTimeout" type="INTEGER" default="15000">
        <DESC>The length of time, in milliseconds, that the processing engine has to recognise the image from the
          provided template. From 0 to 20000 step by 100.
        </DESC>
      </PROPERTY>
      <PROPERTY name="inputSource" type="STRING" default="camera">
        <DESC>Defines where the document should be captured from. The only supported source is camera.</DESC>
        <VALUES>
          <VALUE constName="SOURCE_CAMERA" value="camera">
            <DESC>The document will be captured from the device camera. After calling the captureDocument method the
              camera preview will be presented, the user should place the document to be captured in the preview frame
              and press the soft button to capture &amp; process the image.
            </DESC>
          </VALUE>
        </VALUES>
      </PROPERTY>
      <PROPERTY name="templateDirectory" type="STRING" default="/sdcard/templates">
        <DESC>Specify where to store downloaded templates.</DESC>
      </PROPERTY>
      <PROPERTY name="logDirectory" type="STRING" default="/sdcard/DPXLog">
        <DESC>Specify which directory to search for logs in.</DESC>
      </PROPERTY>
      <PROPERTY name="processingTimeout" type="INTEGER" default="10000">
        <DESC>Amount of time in milliseconds to wait before timing out processing.</DESC>
      </PROPERTY>
      <PROPERTY name="version" type="STRING" access="STATIC" readOnly="true" generateAccessors="true">
          <DESC>Version of DPX engine.</DESC>
      </PROPERTY>
      <PROPERTY name="uiResultConfirmation" type="BOOLEAN" default="true">
        <DESC>If enabled, shows a UI confirmation with results in DPXView before sending results back to application.</DESC>
      </PROPERTY>
    </PROPERTIES>

    <METHODS>
      <METHOD name="captureDocument" hasCallback="mandatory">
        <DESC>Capture a document by either taking a photo of it and process that image for fields defined in the template. You must specify the template associated with the capture either through the template property or as part of the propertyMap when calling this method. If the document processing does not succeed the returned callback will contain failure description. If the captured document is processed successfully a callback will contain document data.
        </DESC>
        <CALLBACK type="HASH">
          <DESC>DPX engine calls the callback on any significant event. Look at callbackType parameter.</DESC>
          <PARAMS>
            <PARAM name="callbackType" type="STRING">
              <DESC>Indicates whether the document was decoded successfully or not.</DESC>
              <VALUES>
                <VALUE constName="SUCCESS" value="success">
                  <DESC>The document was decoded and processed successfully and this callback contains information about the processed form. Look at processedForm parameter.</DESC>
                </VALUE>
                <VALUE constName="FAILURE" value="failure">
                  <DESC>An error has occured whilst processing the document. Look at failureReason parameter.</DESC>
                </VALUE>
                <VALUE constName="STOP" value="stop">
                  <DESC>The processing is over. No more notifications until next captureDocument.</DESC>
                </VALUE>
              </VALUES>
            </PARAM>
            <PARAM name="failureReason" type="STRING">
              <DESC>Describes reason for failure.</DESC>
              <VALUES>
                <VALUE constName="FAILURE_ERROR" value="error"><DESC>DPX engine generic error.</DESC></VALUE>
                <VALUE constName="FAILURE_IDENTIFICATION_TIMEOUT" value="identificationTimeout"><DESC>Identification timeout. Refer to identificationTimeout property.</DESC></VALUE>
                <VALUE constName="FAILURE_PROCESSING_TIMEOUT" value="processingTimeout"><DESC>Processing timeout. Refer to processingTimeout property.</DESC></VALUE>
              </VALUES>
            </PARAM>
            <PARAM name="processedForm" type="HASH">
              <PARAM name="template" type="HASH">
                <PARAM name="name" type="STRING">
                  <DESC>The name of the template was used for recognition.</DESC>
                </PARAM>
                <PARAM name="number" type="INTEGER">
                  <DESC>The number of the template was used for recognition.</DESC>
                </PARAM>
              </PARAM>
              <PARAM name="formCapture" type="HASH">
                <PARAM name="name" type="STRING">
                  <DESC>The name of the template was used for recognition.</DESC>
                </PARAM>
                <PARAM name="image" type="HASH">
                  <DESC>The image of whole scanned form.</DESC>
                  <PARAM name="width" type="INTEGER">
                    <DESC>Width of scanned form in pixels.</DESC>
                  </PARAM>
                  <PARAM name="height" type="INTEGER">
                    <DESC>Height of scanned form in pixels.</DESC>
                  </PARAM>
                  <PARAM name="id" type="INTEGER">
                    <DESC>Id of scanned form image. Use getDataUri method to retrieve image data. Id is valid until close method is called.</DESC>
                  </PARAM>
                </PARAM>
              </PARAM>
              <PARAM name="regions" type="ARRAY">
                <PARAM name="group" type="STRING">
                  <DESC>The name of the group this region is found in, as defined in the template associated with the
                    recognised region. It's optional parameter.
                  </DESC>
                </PARAM>
                <PARAM name="name" type="STRING">
                  <DESC>The name of the region, as defined in the template associated with the document.</DESC>
                </PARAM>
                <PARAM name="number" type="INTEGER">
                  <DESC>The number of the region, as defined in the template section associated with the recognised region.</DESC>
                </PARAM>
                <PARAM name="processingMode" type="STRING">
                  <DESC>The type of region which has been decoded.</DESC>
                  <VALUES>
                    <VALUE constName="PM_OCR" value="ocr">
                      <DESC>
                        Optical Character Recognition. The region is a text field.
                        The processedData parameter contains array of lines.
                      </DESC>
                    </VALUE>
                    <VALUE constName="PM_OMR" value="omr">
                      <DESC>Optical Mark Recognition. The region is a check box or radio box. The processedData
                        paramater of this callback will contain boolean value.
                      </DESC>
                    </VALUE>
                    <VALUE constName="PM_PICTURE" value="picture">
                      <DESC>The defined region was captured as a picture. No processedData parameter.</DESC>
                    </VALUE>
                    <VALUE constName="PM_BARCODE" value="barcode">
                      <DESC>The region is a barcode and the decoded barcode data is given in the processedData parameter.</DESC>
                    </VALUE>
                  </VALUES>
                </PARAM>
                <PARAM name="processedData">
                  <DESC>
                    The processed data contained in the specified region, this will depend on the type of region being captured.
                    See values of processingMode parameter.
                  </DESC>
                </PARAM>
                <PARAM name="image" type="STRING">
                  <DESC>The image of region.</DESC>
                  <PARAM name="width" type="INTEGER">
                    <DESC>Width of region in pixels.</DESC>
                  </PARAM>
                  <PARAM name="height" type="INTEGER">
                    <DESC>Height of region in pixels.</DESC>
                  </PARAM>
                  <PARAM name="id" type="INTEGER">
                    <DESC>Id of region image. Use getDataUri method to retrieve image data. Id is valid until close method is called.</DESC>
                  </PARAM>
                </PARAM>
                <PARAM name="relativeOcrConfidence" type="INTEGER">
                  <DESC>Relative OCR confidence for processed data if applicable.</DESC>
                </PARAM>
                <PARAM name="absoluteOcrConfidence" type="INTEGER">
                  <DESC>Absolute OCR confidence for processed data if applicable.</DESC>
                </PARAM>
              </PARAM>
            </PARAM>
          </PARAMS>
        </CALLBACK>
      </METHOD>
      <METHOD name="fetchTemplates">
        <DESC>Fetch templates from dedicated DPX server and place into template directory. See templateDirectory parameter.</DESC>
        <PARAMS>
          <PARAM name="userName" type="STRING"><DESC>Username of the user.</DESC></PARAM>
          <PARAM name="password" type="STRING"><DESC>Password of the user.</DESC></PARAM>
        </PARAMS>
      </METHOD>
      <METHOD name="getDataUri">
         <DESC>Return data URI encoding of the raw image assocated with the region or captured form, this allows the operator to
easily verify that the captured data is accurate and if necessary perform any post processing changes by hand.
To show the image on the HTML page insert the data URI  string into the src attribute of the img tag: 

    &lt;img src="dataURI string;"&gt;.
        </DESC>
        <PARAMS>
          <PARAM name="imageId" type="INTEGER">
            <DESC>Id of image to retrieve. Ids are valid until close method call.</DESC>
          </PARAM>
        </PARAMS>
      </METHOD>
      <METHOD name="close" destructor="true">
        <DESC>Close DPX engine, and release allocated resources.</DESC>
      </METHOD>
    </METHODS>
    <USER_OVERVIEW>
    </USER_OVERVIEW>
    <VER_INTRODUCED>4.1.0</VER_INTRODUCED>
    <PLATFORM>
    </PLATFORM>
  </MODULE>
</API>
