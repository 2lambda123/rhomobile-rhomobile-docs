<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
    <MODULE name="Intent" parent="Rho">
        <HELP_OVERVIEW>The Intent API provides an inter-application broadcast message-passing framework.</HELP_OVERVIEW>
        <MORE_HELP>
## Enabling the API
This API is part of the `coreapi` extension that is included automatically.
    :::ruby
    extensions: ["coreapi"]

## JavaScript Usage
Be sure to review the [JavaScript API Usage](/guide/api_js) guide for important information about using this API in JavaScript.

## Ruby Usage
Be sure to review the [Ruby API Usage](/guide/api_ruby) guide for important information about using this API in Ruby.
    </MORE_HELP>
        <TEMPLATES>
        </TEMPLATES>
        <METHODS  access="STATIC">
            <METHOD name="send" hasCallback="optional">
                <DESC>Sends an intent. The receiver of the intent can either be another RhoMobile application that is listening for this Intent characteristic or on Android can be a native Android application setup with an Intent-Filter that will trigger based on the parameters of this method. 
NOTE: On Android, the callback should only be used when the intentType is set to START_ACTIVITY.</DESC>
                <PLATFORM>iOS, WM, Win32, Android</PLATFORM>
                <PARAMS>
                    <PARAM name="params" type="HASH">
                        <DESC>A hash-map with intent parameters.</DESC>
                        <PARAMS>
                            <PARAM name="intentType" type="STRING">
                                <DESC>Type of Intent to send. </DESC>
                                <VALUES>
                                    <VALUE constName="BROADCAST" value ="broadcast">
                                        <DESC>Use the intent as broadcast intent.</DESC>
                                    </VALUE>
                                    <VALUE constName="START_ACTIVITY" value ="startActivity">
                                        <DESC>Use the intent to start a UI activity.</DESC>
                                        <PLATFORM>Android</PLATFORM>
                                    </VALUE>
                                    <VALUE constName="START_SERVICE" value ="startService">
                                        <DESC>Use the intent to start a background service.</DESC>
                                        <PLATFORM>Android</PLATFORM>
                                    </VALUE>
                                </VALUES>
                            </PARAM>
                            <PARAM name="permission" type="STRING">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>Permission used to send a broadcast intent.</DESC>
                            </PARAM>
                            <PARAM name="action" type="STRING">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>Intent action. See [Android docs](http://developer.android.com/reference/android/content/Intent.html#setAction(java.lang.String). for possible values.
***NOTE: Use the Constant Value instead of the actual Constant Name. Ex: For the Constant [ACTION_PICK](http://developer.android.com/reference/android/content/Intent.html#ACTION_PICK) use 'android.intent.action.PICK'***
</DESC>
                            </PARAM>
                            <PARAM name="categories" type="ARRAY">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>List of intent categories. See [Android docs](http://developer.android.com/reference/android/content/Intent.html#addCategory(java.lang.String) for possible values.
***NOTE: Use the Constant Value instead of the actual Constant Name. Ex: For the Constant [CATEGORY_HOME](http://developer.android.com/reference/android/content/Intent.html#CATEGORY_HOME) use 'android.intent.category.HOME'***

</DESC>
                                <PARAM type="STRING"/>
                            </PARAM>
                            <PARAM name="appName" type="STRING">
                                <DESC>Explicit name of the application on the device to run. The platform will determine what value to use. 

* iOS it is BundleURLScheme of executed application. 
* Android it is application package name.
* Windows it is the executable name.
</DESC>
                            </PARAM>
                            <PARAM name="targetClass" type="STRING">
                                <PLATFORM>Android</PLATFORM>
                                <DESC>Explicit name of the class in the application which will receive the intent. Must be specified if and only if 'appName' is defined.</DESC>
                            </PARAM>
                            <PARAM name="uri" type="STRING">
                                <DESC>Open the application associated with the URI. Behavior may be different on different platforms and depend on installed software. For example, open URL with http:// prefix usually executes the Web Browser installed on system and open URL in executed browser.
***NOTE: For Android, this is similar to [Intent.setData()](http://developer.android.com/reference/android/content/Intent.html#setData(android.net.Uri\)). For example, if you were sending a [Map Intent](http://developer.android.com/guide/components/intents-common.html#Maps) you would set this value to something like `geo:47.6,-122.3`***
</DESC>
                            </PARAM>
                            <PARAM name="mimeType" type="STRING">
                                <DESC>MIME type of data defined in the intent. For example, for Plain Text I would use `text/plain`
***NOTE: For Android, this is similar to [Intent.setType()](http://developer.android.com/reference/android/content/Intent.html#setType(java.lang.String\))***
</DESC>
                            </PARAM>
                            <PARAM name="data" type="HASH">
                                <DESC>Data which will be sent within the intent. 

For Android, this is similar to [Intent.putExtra()](http://developer.android.com/reference/android/content/Intent.html#putExtra(java.lang.String, java.lang.String)). `data` should contain a HASH of Extra-String,Value pairs. The `Value` type of the `Extra` must be a string. Other object types are not supported at this time. For example, if in Android we had a statement like:

    :::java
    intent.putExtra(Intent.EXTRA_TEXT, 'Here is the text I am passing to the Intent');

We would setup my `data` param to be:

    :::javascript
    var data = {"android.intent.extra.TEXT":"Here is the text I am passing to the Intent"}

Notice the use of the full constant string "android.intent.extra.TEXT" in place of [Intent.EXTRA_TEXT](http://developer.android.com/reference/android/content/Intent.html#EXTRA_TEXT)

</DESC>
                            </PARAM>
                         </PARAMS>
                    </PARAM>
                </PARAMS>
                <CALLBACK type="HASH">
                    <DESC>Same format as 'params' argument and some additional values described below.
                          Android: Developer has to ensure that the response is addressed to this call because of possible conflicts in integer request code with other extensions.</DESC>
                    <PARAMS>
                        <PARAM name="responseCode" type="INTEGER">
                            <PLATFORM>Android</PLATFORM>
                            <DESC>Response code passed to Android Activity.setResult() method. [RESULT_OK](http://developer.android.com/reference/android/app/Activity.html#RESULT_OK) = -1. Check [Android Docs](http://developer.android.com/reference/android/app/Activity.html#setResult(int\)) for more information. Other attributes like `uri` may be returned depending on the Intent that was triggered. Possible parameters include the same params that are used in this `send(params)` method</DESC>
                        </PARAM>
                    </PARAMS>
                </CALLBACK>
            </METHOD>
            <METHOD name="startListening" hasCallback="mandatory" runInThread="none">
                <DESC>Start listening for custom intents.</DESC>
                <CALLBACK type="HASH">
                    <DESC>Same format as 'params' argument passed to Rho.Intent.send method
                    Android: Developer has to ensure that an intent passed to handler is what he intended to proceed since any other intent may also be passed here.</DESC>
                </CALLBACK>
            </METHOD>
            <METHOD name="stopListening" hasCallback="none">
                <DESC>Stop listening for custom intents.</DESC>
            </METHOD>
        </METHODS>
        <VER_INTRODUCED>4.1.0</VER_INTRODUCED>
        <PLATFORM>Android</PLATFORM>
        <EXAMPLES >
        </EXAMPLES>
    </MODULE>
</API>