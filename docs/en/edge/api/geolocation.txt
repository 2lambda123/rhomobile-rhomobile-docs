# GeoLocation API

Access geolocation information from your device.

See the controller and view in the [/app/GeoLocation folder of the System API Samples](https://github.com/rhomobile/rhodes-system-api-samples/blob/master/app/GeoLocation/controller.rb) application for an example.

Refer to [GeoLocation in Device Capabilites](../rhodes/device-caps#geolocation) for more discussion of GeoLocation, and for examples.

## Enabling Geolocation

To use the geolocation API, you need to enable geolocation on the device. Do this by adding that capability to the build.yml file:

    :::yaml
    capabilities:
      - gps

**NOTE: We do not have a timeout parameter to automatically turn off the GPS system. If you want to turn off the GPS system, call GeoLocation.turnoff.**

## Using JavaScript API

You can call the GeoLocation methods from JavaScript as well as Ruby. To use the JavaScript API, add the `public/js/rho_javascript_api.js` file -- created at build time as part of the application package -- to the .html, .erb, or .js file calling the JavaScript method.

The JavaScript API methods with a return value can pass it as a parameter in jQuery-compatible continuation (deferred object, a kind of callback). Possible continuations to handle are done, fail, and complete.

  Rho.Class.method(params).done(function(handler) { /* handler... */ })

You must enable JavaScript by putting `rho-javascript` into extensions in your build.yml.

    :::yaml
    extensions: ["rho-javascript"]

You must have a [RhoElements license](../rhoelements/licensing) to use the JavaScript API.

## latitude

Returns current latitude in degrees.

<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_latitude" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsLatitude" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_latitude Tab -->
  <div class="tab-pane fade in active" id="ruby_latitude">
    <pre class='CodeRay'>
      <code>:::ruby
GeoLocation.latitude</code>
    </pre>
  </div>

  <!-- jsLatitude Tab -->
  <div class="tab-pane fade" id="jsLatitude">
    <pre class='CodeRay'>
      <code>:::javascript
Rho.GeoLocation.latitude();</code>
    </pre>
  </div>
</div>

## longitude

Returns current longitude in degrees.


<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_longitude" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsLongitude" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_longitude Tab -->
  <div class="tab-pane fade in active" id="ruby_longitude">
    <pre class='CodeRay'>
      <code>:::ruby
GeoLocation.longitude</code>
    </pre>
  </div>

  <!-- jsLongitude Tab -->
  <div class="tab-pane fade" id="jsLongitude">
    <pre class='CodeRay'>
      <code>:::javascript
Rho.GeoLocation.longitude();</code>
    </pre>
  </div>
</div>

## known_position?, is_known_position

Returns true if the location system is up and running, false otherwise. is_known_position returns null if this feature is not supported on the device platform.

<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_known_position" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsKnonwPosition" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_known_position Tab -->
  <div class="tab-pane fade in active" id="ruby_known_position">
    <pre class='CodeRay'>
      <code>:::ruby
GeoLocation.known_position?</code>
    </pre>
  </div>

  <!-- jsKnonwPosition Tab -->
  <div class="tab-pane fade" id="jsKnonwPosition">
    <pre class='CodeRay'>
      <code>:::javascript
Rho.GeoLocation.is_known_position();</code>
    </pre>
  </div>
</div>

## set_notification

Set callback to track location changes.

**NOTE: You only need to call GeoLocation.set_notification once. The current behavior of the callback is that it will be called forever until it is stopped; you need to call `GeoLocation.turnoff` to stop it. The previous behavior was that the callback was called once and needed to be reset.**

Refer to [Device Capabilities - GeoLocation](../rhodes/device-caps#geolocation-setnotification-ex) for examples of set_notification. 

<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_set_notification" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsSetNotification" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_set_notification Tab -->
  <div class="tab-pane fade in active" id="ruby_set_notification">
    <pre class='CodeRay'>
      <code>:::ruby
GeoLocation.set_notification(callback_url, callback_params, ping_gpssystem_interval)</code>
    </pre>
    NOTE: The callback_url parameter must be set in order for GeoLocation to function.
  </div>

  <!-- jsSetNotification Tab -->
  <div class="tab-pane fade" id="jsSetNotification">
    <pre class='CodeRay'>
      <code>:::javascript
Rho.GeoLocation.set_notification(callback, callback_params, ping_gpssystem_interval);</code>
    </pre>
  </div>
</div>

<table border="1">
<tr>
  <td><code>callback_url</code></td>
  <td>url for the callback method called upon a location change notification or for the interval set by ping_gpssystem_interval.</td>
</tr>
<tr>
  <td><code>callback_params</code></td>
  <td>a string added to the body of the callback url. You can use it to identity who is setting up the callback, such as "my_tag=55". In general you do not set callback_param (leave it blank as in "").</td>
</tr>
<tr>
  <td><code>ping_gpssystem_interval</code></td>
  <td>(optional) If 0, the system interval is used; the callback is executed when the GPS system processes a location update (dependent on the mobile platform). If set to a number (such as 3), the callback is executed at an interval of this number of seconds (such as every three seconds).</td>
</tr>
</table>

When the GeoLocation.set_notification callback is called, it will receive a variable called @params, just like a normal Rhodes controller action. Here are the parameters included in the @params variable.

<table border="1">
<tr>
  <td><code>known_position</code></td>
  <td>1 or 0. Return from known_position? method.</td>
</tr>
<tr>
  <td><code>latitude</code></td>
  <td>Return from call to latitude method.</td>
</tr>
<tr>
  <td><code>longitude</code></td>
  <td>Return from call to longitude method.</td>
</tr>
<tr>
  <td><code>available</code></td>
  <td>1 if geolocation is available, 0 otherwise. For 1, not only does the hardware exist, but also the user can turn GPS off in phone settings, or not allow GPS activity on iPhone, etc.</td>
</tr>
<tr>
  <td><code>status</code></td>
  <td>"ok" or "error"</td>
</tr>
<tr>
  <td><code>error_code</code></td>
  <td>error code from RhoError.</td>
</tr>
<tr>
  <td><code>accuracy</code></td>
  <td>horizontal radius in meters; iOS and Android.</td>
</tr>
</table>

[Click here for the RhoError error code list.](rhoerror-api)

## haversine_distance

Returns the distance between two points in miles.

<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_haversine" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsHaversine" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_haversine Tab -->
  <div class="tab-pane fade in active" id="ruby_haversine">
    <pre class='CodeRay'>
      <code>:::ruby
GeoLocation.haversine_distance(latitude1, longitude1, latitude2, longitude2)</code>
    </pre>
  </div>

  <!-- jsHaversine Tab -->
  <div class="tab-pane fade" id="jsHaversine">
    <pre class='CodeRay'>
      <code>:::javascript
Rho.GeoLocation.haversine_distance(latitude1, longitude1, latitude2, longitude2);</code>
    </pre>
  </div>
</div>

<table border="1">
<tr>
  <td><code>latitude1</code></td>
  <td>Latitude of the first point in degrees.</td>
</tr>
<tr>
  <td><code>longitude1</code></td>
  <td>Longitude of the first point in degrees.</td>
</tr>
<tr>
  <td><code>latitude2</code></td>
  <td>Latitude of the second point in degrees.</td>
</tr>
<tr>
  <td><code>longitude2</code></td>
  <td>Longitude of the second point in degrees.</td>
</tr>
</table>

## turnoff

Turn off GeoLocation.

**NOTE: When you call GeoLocation.turnoff, after the GPS is switched off, you might still receive a few callbacks (this depends on the platform; iOS and Android does not receive callbacks after turnoff).**

<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_turnoff" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsTurnoff" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_turnoff Tab -->
  <div class="tab-pane fade in active" id="ruby_turnoff">
    <pre class='CodeRay'>
      <code>:::ruby
GeoLocation.turnoff</code>
    </pre>
  </div>

  <!-- jsTurnoff Tab -->
  <div class="tab-pane fade" id="jsTurnoff">
    <pre class='CodeRay'>
      <code>:::javascript
Rho.GeoLocation.turnoff();</code>
    </pre>
  </div>
</div>

## altitude
Fetches the altitude if available, if not available 0 is returned.

* Units - Meters above sea level.
* Parameters - N/A
* Return - Double
* Access - Ruby: `GeoLocation.altitude`
* Platform Support - Windows Mobile, Android, iOS

### Example
<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_altitude" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsAltitude" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_altitude Tab -->
  <div class="tab-pane fade in active" id="ruby_altitude">
    <pre class='CodeRay'>
      <code>:::ruby
def get_altitude
  altitude = Geolocation.altitude
  Alert.show_popup.altitude
end</code>
    </pre>
  </div>

  <!-- jsAltitude Tab -->
  <div class="tab-pane fade" id="jsAltitude">
    <pre class='CodeRay'>
      <code>:::javascript
function getAltitude(){
  var altitude = Rho.Geolocation.altitude;
  alert(altitude);
}</code>
    </pre>
  </div>
</div>

## satellites
Returns the number of satellites used to determine the fix. If this information isn't available, null is returned.

* Parameters - N/A
* Return - Integer
* Access - Ruby: `GeoLocation.satellites`
* Platform Support - Windows Mobile, Android

### Examples
<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_satellites" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsSatellites" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_satellites Tab -->
  <div class="tab-pane fade in active" id="ruby_satellites">
    <pre class='CodeRay'>
      <code>:::ruby
def get_satellites
  satellites = Geolocation.satellites
  Alert.show_popup.satellites
end</code>
    </pre>
  </div>

  <!-- jsSatellites Tab -->
  <div class="tab-pane fade" id="jsSatellites">
    <pre class='CodeRay'>
      <code>:::javascript
function getSatellites(){
  var satellites = Rho.Geolocation.satellites;
  alert(satellites);
}</code>
    </pre>
  </div>
</div>

## speed
Fetches the speed if it is available. If the speed is not available, 0.0 is returned.

* Units - Meters/sec over ground
* Parameters - N/A
* Return - Float
* Access - Ruby: `GeoLocation.speed`
* Platform Support - Windows Mobile, Android, iOS

### Examples
<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_speed" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsSpeed" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_speed Tab -->
  <div class="tab-pane fade in active" id="ruby_speed">
    <pre class='CodeRay'>
      <code>:::ruby
def get_speed
  speed = Geolocation.speed
  Alert.show_popup speed
end</code>
    </pre>
  </div>

  <!-- jsSpeed Tab -->
  <div class="tab-pane fade" id="jsSpeed">
    <pre class='CodeRay'>
      <code>:::javascript
function getSpeed(){
  var speed = Rho.Geolocation.speed;
  alert(speed);
}</code>
    </pre>
  </div>
</div>

## accuracy
Returns the estimated accuracy of the fix.

* Units - Horizontal radius in Meters.
* Parameters - N/A
* Return - Float
* Access - Ruby: `GeoLocation.accuracy`
* Platform Support - Android, iOS

### Examples
<ul class="nav nav-tabs">
    <li class="active"><a href="#ruby_accuracy" data-toggle="tab">Ruby</a></li>
    <li><a href="#jsAccuracy" data-toggle="tab">JavaScript</a></li>
</ul>

<div class="tab-content">
  <!-- ruby_accuracy Tab -->
  <div class="tab-pane fade in active" id="ruby_accuracy">
    <pre class='CodeRay'>
      <code>:::ruby
def get_accuracy
  accuracy = Geolocation.accuracy
  Alert.show_popup accuracy
end</code>
    </pre>
  </div>

  <!-- jsAccuracy Tab -->
  <div class="tab-pane fade" id="jsAccuracy">
    <pre class='CodeRay'>
      <code>:::javascript
function getAccuracy(){
  var accuracy = Rho.Geolocation.accuracy;
  alert(accuracy);
}</code>
    </pre>
  </div>
</div>

## set_notification_ex(callback url, string callbackParams, options hash)
* Parameters
  * url - Callback method to be invoked on any notification
  * callbackParams - To be used when callback is invoked. It is generally used to know the source of the callback. This is optional.
  * options - This is a hash and can consist of the following two keys:
    * minDistance - Minimum moving distance(in meters) to invoke the callback again.
    * minTimeout - Minimum timeout for next callback invocation.
* Return - Void
* Access - Ruby: `Geolocation.set_notification_ex()`
* Platform Support - Android

NOTE: minDistance and minTimeout values are optional; if nothing is provided, whenever a location update is processed by the underlying system, it is sent to the application. It is supported only on Android devices.

Discrepancy: There is no valid data related to distance, which Geolocation API exposes in WM and hence there is no support for extended notification in WM.

When the callback happens, it will provide the following parameters:

* __Known_position__ - 0 or 1
* __Latitude__       - Value returned by `Geolocation.latitude()` method
* __Longitude__      - Value returned by `Geolocation.longitude()` method
* __Altitude__       - Value returned by `Geolocation.altitude()` method
* __Speed__          - Value returned by `Geolocation.speed()` method
* __Accuracy__       - Value returned by `Geolocation.accuracy()` method
* __Satellites__     - Value returned by `Geolocation.satellites()` method
* __Available__      - 1 if geolocation is available, otherwise 0
* __Status__         - OK or Error
* __Error_code__     - Error code from RhoError