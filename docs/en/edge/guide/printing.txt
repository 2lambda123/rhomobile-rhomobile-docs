# Printing

## Overview
In RhoMobile 4.1, we have introduced a simplified method for printing. In this release we are currently supporting printing to Zebra printers only (via WiFi and BlueTooth), but in subsequent releases we will be adding different printer types. 

## Enabling the APIs
In the [API reference](apisummary), you will see two new APIs: [Printing](../api/printing) and [PrintingZebra](../api/printingzebra). The `Printing` API is a parent class that is defined to easily define common class attributes that specific printer type APIs like [PrintingZebra](../api/printingzebra) will inherit. To enable this functionality in your application, your must include both of these extensions in you build.yml

    :::ruby
    extensions: ["printing","printing_zebra"]

## Using the API
In order to print you must first find and connect to a printer. There are a few different ways to do this, but they all use the [searchPrinters Method](..api/printing#msearchPrintersSTATIC). 

For example, in the following code snippet, we are looking for any Zebra printers over BlueTooth only, by specifying `connectionType` and `printerType` in the `options` parameter:

	:::javascript
	var printers = [];

	Rho.PrinterZebra.searchPrinters({ 
		connectionType:Rho.PrinterZebra.CONNECTION_TYPE_BLUETOOTH,  
		printerType: Rho.PrinterZebra.PRINTER_TYPE_ZEBRA
		 }, function (cb){
			if(cb.status == 'PRINTER_STATUS_SUCCESS')
			{
				if (typeof cb.printerID != "undefined")
				{
					console.log('Found: ' + cb.printerID)
					// > Found ZEBRA_PRINTER_1

					printers.push(cb.printerID);
				}
				else
				{
					console.log('Done Searching');
				}
			}
			else
			{
				console.log(cb.status);
			}
		});

If we knew the printer's BlueTooth address we could have specified the `deviceAddress` in the `options` parameter. When you are connecting for the first time to your device, you may be prompted for the devices Bluetooth secure pairing PIN. usually by default manufacturers use `0000`, `1111` or `1234`.

	:::javascript
	Rho.PrinterZebra.searchPrinters({ 
		connectionType:Rho.PrinterZebra.CONNECTION_TYPE_BLUETOOTH,  
		deviceAddress: '00:03:7A:4C:F2:DB'
		...

NOTE: The deviceAddress for a BlueTooth device must include the ':' like ##:##:##:##:##:##. The discovery process may take several seconds to complete.

Likewise, if we were searching for a printer over WiFi, we could have also used the `deviceAddress` & `devicePort` parameters.
	:::javascript
	Rho.PrinterZebra.searchPrinters({ 
		connectionType:Rho.PrinterZebra.CONNECTION_TYPE_BLUETOOTH,  
		deviceAddress: '192.168.1.121',
		devicePort: 8080
		...

NOTE: Be sure that your BlueTooth or WiFi radios are turned on in your device. Your printer should also be in BlueTooth discover mode

The searchPrinters `callback function` will be executed for each printer found. The callback will include a `printerID` property, which will be used to establish a connection with the printer. When the search is complete, it will issue one more callback with a success status, but will not contain a printerID.

NOTE: This ID is a unique ID that the RhoMobile framework keeps track of. It is not an ID that the printer manufacturer may be using.

## Connecting to the Printer
Now that we found the printers using the `searchPrinters` method, we should have a `printerID` in our `printers array variable`. We create an instance of PrinterZebra class by calling the [getPrinterByID method](../api//printingzebra#mgetPrinterByIDSTATIC) and pass in a string that is the printerID that was returned in the `searchPrinters` call

	:::javascript
	// Ex: printers[0] = 'ZEBRA_PRINTER_1'
	var myPrinter = Rho.PrinterZebra.getPrinterByID(printers[0]);

	// myPrinter is now an instance class of PrinterZebra
	// and can use the Instance Methods and properties associated 
	// with that class


Once we have an instance to a specific printer we now must make a connection, using the [connect method](../api/printingzebra#mconnect), before executing any additional commands:
	:::javascript
	myPrinter.connect(function (cb){
		console.log(cb);
		// deviceName will be Zebra's 'Friendly Name'
		// ex: deviceName = 'XXXX09-10-5799'
		console.log(myPrinter.deviceName);

		// deviceAddress will equal the Bluetooth Address
		// deviceAddress = '00:03:7A:4C:F2:DB'
		console.log(myPrinter.deviceAddress);
	});

## Printing a test print
Now that we found and connected to the printer, it is time to send a test print. The easiest way to do that is to send some text using the [printRawString method](../api//printingzebra#mprintRawString)

	:::javascript
	myPrinter.printRawString('This is a test print');
	// You should see the printer print the text

You can also check some information about the printer using the [requestState method](../api/printingzebra#mrequestState). This method sends a message to the printer to retrieve the current status and returns the information in a callback. The first parameter of this method is an array that lists the items to find. These are [PrinterZebra Constants](../api/printingzebra#Constants) that start with `PRINTER_STATE`. Each state you specify will be returned a a property of the callback object.

	:::javascript
	myPrinter.requestState(['PRINTER_STATE_IS_READY_TO_PRINT',
		'PRINTER_STATE_IS_PAPER_OUT'],function (cb){
			console.log(cb.status);
			console.log(cb.PRINTER_STATE_IS_PAPER_OUT);
			console.log(cb.PRINTER_STATE_IS_READY_TO_PRINT);

		});

## Images
You can also print images using the [printImageFromFile method](../api/printingzebra#mprintImageFromFile). Say for example, you had included an image called `myImage.jpg` in the `public` folder of your application. You can use the [RhoFile.join](../api/File#mjoinSTATIC) helper function and [Application.publicFolder](../api/Application#ppublicFolder) property to create a fully qualified path to the `myImage.jpg` file. This file path is passed to the `printImageFromFile` method:

	:::javascript
	var imagefile = Rho.RhoFile.join(Rho.Application.publicFolder, 'myImage.jpg');

	//assuming you made an instance and connected per the previous instructions
	myPrinter.printImageFromFile(imagefile,0,0,{},function(e){
		console.log(e);
		});

The callback will be a [PRINTER_STATUS constant string](../api/printingzebra#Constants)

NOTE: If the image resolution is large (e.g. 1024x768) this method may take a long time to execute. It is not guaranteed that files larger than 1024x1024 could be printed correctly

### Storing Images
TO DO

## Files & Labels
TODO an overview of what ZPL and CPCL files are. Not too deep out of scope 

### Transferring ZPL and CPCL files
You can included Zebra formatted files like ZPL and CPCL with your application and then send them to the printer to be stored.

First send the file to the printer
	:::javascript
	var ZPLfile = Rho.RhoFile.join(Rho.Application.publicFolder, 'label.zpl');

	//assuming you made an instance and connected per the previous instructions
	myPrinter.sendFileContents(ZPLfile,function(e){
		console.log(e);
		// Will return a PRINTER_STATUS... CONSTANT String
		});

### Using Files Already Stored On The Printer
You may have already stored files on the printer or have been included through some other means. You can retrieve a list of files that exists on the printer by using the [retrieveFileNames method](../api/printingzebra#mretrieveFileNames)

	:::javascript
	myPrinter.retrieveFileNames(function (e){
		// e.status : PRINTER_STATUS_SUCCESS, PRINTER_STATUS_ERROR
		// e.fileNames : ARRAY of file names
		//
	});

### Printing with stored ZPL and CPCL files
Now that we have the files stored on the printer, we can print to them and pass in variables that the file will use in place of the variables specified in the ZPL or CPCL file. We do this either using the [printStoredFormatWithArray method](../api/printingzebra#mprintStoredFormatWithArray) or the [printStoredFormatWithHash method](../api/printingzebra#mprintStoredFormatWithHash). Both of these include three parameters:

*formatPathOnPrinter - this will be 'E:filename' where 'filename' is the name of the file that we sent in the previous step, or one that existed on the device

*vars - This represents the data we want to pass to the label. 

`printStoredFormatWithArray` - An array of strings representing the data to fill into the format. For ZPL formats, index 0 of the array corresponds to field number 2 (^FN2). For CPCL, the variables are passed in the order that they are found in the format 

`printStoredFormatWithHash` (Only ZPL Support) - An hash which contains the key/value pairs for the stored format. For ZPL formats, the key number should correspond directly to the number of the field in the format. Number keys should be passed as string ex: '1':'field1', '2':'field2' etc. 

*callback - Will return a PRINTER_STATUS... CONSTANT String

Example using `printStoredFormatWithArray`
	:::javascript
	myPrinter.printStoredFormatWithArray('E:LABEL.ZPL',['John Doe','123 East Main St','Smalltown, NY 11766'],function (e){
			// Will return a PRINTER_STATUS... CONSTANT String
		});

Example using `printStoredFormatWithHash`
	:::javascript 
	myPrinter.printStoredFormatWithArray('E:LABEL.ZPL',{ 'name':'John Doe','address': '123 East Main St','citystate': Smalltown, NY 11766'},function (e){
			// Will return a PRINTER_STATUS... CONSTANT String
		});

## Printer Status
TO DO
