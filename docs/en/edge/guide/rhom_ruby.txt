# Using Rhom in Ruby

## Creating a Ruby Data Model

There are two ways to generate a Ruby model: one is using RhoStudio and the other is with the command-line generator. Under the hood, RhoStudio invokes the command-line tool, so both approaches are equivalent. Together with the model class itself, the generator will output a default set of views that you can customize as needed.


### Adding a Model from RhoStudio

To generate a model, right-click on the application project in the Project Explorer and select New -> RhoMobile model.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/new-rhodes-model-menu-4.0.png"/>

In the Model Information window, enter the name for your model: in this case, `Product`.

**NOTE: Do not use the following for model names: `Config, Settings, helpers, test, Client, Sync` or any built-in Ruby class name. It is also a good programming practice to avoid using generic names, such as `time` or `print`. Using descriptive names in your models will help you grow your application more easily in the future**

The other required piece of information is the list of attributes, which must be entered as a string with no spaces, each attribute separated by a comma: in this `Product` example, `name,brand,price,quantity,sku`.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/model-information-4.0.png"/>

After pressing the Finish button, you'll see the results of the RhoMobile model generator in the output console.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/rhodes-model-generator-output-4.0.png"/>


### Adding a Model from the command line

If you prefer to use the command line or another development environment instead of RhoStudio, the `rhodes` tool can be invoked manually. To create the `Product` model with `name, brand, price, quantity` and `sku` as the attributes, switch to the root directory of your application (the one that contains `app` as a child) and run:

    :::term
    $ rhodes model Product name,brand,price,quantity,sku


### What a generated model consists of

Output from the model generator will contain the following files:

* app/Product/index.erb - the html view template to display the list of objects
* app/Product/edit.erb - the html view template to edit an object
* app/Product/new.erb - the html view template to supply values to create a new object
* app/Product/show.erb - the html view template to displays the selected object
* app/Product/product_controller.rb - contains the the business logic for the model, the basic CRUD actions: index, new, create, edit, update and delete.
* app/Product/product.rb - contains the Product model definition
* app/test/product_spec.rb - placeholder for Product test specs

You are free to update all these files to suit your application

**NOTE: Why does the `product.rb` file not mention the attributes at all? Rhodes provides two model storage schemes, called PropertyBag and FixedSchema. FixedSchema stores data for each model in its own database table, with one column per attribute, and requires the model to explicitly list the attributes it supports. PropertyBag stores everything in a single table and is more flexible: it determines the list of attributes dynamically at run time, the model does not need to declare them. The generator outputs PropertyBag models by default; that is why there is no mention of the attributes in the generated model file, PropertyBag does not require them. For a discussion of the benefits and drawbacks of each approach, see [Using the local database](local_database).**


## Adding new objects

Use the `create` method to create a new model object and save it to the database. 

NOTE: This is the fastest way to insert a single item into the database.

    :::ruby
    user = User.create(
            :name => 'Alice', 
            :email => 'alice@example.com')

You can also create the new model object without saving it automatically and then explicitly use the `save` method. This is useful when you want to update some of the object attributes before saving.

    :::ruby
    user = User.new(:name => 'Alice')
    # update the object
    user.email = 'alice@example.com'
    user.save
  

## Retrieving objects

You can retrieve all objects for a model or only those matching given conditions using the `find` method.

### Getting all objects for a model 

You can retrieve all objects for a model using the `all` parameter. 

    :::ruby
    users = User.find(:all)

### Finding objects matching conditions

You can retrieve all objects matching given conditions using the `conditions` parameter.

    :::ruby
    users = User.find(
                :all, 
                :conditions => {:name => 'Alice'}
            )

### Numeric field comparisons in property bag models

Because, internally, property bag models store all their values in the same column, this column is defined as `varchar`, which means that number comparisons do not work as you would expected. If you need to perform order comparisons on a numeric field in a property bag model, use CAST to convert the value to a number of the desired type:

    :::ruby
    @accts = Account.find(:all, 
        :conditions => { {:func=> 'CAST', :name=>'rating as INTEGER', :op=>'<'} => 3 } )
    #or using sql query:
    size = 3
    @accts = Account.find(:all, 
        :conditions => ["CAST(rating as INTEGER)< ?", "#{size}"], :select => ['rating'] )

### Ordering the objects

You can retrieve objects sorted by one or more attributes using the `order` and `orderdir` parameters.

    :::ruby
    # order by one attribute
    users = User.find(
                :all, 
                :order => 'name', 
                :orderdir => 'DESC'
            )
    
    # order by multiple attributes
    users = User.find(
                :all, 
                :order => ['name', 'email'], 
                :orderdir => ['ASC', 'DESC']
            )

### Retrieving specific attributes

If, for a particular action, you do not need every attribute in an object, you can make your application faster by selecting only the specific attributes you need using the `select` parameter.

    :::ruby
    users = User.find(
                :all, 
                :select => ['name']
            )

### Paginating results

NOTE: this section applies to Ruby only

You can pass `offset` and `per_page` parameters to `find` method to retrieve objects in chunks.

    :::ruby
    # get first 10 records
    users = User.find(:all, :per_page => 10)
    
    # get records 21-40
    users = User.find(:all, :offset => 20, :per_page => 20)

For convenience, there is a `paginate` method which emulates Rails' classic pagination syntax. The default page size is 10.

You can use `:conditions`, `:order` and `select` parameters, similarly to the `find` method.

    :::ruby
    # get first 10 records
    users = User.paginate(:page => 0)
    
    # get records 21-40
    users = User.paginate(:page => 1, :per_page => 20)

### Retrieving only the first object matching conditions

You can get only the first object matching given conditions using `first` instead of `all` when calling `find`.

    :::ruby
    user = User.find(
                :first, 
                :conditions => {:name => 'Alice'}
            )

### Using SQL queries directly

You can directly retrive model object(s) using SQL queries with the `findBySql` method. This method works only for fixed schema models.

    :::ruby
    users = User.findBySql('SELECT * FROM User')

## Counting objects

You can get the number of objects matching given conditions using the `count` parameter with `find` method.

    :::ruby
    count = User.find(
                :count, 
                :conditions => {:name => 'Alice'}
            )
## Updating

You can update an objectâ€™s attributes and save it to the database using the `updateAttributes` method

NOTE: This is the fastest way to add or update item attributes.

    :::ruby
    user = User.find(:first, :conditions => {:name => 'Alice'})
    user.update_attributes(
                :name => 'Bob', 
                :email => 'bob@example.com')

## Deleting

### Deleting one object

To delete one model object use the `destroy` method on the object to be deleted.

    :::ruby
    user = User.find(:first)
    user.destroy

### Delete multiple objects

To delete all objects for a model, or only those matching given conditions, use the `delete_all` method.

    :::ruby
    # delete all objects
    User.delete_all()
    
    # delete only objects matching :conditions
    User.delete_all(:conditions => {:name => 'Alice'})

## Transactions

Use transactions to group together database operations that must either succeed or fail as a group, without leaving any partially completed operations. You can combine any set of object/model operations like insert/update/delete under a transaction.

    :::ruby
    db = Rho::Database.new
    db.startTransaction
    begin
        # do multiple operations
        User.create(:name => 'Alice', :email => 'alice@example.com')
        User.create(:name => 'Bob', :email => 'bob@example.com')
        
        # no errors, so commit all the changes
        db.commitTransaction
    rescue
        # on error rollback all changes
        db.rollbackTransaction
    end

## Executing SQL

You can execute SQL statements directly on the database by using `Database.executeSql` method.

    :::ruby
    begin
        db = Rho::Database.new(Rho::Application.databaseFilePath('app'),'app');
        result = db.executeSql('SELECT * FROM User') # result is an array of hashes, where each hash is a record
    ensure
        db.close
    end

    :::ruby
    db.executeBatchSql("UPDATE User set valid=0; Update Account set active=0")


## Resetting database

You can use the following method for recovering the database from a bad or corrupt state or if the RhoConnect server returns errors.

### Delete all objects for given models.

    :::ruby
    Rho::ORM.databaseFullResetEx(:models => ['User'], :reset_client_info => true, :reset_local_models => true)




## Adding more fields to an existing model

The list of attributes in a model can be updated as development progresses. If you are using the PropertyBag storage scheme (the default), the only thing you need to do is add the relevant code to the views (`index.erb`, `edit.erb`, `new.erb` and `show.erb`)  and Rhodes will take care of the rest. If you have switched to FixedSchema, however, you also need to add the appropriate lines in your model `.rb` file:

    :::ruby
    property :<property_name> :<data_type>
    
In our example `Product` model, for example, we could add

    :::ruby
    property :color, :string
    
The guide [Using the local database](../rhodes/rhom#fixed-schema) contains all the details on which data types are supported, as well as other ways to fine-tune data synchronization.


## Linking a model to a RhoConnect synchronization server

### What is RhoConnect
RhoConnect is the server-side part of RhoMobile Suite that connects your mobile application to external data sources. Whether your data comes from a relational database, NoSQL data store, RESTful web services or any other data source, RhoConnect bridges the gap between mobile clients and server resources. Using RhoConnect frees you from writing error-prone, hard to maintain synchronization code and takes care of all aspects of data sync.


### Integrating a mobile Rhodes application with RhoConnect
Once your application can store data about a particular model, enabling two-way synchronization with a RhoConnect server is a one-step process: there is only one line to change, in your model file (`product.rb` in our example), uncomment the line

    :::ruby
    enable :sync
    
As long as your RhoConnect server is properly configured, this is all that is required to benefit from automatic, two-way synchronization. See the [RhoConnect Tutorial](../tutorial/rhoconnect) for in-depth information about the benefits RhoConnect provides, as well as [Using the local database](../rhodes/rhom#fixed-schema) to find out how to tune data synchronization according to the needs of your application.




## Associations

Rhom has a `sync association` called `belongs_to` which you can use to trigger updates on sync-enabled models. This is useful where you have relationships between backend service objects.

For example, you can have a list of customers who are assigned to a sales person:

    :::ruby
    var customerModel = Rho.ORM.addModel(function(model) {
        model.modelName('Customer');
        model.property('name','string');
        model.property('email','string');
        model.belongs_to('SalesRep');
        
    });

    class Customer
      include Rhom::PropertyBag

      # Declare container model and attribute.
      belongs_to :salesrep_id, 'SalesRep'
    end

The value you must use as the identifier to link objects is the `object` property

    :::ruby
    def create
      @customer = Customer.new(@params['customer'])
      @customer.save

      sales_rep = SalesRep.find(...) # find the appropriate sales representative for new customers
      customer.salesrep_id = @sales_rep.object
      customer.save
      redirect :action => :index
    end

You can also define polymorphic sync associations, or sync associations across multiple classes.

Using array notation:
    
    :::ruby
    belongs_to :parent_id, ['Product', 'Case']

Or multiple declarations:

    :::ruby
    belongs_to :parent_id, 'Product'
    belongs_to :parent_id, 'Case'


If you are planning to use the bulk sync feature for your associated models, then you should take into consideration the
corresponding support on the RhoConnect Server side. See [RhoConnect Bulk Sync associations](../rhoconnect/bulk-sync#bulk-sync-associations).

## Freezed models
If you want to limit model attributes by specific list - you can 'freeze' model:

    :::ruby
    class Customer
        include Rhom::PropertyBag

        enable :sync

        set :freezed, true

        property :address, :string
        property :city, :string
        property :email, :string
    end

For such models if you try to set a property that has not been explicitly defined, you will get ArgumentError exception:

    :::ruby
    obj = Customer.new( :wrong_address => 'test') #will raise ArgumentError exception
    obj = Customer.create( :wrong_address => 'test') #will raise ArgumentError exception
    
    obj = Customer.new
    obj.wrong_address = 'test' #will raise ArgumentError exception
    
    obj = Customer.new
    obj.update_attributes(:wrong_address => 'test') #will raise ArgumentError exception

**NOTE: FixedSchema models are 'freezed' by default. This is only supported in Ruby models.**

## Data Migration (fixed schema only)

Data migrations are needed when your models or struture of your models change with new application versions. Rhom provides an application hook to migrate the data manually. You can also use this hook to run business logic related to updating the database. It may also be used to notify the user that a migration is in progress before starting lengthy database operations.

If you want to remove all local data when upgrading to new application version, change `app_db_version` in `rhoconfig.txt`. This will work for both Property Bag and Fixed Schema models.

If you want to retain existing data, you will not need any data migration for Property Bag models, since all attributes are dynamic. However for Fixed Schema models you will need to do some additional steps.

First you need to track the `:schema_version` in your model:

    :::ruby
    class Product
        include Rhom::FixedSchema

        set :schema_version, '1.1'
    end

Next, in your `application.rb` implement the `on_migrate_source(old_version, new_src)` method. This is called on application start if `:schema_version` has changed.

    :::ruby
    class AppApplication < Rho::RhoApplication
    
        # old_version     String containing old version value (i.e. '1.0')
        # new_src         Hash with source information:
        #                 'schema_version', 'name', 'schema'
        #                 new_src['schema']['sql'] contains new schema sql
        def on_migrate_source(old_version, new_src)
            # ... notify user about migration ...

            db = Rho::RHO.get_src_db(new_src['name'])
            db.executeSql("ALTER TABLE #{new_src['name']} ADD COLUMN mytest VARCHAR DEFAULT null")

            true # we processed the migration ourselves, do not create the table automatically
        end
    end
    
**NOTE: When a schema changes, you can use ADD COLUMN but removing columns is not possible (this is a limitation in the underlying SQLite database engine). If your schema changes are significant and cannot be accomodated by merely adding new columns, you will need to perform a whole-table migration: create a new table with a temporary name, copy existing data to it, drop the old table and rename the new table**

Return `false` to run the custom sql specified by the new_src[â€˜schemaâ€™][â€˜sqlâ€™] string:    

    :::ruby
    def on_migrate_source(old_version, new_src)
        false # create table by source schema - useful only for non-synced models
    end

**NOTE: For sync sources, you cannot just recreate table without data copy. Because server will not send this data at sync time.**



## Related reading

* [Database API reference](../api/Database)
