Error Pages
===========

Errors happen. Knowing how to distinguish between a problem with the Heroku
platform and an error in your application can save you time and effort in
getting to the source of the problem and restoring service. Heroku takes
advantage of the HTTP response's status code to convey information about
different classes of errors:

### Internal Server Error (HTTP 500)

This indicates an error inside your application. Common causes would be gem dependency, syntax and argument errors. Use "heroku logs" to diagnose the problem, and implement a fix.

### App Failed To Respond (HTTP 502)

When you see an HTTP 502 error it means your app failed to properly respond to communication from the Heroku platform. In this case, you will see one of the following three pages:

#### App Failed to Boot (HTTP 502)

Your application failed to start up following a deploy, or issuing a restart request from the gem. You will see a crashlog with a backtrace outlining the error condition. 

#### App Failed to Respond (HTTP 502)

Occasionally an app may issue a zero-length response. Often, this type of error would be memory related. While Ruby handles memory errors gracefully, this is not always the case for gems with native extensions. A native extension exceeding the Dyno memory limit can cause this error.

#### App Crashed (HTTP 502)

If your app crashes unexpectedly due to an uncaught exception, or perhaps broken code injected at runtime, you will see an "App Crashed" page.

#### Request Timeout (HTTP 502)

This page is shown when your dyno takes more than 30 seconds to respond to a request. Check our [Performance page](performance#request-timeout) for more info on how to avoid request timeouts.

### Heroku Ouchie Page (HTTP 503)

In the event of a Heroku platform error or system outage, an HTTP 503 status
code is returned with an *Ouchie Guy*, like this:

<img src="/images/ouchie.png" width='484' height='130'>

This indicates that something is wrong with Heroku. If the problem persists,
please [open a support ticket](http://support.heroku.com/) or send an email
to [support@heroku.com](mailto:support@heroku.com).

### App failed to boot (HTTP 502)

If your app failed to start up, a 502 status is returned with a page displaying
the app's crashlog.  Use the backtrace to locate the problem (typically a
missing gem, or a bad line in your config somewhere) and push a fix.

Note that while your app is crashed, you can still run rake tasks via
`heroku rake`, but console commands are not possible.

### Other errors

Error codes other than a 503 points to a problem within your application. Check
your logs and/or exception monitoring service for info on what went wrong.
