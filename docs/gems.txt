Managing Gems
=============

Ruby gems can be installed on Heroku via the Heroku gem manifest or [Gem Bundler](http://github.com/wycats/bundler).  Both are supported, but it it is recommended you only use one in your app in order to avoid confusion.  Bundler is an emerging community standard currently in beta and under active development.  

Heroku gem manifest
-------------------

The preferred method for specifying your gem dependencies is the Heroku gems
manifest, which is a `.gems` file in the root of your app.  When a new version
of the app is pushed to Heroku, any changes to the `.gems` file are detected
and new gems are installed along with their dependencies.

### System gems

All apps deployed to Heroku have access to a number of gems installed as part of
the [base platform](technologies). See [installed-gems.heroku.com](http://installed-gems.heroku.com)
for a comprehensive listing.

Gems installed as part of your application override Heroku system gems.

### Creating a gem manifest file

The gems manifest is a simple text file that includes information about each of
the gems required by an application. Each entry in the manifest includes a
mandatory gem name along with optional `version` and `source` options.  The
following is an example `.gems` manifest file that includes two gems:

    hpricot --version '>= 0.2' --source code.whytheluckystiff.net
    dm-core --version 0.9.10

Each line of the `.gems` file includes the following:

 * The name of the gem, as would be specified on the `gem install`
   command line.

 * An optional gem version specifier. This can be a basic version
   number like `"0.1.2"` or an advanced version specifier with comparison
   constraints like `">= 0.1.2"` (see
   [Specifying Versions](http://www.rubygems.org/read/chapter/16) in the
   RubyGems manual for more information). When no explicit version is specified,
   the most recent version of the gem is installed.

 * An optional gem repository source URL, like `gems.rubyforge.org`,
   `gems.github.com`, or `gems.mycustomrepo.com`. The `gems.rubyforge.org` repository
   is always included as the last source. Multiple `--source` arguments
   may be provided for cases where dependencies cross multiple repositories.

**TIP:** The `--version` and `--source` options have short forms just like the
`gem` command; use `-v` and `-s`, respectively.

### Deploying gem changes

When a `.gems` manifest file is added or modified, it must be committed to the
app's git repository and pushed to Heroku for changes to take effect. The actual
gem install process occurs during the `git push` operation.

The following example adds a `.gems` file to the app's git repository, commits
it, and pushes to the remote heroku repository:

    $ git add .gems
    $ git commit -m 'added gems manifest file'
    $ git push heroku
    Counting objects: 4, done.
    Compressing objects: 100% (3/3), done.
    Writing objects: 100% (3/3), 356 bytes, done.
    Total 3 (delta 1), reused 0 (delta 0)

    -----> Heroku receiving push

    -----> Installing gem hpricot >= 0.2 from http://code.whytheluckystiff.net
           Building native extensions.  This could take a while...
           Successfully installed hpricot-0.6
           1 gem installed

    -----> Installing gem dm-core 0.9.10 from http://gems.rubyforge.org
           Successfully installed addressable-2.0.2
           Successfully installed extlib-0.9.10
           Successfully installed data_objects-0.9.11
           Successfully installed dm-core-0.9.10
           4 gems installed

    -----> Rails app detected
           Compiled slug size is 4.3MB
    -----> Launching.............. done
           App deployed to Heroku

    To git@heroku.com:vivid-moon-60.git
       91425e3..fe10e87  master -> master

The push is aborted if the gem manifest is invalid or a gem fails to install,
ensuring that an application is not deployed in an inconsistent state.

Gem Bundler
-----------

Gem Bundler is the default gem manager for Rails 3, and can be used with any Ruby project as it has no dependency on framework.  To use, install bundler:

    $ sudo gem install bundler

Create a file named Gemfile in the root of your app specifying what gems are required to run it:

    {ruby}
    source :gemcutter
    gem 'sinatra', '0.9.4'

The Gemfile should be added to the git repository since it is part of the app. You should also add the .bundle directory to your gitignore file.  Once you have added the Gemfile, it makes it easy for other developers to get their environment ready to run the app:

    $ bundle install

This will ensure all gems specified on Gemfile, together with their dependencies, are available for your application.

Heroku also uses that file to resolve and install your application dependencies automatically. All you need to do is to push it:

    -----> Heroku receiving push
    -----> Gemfile detected, running Bundler
           Unresolved dependencies detected; Installing...
           Fetching source index from http://gemcutter.org
           Resolving dependencies
           Installing mime-types (1.16) from rubygems repository at http://gemcutter.org 
           Installing rack (1.1.0) from rubygems repository at http://gemcutter.org 
           Installing sinatra (0.9.4) from rubygems repository at http://gemcutter.org 
           Your bundle is complete!
           Locking environment

### Using Bundler from Rails 3

Rails 3 is built on top of Bundler. That means there is no setup needed, all gems specified on the Gemfile are ready for use on your app.

### Using Bundler from Rails 2.3.5

Follow the instructions in this [gist](http://gist.github.com/302406).  After you have added the code to your application, run

    $ bundle install
    $ bundle lock
    
And your app should now be using Gembundler.

### Using Bundler from Sinatra or any Rack app

To use gems from your bundler environment under Sinatra or other non-Rails framework, add the following to the top of your app:

    {ruby}
    begin
      # Require the preresolved locked set of gems.
      require File.expand_path('../.bundle/environment', __FILE__)
    rescue LoadError
      # Fallback on doing the resolve at runtime.
      require "rubygems"
      require "bundler"
      Bundler.setup
    end

### Bundle everything

The recommended use of gem bundler is to bundle absolutely every gem your app depends upon.  This includes your framework (Rails, Sinatra, etc). This doesn't add anything to your repository size if you've gitignored the vendored gems directory.

Bundling Rails and other dependencies does increase your slug size by a few megabytes.  Increased slug size is a worthwhile tradeoff for vastly simplified dependency management, as well as the flexibility of being able to use any version of Rails you wish.

### Migrating from 0.8

Bundler 0.9 brought several changes to the Bundler API and philosophy.

[This post on Yehuda's blog](http://yehudakatz.com/2010/02/01/bundler-0-9-heading-toward-1-0/) enumerates most of the differences, while the [Gem Bundler readme](http://github.com/carlhuda/bundler) describes what was deprecated on the previous API.

### Bundler groups

Heroku currently doesn't support gemfile groups.  We are working with the bundler team to support this feature shortly.

### Further reading

* [Nick Quaranto: Gem Bundler is the Future](http://litanyagainstfear.com/blog/2009/10/14/gem-bundler-is-the-future/)
* [Gem Bundler readme](http://github.com/carlhuda/bundler)
