# Using RhoMobile Javascript API's 

RhoMobile applications support access to device, system and framework capabilities through a common API set whether you are building Rhodes, RhoElements or RhoMobile enabled web apps. In order to use these api's your application pages must have access to the `rhoapi-modules.js` file. This Javascript library will provide all API access under the `Rho` set of classes.

## Enabling RhoMobile API's
When building a native RhoMobile application, the `rhoapi-modules.js` file is automatically added to the application's `\public\api` folder. You will see this file after installing the application onto the device or can access it when building the application for [RhoSimulator](/guide/rhosimulator). When using [RhoStudio's applicatiom generator](/guide/creating_a_project#creating-a-project-with-rhostudio), the file is automatically added to the `layout.erb` file which is used for all of the default views.

	:::html
	<script type="text/javascript" charset="utf-8" src="/public/api/rhoapi-modules.js"></script>

### Adding RhoMobile JS Library to your Web App
If you are using a RhoMobile application or the RhoElements Shared Runtime to access web pages on your webserver, you can copy the generated `rhoapi-modules.js` from a dummy RhoMobile project by running it for RhoSimulator:

* Launch RhoStudio
* Create a blank project using the application generator
* Modify the build.yml file to add device capabilities or RhoElements API access
* Build and run the project for RhoSimulator
* The rhoapi-modules.js file can now be found in the `[project folder]\public\api` folder

## Using your own objects
Some API classes support instance objects. This allows you to maintain your own objects and assign different properties to them.

In the followin example we want to save a reference to the front facing camera of the device so that we can manipulate the front facinf camera properties seperate from the rear-facing camera:
	
	:::javascript
	var desiredCamera;
	Rho.Camera.enumerate(function (e)
		{
			if (e.type == Rho.Camera.FRONT_TYPE)
	desiredCamera = e;
	});

We can then reference instance methods on that object

	:::javascript
	var cameraProperties =
		{desiredWidth:1024, desiredHeight:768};

	desiredCamera.take_picture(cameraProperties,
		fnHandlePicture(e));


## Setting propeties
There are a few different ways you can set properties. 

### Using the default instance
One way is to use the default instance of the API class. This will change the property of the object in a global sense until it is changed again (or the application is exited):

	:::javascript
	Rho.Class.Property = value;

For example the following snippet will turn of the `illuminationMode` for the default Barcode instance.
	
	:::javascript
	Rho.Barcode.illuminationMode='alwaysOff';

### Using special class methods
You can also use special class methods to set a property (as long as the class supports this method):

	:::javascript
	Rho.Barcode.setProperty('illuminationMode','alwaysOff');

You can also use a special class method to set multiple properties in one line of code (as long as the class supports this method):

	:::javascript
	// An object of propertyName:value is passed into the setProperties method
	Rho.Barcode.setProperties({ illuminationMode:'alwaysOff' , code128:'enabled'});

### With another method
Some methods support passing in an `propertyMap` as a parameter to a method. Like with the `setProperties` method, you would pass in an object of multiple propertyName:propertyValue

	:::javascript
	// Enable the default instance of Barcode with code128 enabled and illuminationMode off
	// the first parameter of this method is a propertyMap
	Rho.Barcode.enable({ illuminationMode:'alwaysOff' , code128:'enabled'}, bchandler());

**NOTE: In the API reference, when a parameter is of type propertyMap, all possible values are not shown in the documentation. However you may use any non read-only property listed for that object class.**

## Getting properties
There are a few ways to get an object's property values:

### Reading values synchronously
The following examples use a synchronous method that will be blocking.

The following example uses the `getProperty` class method. This method may not be available on all APIs.
	
	:::javascript
	var iMode = Rho.Barcode.getProperty('illuminationMode');

You can use the `getProperties` method for a list of propeties you wish to know about. An array of property names is passed into this method

	:::javascript
	// An object is returned by the getProperties method
	var settingsObj = Rho.Barcode.getProperties(['illuminationMode' ,'code128']);

	// The object properties will be the list of properties used
	if (settingsObj.illuminationMode == 'alwaysOff')...

You can also use the `getAllProperties` method to get all properties of an object	

	:::javascript
	var settingsObj = Rho.Barcode.getAllProperties();

**NOTE: Some API's like Barcode have many properties and there may be an undesirable performance hit for reading all properties available. Use this method sparingly.**

### Reading values Asynchronously
There are a few ways you can read properties in non-blocking asynhronously way by specifying a callback:

The following code snippet uses a self-describing autonomous function that will execute when the callback is executed

	:::javascript
	Barcode.getAllProperties(function(e)
	{
		alert(e.code128);  
	});

The following code snippet also uses a self-describing anonymous function that will execute when the callback is executed. This time we are also passing in other parameters

	:::javascript
	Barcode.getProperties([“autoEnter”,”code128”], 
	function (e)
	{
			alert(e.code128);
	});

**NOTE: For methods that support callbacks, the callback function will always be the last parameter of the method**

The following code snippet uses a function name for the callback instead of an anonymous function

	:::javascript
	Barcode.getAllProperties(fnPropertyPerser(e));

## Handling callbacks
Some methods will support a callback for returning information in an unblocking aysnchronous way. This will be indicated in the documentation by a parameter named `callback`

	:::javascript
	Barcode.take(HASH propertyMap, HASH callback)

The callback parameter will either be marked as <span class="label label-info">Optional</span> or marked as <span class="label label-warning">Mandatory</span>

Be sure to check the type of object the callback will be returning as well as the list of available callback parameters for each method. Typically the callback will return an object with a pre-defined set of objects that can be access for information.

### Callback as anonymous function
The following code snippet takes a picture from the device's camera and will run the anonymous function 	

	:::javascript
	// The documentation will list the callback type as well as callback parameters that are available
	Rho.Camera.takePicture(...,function(e){
	      alert(e.status);
	};);


### Callback as a javascript function
The following code snippet takes a picture from the device's camera and then calls another javascript function mycallbackhandler:
	
	:::javascript
	Rho.Camera.takePicture(..., mycallbackHandler());

	function mycallbackHandler(params)
	{
	// The documentation will list the callback type as well as callback parameters that are available
			alert(params.status);
	}

### Callback as a ruby controller method
You may want the callback to return to a ruby controller method or a particular view. For example when a picture is taken you may want to store an object and display a view showing all images captured. Recall that accessing RhoMobile ruby controller methods/views is simply using a url string

	:::javascript
	Rho.Camera.takePicture(...,'/Images/imageTakeHandler');

	:::ruby
	def imageTakeHandler
		#callback object will be in params object

		# some code to same image in database

		render :action => :list
	end

