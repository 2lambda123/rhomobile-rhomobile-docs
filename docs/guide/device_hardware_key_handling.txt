# Device Hardware Key Handling

## Notification

### What is Notification

[Notification](../api/Notification) is the means of informing the user that some event has occurred that requires their attention. For example, it could be the arrival of a Email/SMS or a alarm clock going off. A notification could be in form of a popup, a sound played over the device speaker or using a hardware capability of the device or a combination of these.

### The types of Notification

#### Audio file

You can playback a MP3 or WAV audio file if the device supports it.

Ruby syntax:
    :::ruby
    Rho::Notification.playFile('/sdcard/media/ringtone.mp3')
    
JavaScript syntax:
    :::javascript
    Rho.Notification.playFile("/sdcard/media/ringtone.mp3");

#### Beep

If the device is equipped with a hardware beeper, it can be made to sound at a specified frequency, volume and duration

Ruby syntax:
    :::ruby
    beeperProps = Hash.new
    beeperProps['frequency'] = 8000
    beeperProps['volume'] = 3
    beeperProps['duration'] = 1000
    Rho::Notification.beep(beeperProps)
    
JavaScript syntax:
    :::javascript
    Rho.Notification.beep({ frequency: 8000, volume: 3, duration: 1000 });

#### Vibrate

The device can be made to vibrate for a specified duration

Ruby syntax:
    :::ruby
    Rho::Notification.vibrate(1000)
    
JavaScript syntax:
    :::javascript
    Rho.Notification.vibrate(1000);

#### LED

A device might have one or more LEDs on it. The can be controlled via the [LED](../api/Notification.Led) API

##### LED On/Off

A LED on the device can be turned "On" or "Off" as required

Ruby syntax:
    :::ruby
    # get the list of LEDs available on the device
    $leds = Rho::Notification::Led.enumerate
    
    # turn one of the LEDs ON and then OFF
    $leds[0].extinguish
    $leds[0].illuminate
    
JavaScript syntax:
    :::javascript
    // get the list of LEDs available on the device
    var leds = Rho::Notification::Led.enumerate();
    
    // turn one of the LEDs ON and then OFF
    leds[0].extinguish();
    leds[0].illuminate();

##### LED Flashing

A LED on the device can be made to cycle "On" and "Off" a specified number of times

Ruby syntax:
    :::ruby
    # get the list of LEDs available on the device
    $leds = Rho::Notification::Led.enumerate
    
    # flash one of the LEDs
    ledProps = Hash.new
    ledProps['onDuration'] = 1000
    ledProps['offDuration'] = 500
    ledProps['numberOfCycles'] = 10
    $leds[0].flash(ledProps)
    
JavaScript syntax:
    :::javascript
    // get the list of LEDs available on the device
    var leds = Rho::Notification::Led.enumerate();
    
    // flash one of the LEDs
    leds[0].flash({ onDuration: 1000, offDuration: 500, numberOfCycles: 10 });

#### Popup

You can bring the application to the foreground and show a message in a popup window. The message can be passed as a string or a hash. The popup window closes after you click on the button or you can close it by using the `hidePopup` method

Ruby syntax:
    :::ruby
    # simple message string
    Rho::Notification.showPopup('Hello!!!')
    
    # custom tite and icon with the message string
    msgProps = Hash.new
    msgProps['message'] = 'Hello!!!'
    msgProps['title'] = 'Greeting';
    msgProps['icon'] = '/sdcard/images/icon.png';
    Rho::Notification.showPopup(msgProps)
    
    # hide the current popup
    Rho::Notification.hidePopup()
    
JavaScript syntax:
    :::javascript
    // simple message string
    Rho.Notification.showPopup("Hello!!!");
    
    // custom tite and icon with the message string
    Rho.Notification.showPopup({ message: "Hello!!!", title: "Greeting", icon: "/sdcard/images/icon.png" })
    
    // hide the current popup
    Rho.Notification.hidePopup();

#### Status message

You can display a window containing a status message. The window closes after the user clicks on its hide button.

Ruby syntax:
    :::ruby
    Rho::Notification.showStatus('The Title', 'This is the status message', 'Close')
    
JavaScript syntax:
    :::javascript
    Rho.Notification.showStatus("The Title", "This is the status message", "Close");

### Example scenarios for using Notification

#### In a email/messaging/newsfeed/twitter or similar type of application

* Use the `Beep` and/or `Vibrate` ONCE for notifying the user immediately on the arrival of a new message.
* Use a flashing `LED` to serve as a reminder to the user about the message after the initial `Beep`/`Vibrate` notification till the user views/acknowledges the message.

#### Alarm clock or countdown timer

* Use a long `Beep` and/or `Vibrate` till user stops/cancels the alarm/timer.

### Best practices

* `Popup` notifications can be annoying to the user if used frequently, so use dont overuse them.
* The `Beep` and `Vibrate` notifications can be annoying to the user and others around them if used frequently or for prolonged durations, so use dont overuse them.
* `LED` notification can be made to blink for a reasonably long time (like 1 hour after the event) unless it is cancelled by the user

### Related reading

* The [Notification API reference](../api/Notification) has all the details on the parameters applicable to each notification type.
* The [LED Notification API reference](../api/Notification.Led) has all the details on the parameters applicable to the LED notification type.

## Keylight

### What is Keylight

[Keylight](../rhoelements/Keylight) refers to the keyboard backlight functionality. You can turn On/Off the keyboard backlight as well as setting the intensity of the backlight.

NOTE: this functionality only applies to devices with hardware keyboards

### How to use Keylight

In the below example, we turn on the backlight and set the intensity to 3.

In Ruby, we can do this as follows:

    :::ruby
    Rho::Keylight.on
    Rho::Keylight.intensity = 3
    
The equivalent Javascript example would be

    :::javascript    
    Rho.Keylight.on();
    Rho.Keylight.intensity = 3;

### Example scenarios for using Keylight

* turn backlight On/Off in a cyclic manner as a form of Notification
* reduce/increase backlight intensity based on time of day or ambient light conditions.

### Related reading

* The [Keylight API reference](../rhoelements/Keylight) has the details on the parameters applicable to each notification type.
