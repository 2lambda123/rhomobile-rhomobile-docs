# Interfacing with Bluetooth Devices

You can use the Bluetooth API to create serial data connections between the device your application is running on and another bluetooth enabled device.

The other device could be:

* Phone or Tablet
* External GPS device
* Printer
* Barcode Scanner

## Prerequisite

Before you can make use of Bluetooth in your application, you need to include the `bluetooth` capability in your `build.yml`

    :::yaml
    capabilities:
        - bluetooth

## Bluetooth support limitations

* Only serial data connection or `Serial Port Profile` (SPP) is supported.
* The devices need to be paired before making connection on all platforms except iOS.
* Only one connection session can be used at a time. If you want to create another session, you have to close your current session.
* Multicasting is not supported.
* On iOS, you can only connect to another device running iOS or an accessory that has been approved by Apple.
* You can change device name only on iOS and Android platforms - use system settings on others platforms.

## Checking if Bluetooth is available

To check if Bluetooth is available on the device, use the `BluetoothManager.is_bluetooth_available` method.

Ruby syntax:
    :::ruby
    has_bluetooth = Rho::BluetoothManager.is_bluetooth_available
    if has_bluetooth
        # make use of Bluetooth
    else
        # do something like informing the user or disabling features
    end

JavaScript syntax:
    :::javascript
    var has_bluetooth = Rho.BluetoothManager.is_bluetooth_available();
    if (has_bluetooth) {
        // make use of Bluetooth
    } else {
        // do something like informing the user or disabling features
    }

## Creating a session

The first step to creating a Bluetooth connection is to create a session. There are two ways to do this, with the UI provided by the platform or without a UI.

### Creating session with UI

To create a session using the platform provided UI use the `BluetoothManager.create_session` method passing it the required role and a callback that will receive the result.

#### Making outgoing/client connection

If you want to make an outgoing connection to another device, use the role `BluetoothManager::ROLE_CLIENT`. The name of the remote device that the user selected using the platform UI will be returned via `connected_device_name` in the callback parameters.

Ruby syntax:
    :::ruby
    Rho::BluetoothManager.create_session(
                            Rho::BluetoothManager::ROLE_CLIENT, 
                            url_for(:action => :create_session_callback))

JavaScript syntax:
    :::javascript
    Rho.BluetoothManager.create_session(
                            Rho.BluetoothManager.ROLE_CLIENT, 
                            create_session_callback);

#### Waiting for incoming/server connections

If you want to act as a server and receive connections from other devices, use the role `BluetoothManager::ROLE_SERVER`. The name of the remote device that connected to your application will be available via `connected_device_name` in the callback parameters.

Ruby syntax:
    :::ruby
    Rho::BluetoothManager.create_session(
                            Rho::BluetoothManager::ROLE_SERVER, 
                            url_for(:action => :create_session_callback))

JavaScript syntax:
    :::javascript
    Rho.BluetoothManager.create_session(
                            Rho.BluetoothManager.ROLE_SERVER,
                            create_session_callback);

### Creating session without UI

#### Making outgoing/client connection

If you want to make an outgoing connection to another device without the user selecting the remote device name from the platform UI, use the `create_client_connection_to_device` method.

Ruby syntax:
    :::ruby
    Rho::BluetoothManager.create_client_connection_to_device(
                            remote_device_name, 
                            url_for(:action => :create_session_callback))

JavaScript syntax:
    :::javascript
    Rho.BluetoothManager.create_client_connection_to_device(
                            remote_device_name, 
                            create_session_callback);

#### Waiting for incoming/server connections

If you want to act as a server and receive connections from other devices, use the `create_server_and_wait_for_connection` method. The name of the remote device that connected to your application will be available via `connected_device_name` in the callback parameters.

Ruby syntax:
    :::ruby
    Rho::BluetoothManager.create_server_and_wait_for_connection(
                            url_for(:action => :create_session_callback))

JavaScript syntax:
    :::javascript
    Rho.BluetoothManager.create_server_and_wait_for_connection(
                            create_session_callback);

## Connection callback

The connection callback parameters contain the result of the connection attempt and if the connection is successful, the name of the remote device.

Here are the callback parameters:

* `status` 
    * `OK` - connection was successful
    * `ERROR` - connection failed
    * `CANCEL` - user cancelled the connection
* `connected_device_name` - the name of the remote device connected via Bluetooth

Ruby syntax:
    :::ruby
    def create_session_callback
        if @params['status'] == Rho::BluetoothManager::OK
            # store the name of the remote device for later use
            $connected_device = @params['connected_device_name']
            
            # other steps
        end
    end     

JavaScript syntax:
    :::javascript
    function create_session_callback(params) {
        if (params['status'] == Rho.BluetoothManager.OK) {
            // store the name of the remote device for later use
            connected_device = params['connected_device_name'];
            
            // other steps
        }
    }

## Session callback

After successfully connecting to a device and getting its name you have to setup a session callback using  `BluetoothSession.set_callback` method to process incoming session events from the connected device (data received) or event related to this session (disconnect, errors).

Ruby syntax:
    :::ruby
    Rho::BluetoothSession.set_callback($connected_device, url_for(:action => :session_callback))
    
    def session_callback
        if @params['event_type'] == Rho::BluetoothSession::SESSION_INPUT_DATA_RECEIVED
            # read incoming data
        elsif @params['event_type'] == Rho::BluetoothSession::SESSION_DISCONNECT
            # process connection close
        else
            # process connection error
        end
    end    

JavaScript syntax:
    :::javascript
    Rho.BluetoothSession.set_callback(connected_device, session_callback);

    function session_callback(params) {
        if (params['event_type'] == Rho.BluetoothSession.SESSION_INPUT_DATA_RECEIVED) {
            // read incoming data
        } else if (params['event_type'] == Rho.BluetoothSession.SESSION_DISCONNECT) {
            // process connection close
        } else {
            // process connection error
        }
    }

## Writing data

To write data to the remote device use the `BluetoothSession.write` or `BluetoothSession.write_string` methods passing the remote device name for the session.

Ruby syntax:
    :::ruby
    # write an array of bytes
    Rho::BluetoothSession.write($connected_device, bytes)

    # write a string
    Rho::BluetoothSession.write_string($connected_device, str)

JavaScript syntax:
    :::javascript
    // write an array of bytes
    Rho::BluetoothSession.write(connected_device, bytes);

    // write a string
    Rho.BluetoothSession.write_string(connected_device, str);
    
## Reading data

To read data from the remote device use the `BluetoothSession.read` or `BluetoothSession.read_string` methods passing the remote device name for the session. Typically you will be invoking this method in response to event type `SESSION_INPUT_DATA_RECEIVED` in the session callback.

Ruby syntax:
    :::ruby
    # read an array of bytes
    bytes = Rho::BluetoothSession.read($connected_device)
    
    # loop and read all incoming strings
    while Rho::BluetoothSession.get_status($connected_device) > 0
        str = Rho::BluetoothSession.read_string($connected_device)
        # process string
    end

JavaScript syntax:
    :::javascript
    // read an array of bytes
    var bytes = Rho.BluetoothSession.read(connected_device);
    
    // loop and read all incoming strings
    while (Rho.BluetoothSession.get_status(connected_device) > 0) {
        var str = Rho::BluetoothSession.read_string(connected_device);
        // process string
    }

## Disconnecting

To disconnect from a device, use the `BluetoothSession.disconnect` method passing the remote device name for the session.

Ruby syntax:
    :::ruby
    Rho::BluetoothSession.disconnect($connected_device)

JavaScript syntax:
    :::javascript
    Rho.BluetoothSession.disconnect(connected_device);

## Example application

You can find a complete example of using Bluetooth API in the [BluetoothChat](http://github.com/rhomobile/rhodes-system-api-samples/tree/master/app/BluetoothChat/) demo application. In this example you can see how to exchange text messages between two different devices. You also can use this example for connect to external Bluetooth device (external GPS device for example) or PC or Mac (use terminal to see and send messages).

## Related reading

* The [BluetoothManager API reference](../rhodesapi/bluetoothmanager-api)
* The [BluetoothSession API reference](../rhodesapi/bluetoothsession-api)
