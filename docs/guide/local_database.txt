# Connecting to the local database and using Rhom

## What is Rhom?

Rhom is a database object mapper or [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping) for RhoMobile. It provides a simple but powerful high level interface to use a local (on-device) SQLite database in terms of objects, and works hand in hand with [RhoConnectClient](../api/RhoConnectClient) to enable two-way synchronization between your application and a RhoConnect server.

One of its main benefits is that, instead of having to write SELECT and UPDATE statements by hand, you can carry out actions in your database by getting and setting properties on model objects.

Without Rhom, you would issue SQL statements to the database:

    :::sql
    update product set price=119,brand='Motorola' where object='12345'

With Rhom you can achieve the same result with:
    :::javascript
    product.updateAttibutes({price: 119, brand: "Motorola"});

Object deletion in SQL:

    :::sql
    delete from product where object='12345'

Object deletion with Rhom:

    :::javascript
    product.destroy();


## Creating a Model

The first step in order to use Rhom is to create a model class with the required attributes.

There are two types of models available: "property bag" and "fixed schema"; both offer the same functionality but differ in how the data is stored internally.

### Property Bag Model

In a property bag model, all data is stored in a single table using the object-attribute-value pattern also referred to as the [Entity-attribute-value model](http://en.wikipedia.org/wiki/Entity-attribute-value_model).

#### Advantages
* Simple to use, it doesnâ€™t require specifying attributes
* Data migrations are not necessary
* Attributes can be added or removed without modifying the database schema

#### Disadvantages
* For some applications, the database size may be significantly larger than fixed schema. This is because each attribute is indexed for fast lookup
* Sync process may be slightly slower because inserts are performed at attribute level

To create a property bag model, simply use the `rhodes` command to generate a new model with some attributes

    :::term
    $ rhodes model user name,email
    
This will generate a file called `user.rb` which looks like:

    :::ruby
    class User
        include Rhom::PropertyBag

        # Uncomment the following line to enable sync with User.
        # enable :sync

        #add model specific code here
    end
        
There are several features you can enable or disable in the model, below is a complete list:

    :::ruby
    class User
        include Rhom::PropertyBag

        # rhoconnect settings
        # Enable sync for this model.
        # Default is disabled.
        enable :sync 

        # Set the type of sync this model
        # will use (default :incremental).
        # Set to :bulk_only to disable incremental
        # sync and only use bulk sync.
        set :sync_type, :bulk_only 

        # Set the sync priority for this model.
        # 1000 is default, set to lower number
        # for a higher priority.
        set :sync_priority, 1     

        # Instruct Rhom to send all attributes
        # to RhoConnect when an object is updated.
        # Default is disabled, only changed attributes
        # are sent.
        enable :full_update 

        # RhoConnect provides a simple way to keep data out of redis. 
        # If you have sensitive data that you do not want saved in redis, 
        # add the pass_through option in settings/settings.yml for each source.
        # Add pass_through to client model definition
        enable :pass_through 

        # model settings

        # Define how data is partitioned for this model.
        # For synced models default is :user. 
        # For non-synced models default is :local
        # If you have an :app partition
        # for your RhoConnect source adapter and use bulk sync,
        # set this to :app also.
        set :partition, :app

        # Define blob attributes for the model.
        # :blob         Declare property as a blob type
        #
        # :overwrite    (optional) Overwrite client copy 
        #               of blob with new copy from server.
        #               This is useful when RhoConnect modifies
        #               images sent from Rhodes, for example 
        #               zooming or cropping.
        property :image_url, :blob, :overwrite

        # You can define your own properties also
        property :my_custom_property, :custom_type
    end

### Fixed Schema Model

In a fixed schema model, each model has a separate database table and each attribute exists as a column in the table. In this sense, fixed schema models are similar to traditional relational tables.

#### Advantages
* Smaller database size, indexes can be specified only on specific attributes.
* Sync process may perform faster because whole objects are inserted at a time.

#### Disadvantages
* Schema changes must be handled with data migrations.
* Database performance may be slow unless you specify proper indexes.

Creating a fixed schema model involves an additional step to creating a property bag model. First, generate the model using the `rhodes` command:

    :::term
    $ rhodes model user name,email
    
Next, change the include statement in `user.rb` to `include Rhom::FixedSchema` and add the attributes:

    :::ruby
    class User
        include Rhom::FixedSchema

        # Uncomment the following line to enable sync with User.
        # enable :sync

        property :name, :string
        property :email, :string
    end

That's it!  Now your model is a fixed schema model, the table will be generated automatically for you when the application launches.

Below is a full list of options available to fixed schema models:

    :::ruby
    class User
        include Rhom::FixedSchema

        # rhoconnect settings
        # Enable sync for this model.
        # Default is disabled.
        enable :sync 

        # Set the type of sync this model
        # will use (default :incremental).
        # Set to :bulk_only to disable incremental
        # sync and only use bulk sync.
        set :sync_type, :bulk_only 

        # Set the sync priority for this model.
        # 1000 is default, set to lower number
        # for a higher priority.
        set :sync_priority, 1     

        # Instruct Rhom to send all attributes
        # to RhoConnect when an object is updated.
        # Default is disabled, only changed attributes
        # are sent.
        enable :full_update 

        # RhoConnect provides a simple way to keep data out of redis. 
        # If you have sensitive data that you do not want saved in redis, 
        # add the pass_through option in settings/settings.yml for each source.
        # Add pass_through to client model definition
        enable :pass_through 

        # model settings

        # Define how data is partitioned for this model.
        # Default is :user.  If you have an :app partition
        # for your RhoConnect source adapter and use bulk sync,
        # set this to :app also.
        set :partition, :app

        # Set the current version of the fixed schema.
        # Your application may use it for data migrations.
        set :schema_version, '1.0'

        # Define fixed schema attributes.
        property :name, :string
        property :email, :string

        # Define a named index on a set of attributes.
        # For example, this will create index for the name column.
        index :by_name, [:name] 

        # Define a unique named index on a set of attributes.
        # For example, this will create unique index for the email column.
        unique_index :by_email, [:email] 

        # Define blob attributes for the model.
        # :blob         Declare property as a blob type
        #
        # :overwrite    (optional) Overwrite client copy 
        #               of blob with new copy from server.
        #               This is useful when RhoConnect modifies
        #               images sent from Rhodes, for example 
        #               zooming or cropping.
        property :image_url, :blob, :overwrite

        # You can define your own properties also
        property :my_custom_property, :custom_type
    end

## JavaScript support

You can create models from JavaScript using the [ORM.addModel](../api/Orm#maddModel) method. This is quite different that using the Model Generator from RhoStudio or a Rake command. What this method does is define a class reference for your model so it is available to the rest of your application. When your application pages load, you must execute the `Rho.ORM.addModel` function for every model that you wish to define in your application.

    :::javascript
    // Models MUST be defined when your HTML pages load

    // You can either set a global reference 
    var userModel = Rho.ORM.addModel(function(model) {
        model.modelName('User');
        model.property('name','string');
        model.property('email','string');
        // optionally enable sync for rhoconnect applications
        // model.enable('sync');
        // optionally, define the model as fixed schema default is propertyBag
        // model.enable('fixedSchema');
    });

    // Or just define the model without a global reference
    Rho.ORM.addModel(function(model) {
        model.modelName('Product');
        model.property('name','string');
        model.property('qty','string');
    });


Once created, models can be retrieved using the `ORM.getModel` method.

    :::javascript
    var productModel = Rho.ORM.getModel('Product');

**NOTE: It is advised that you either use the Ruby or Javascript methods for handling model definition and access and not do this from <b>both</> languages. **

## Associations

Rhom does not support Ruby on Rails associations. However, Rhom has a `sync association` called `belongs_to` which you can use to trigger updates on sync-enabled models. This is useful where you have relationships between backend service objects.

For example, you can have a list of customers who are assigned to a sales person:

    :::ruby
    class Customer
      include Rhom::PropertyBag

      # Declare container model and attribute.
      belongs_to :salesrep_id, 'SalesRep'
    end

The value you must use as the identifier to link objects is the `object` property

    :::ruby
    def create
      @customer = Customer.new(@params['customer'])
      @customer.save

      sales_rep = SalesRep.find(...) # find the appropriate sales representative for new customers
      customer.salesrep_id = @sales_rep.object
      customer.save
      redirect :action => :index
    end

You can also define polymorphic sync associations, or sync associations across multiple classes.

Using array notation:
    
    :::ruby
    belongs_to :parent_id, ['Product', 'Case']

Or multiple declarations:

    :::ruby
    belongs_to :parent_id, 'Product'
    belongs_to :parent_id, 'Case'


If you are planning to use the bulk sync feature for your associated models, then you should take into consideration the
corresponding support on the RhoConnect Server side. See [RhoConnect Bulk Sync associations](../rhoconnect/bulk-sync#bulk-sync-associations).

## Freezed models
If you want to limit model attributes by specific list - you can 'freeze' model:

    :::ruby
    class Customer
        include Rhom::PropertyBag

        enable :sync

        set :freezed, true

        property :address, :string
        property :city, :string
        property :email, :string
    end

For such models if you try to set a property that has not been explicitly defined, you will get ArgumentError exception:

    :::ruby
    obj = Customer.new( :wrong_address => 'test') #will raise ArgumentError exception
    obj = Customer.create( :wrong_address => 'test') #will raise ArgumentError exception
    
    obj = Customer.new
    obj.wrong_address = 'test' #will raise ArgumentError exception
    
    obj = Customer.new
    obj.update_attributes(:wrong_address => 'test') #will raise ArgumentError exception

**NOTE: FixedSchema models are 'freezed' by default. This is only supported in Ruby models.**

## Data Migration (fixed schema only)

Data migrations are needed when your models or struture of your models change with new application versions. Rhom provides an application hook to migrate the data manually. You can also use this hook to run business logic related to updating the database. It may also be used to notify the user that a migration is in progress before starting lengthy database operations.

If you want to remove all local data when upgrading to new application version, change `app_db_version` in `rhoconfig.txt`. This will work for both Property Bag and Fixed Schema models.

If you want to retain existing data, you will not need any data migration for Property Bag models, since all attributes are dynamic. However for Fixed Schema models you will need to do some additional steps.

First you need to track the `:schema_version` in your model:

    :::ruby
    class Product
        include Rhom::FixedSchema

        set :schema_version, '1.1'
    end

Next, in your `application.rb` implement the `on_migrate_source(old_version, new_src)` method. This is called on application start if `:schema_version` has changed.

    :::ruby
    class AppApplication < Rho::RhoApplication
    
        # old_version     String containing old version value (i.e. '1.0')
        # new_src         Hash with source information:
        #                 'schema_version', 'name', 'schema'
        #                 new_src['schema']['sql'] contains new schema sql
        def on_migrate_source(old_version, new_src)
            # ... notify user about migration ...

            db = Rho::RHO.get_src_db(new_src['name'])
            db.execute_sql("ALTER TABLE #{new_src['name']} ADD COLUMN mytest VARCHAR DEFAULT null")

            true # we processed the migration ourselves, do not create the table automatically
        end
    end
    
**NOTE: When a schema changes, you can use ADD COLUMN but removing columns is not possible (this is a limitation in the underlying SQLite database engine). If your schema changes are significant and cannot be accomodated by merely adding new columns, you will need to perform a whole-table migration: create a new table with a temporary name, copy existing data to it, drop the old table and rename the new table**

Return `false` to run the custom sql specified by the new_src[â€˜schemaâ€™][â€˜sqlâ€™] string:    

    :::ruby
    def on_migrate_source(old_version, new_src)
        false # create table by source schema - useful only for non-synced models
    end

**NOTE: For sync sources, you cannot just recreate table without data copy. Because server will not send this data at sync time.**

## Adding new objects

Use the `create` method to create a new model object and save it to the database. 

NOTE: This is the fastest way to insert a single item into the database.

Ruby syntax:
    :::ruby
    user = User.create(
            :name => 'Alice', 
            :email => 'alice@example.com')

JavaScript syntax:
    :::javascript
    var user = userModel.create({
                name: 'Alice', 
                email: 'alice@example.com'});

You can also create the new model object without saving it automatically and then explicitly use the `save` method. This is useful when you want to update some of the object attributes before saving.

Ruby syntax:
    :::ruby
    user = User.new(:name => 'Alice')
    # update the object
    user.email = 'alice@example.com'
    user.save
  
JavaScript syntax:
    :::javascript
    var user = userModel.make({name: 'Alice'});
    // update the object
    user.email = 'alice@example.com';
    user.save();

## Retrieving objects

You can retrieve all objects for a model or only those matching given conditions using the `find` method.

### Getting all objects for a model 

You can retrieve all objects for a model using the `all` parameter. 

Ruby syntax:
    :::ruby
    users = User.find(:all)

JavaScript syntax:
    :::javascript
    var users = userModel.find('all');

### Finding objects matching conditions

You can retrieve all objects matching given conditions using the `conditions` parameter.

Ruby syntax:
    :::ruby
    users = User.find(
                :all, 
                :conditions => {:name => 'Alice'}
            )

JavaScript syntax:
    :::javascript
    var users = userModel.find(
                    'all', 
                    {
                        conditions: {name: 'Alice'}
                    }
                );

### Numeric field comparisons in property bag models

Because, internally, property bag models store all their values in the same column, this column is defined as `varchar`, which means that number comparisons do not work as you would expected. If you need to perform order comparisons on a numeric field in a property bag model, use CAST to convert the value to a number of the desired type:

    :::ruby
    @accts = Account.find(:all, 
        :conditions => { {:func=> 'CAST', :name=>'rating as INTEGER', :op=>'<'} => 3 } )
    #or using sql query:
    size = 3
    @accts = Account.find(:all, 
        :conditions => ["CAST(rating as INTEGER)< ?", "#{size}"], :select => ['rating'] )

### Ordering the objects

You can retrieve objects sorted by one or more attributes using the `order` and `orderdir` parameters.

Ruby syntax:
    :::ruby
    # order by one attribute
    users = User.find(
                :all, 
                :order => 'name', 
                :orderdir => 'DESC'
            )
    
    # order by multiple attributes
    users = User.find(
                :all, 
                :order => ['name', 'email'], 
                :orderdir => ['ASC', 'DESC']
            )

JavaScript syntax:
    :::javascript
    // order by one attribute
    var users = userModel.find(
                    'all', 
                    {
                        order: 'name', 
                        orderdir: 'DESC', 
                        conditions: {...} // JavaScript API requires conditions
                    }
                );
    
    // order by multiple attributes
    var users = userModel.find(
                    'all', 
                    {
                        order: ['name', 'email'], 
                        orderdir: ['ASC', 'DESC'], 
                        conditions: {...} // JavaScript API requires conditions
                    }
                );

In javascript, you can also sort with an user defined function.

    :::javascript
    // order by one attribute
    var users = userModel.find(
        'all',
        {
            orderFunction: function(a, b) { return a <= b }
        }
    ); 

    // order by multiple attributes
    var users = userModel.find(
        'all',
        {
            orderFunction: function(a, b) {
                    return a.name <= b.name && a.email <= b.email
                }
        }
    );

**NOTE: Whenever possible, use `order` instead of `orderFunction`. The database will sort objects faster than Javascript code.**

### Retrieving specific attributes

If, for a particular action, you do not need every attribute in an object, you can make your application faster by selecting only the specific attributes you need using the `select` parameter.

Ruby syntax:
    :::ruby
    users = User.find(
                :all, 
                :select => ['name']
            )

JavaScript syntax:
    :::javascript
    var users = userModel.find(
                    'all', 
                    {
                        select: ['name'],
                        conditions: {...} // JavaScript API requires conditions
                    }
                );

### Paginating results

NOTE: this section applies to Ruby only

You can pass `offset` and `perPage` parameters to `find` method to retrieve objects in chunks.

Ruby syntax:
    :::ruby
    # get first 10 records
    users = User.find(:all, :perPage => 10)
    
    # get records 21-40
    users = User.find(:all, :offset => 20, :perPage => 20)

For convenience, there is a `paginate` method which emulates Rails' classic pagination syntax. The default page size is 10.

You can use `:conditions`, `:order` and `select` parameters, similarly to the `find` method.

Ruby syntax:
    :::ruby
    # get first 10 records
    users = User.paginate(:page => 0)
    
    # get records 21-40
    users = User.paginate(:page => 1, :perPage => 20)

### Retrieving only the first object matching conditions

You can get only the first object matching given conditions using `first` instead of `all` when calling `find`.

Ruby syntax:
    :::ruby
    user = User.find(
                :first, 
                :conditions => {:name => 'Alice'}
            )

JavaScript syntax:
    :::javascript
    var user = userModel.find(
                    'first', 
                    {
                        conditions: {name: 'Alice'}
                    }
                );

### Using SQL queries directly

You can directly retrive model object(s) using SQL queries with the `findBySql` method. This method works only for fixed schema models.

Ruby syntax:
    :::ruby
    users = Rho::ORMModel.findBySql('SELECT * FROM User')

## Counting objects

You can get the number of objects matching given conditions using the `count` parameter with `find` method.

Ruby syntax:
    :::ruby
    count = User.find(
                :count, 
                :conditions => {:name => 'Alice'}
            )

JavaScript syntax:
    :::javascript
    var count = userModel.find(
                    'count', 
                    {
                        conditions: {name: 'Alice'}
                    }
                );

## Updating

You can update an objectâ€™s attributes and save it to the database using the `updateAttributes` method

NOTE: This is the fastest way to add or update item attributes.

Ruby syntax:
    :::ruby
    user = User.find(:first, :conditions => {:name => 'Alice'})
    user.update_attributes(
                :name => 'Bob', 
                :email => 'bob@example.com')

JavaScript syntax:
    :::javascript
    var user = userModel.find('first', {conditions: {name: 'Alice'});
    user.updateAttributes({
            name: 'Bob', 
            email: 'bob@example.com'});

## Deleting

### Deleting one object

To delete one model object use the `destroy` method on the object to be deleted.

Ruby syntax:
    :::ruby
    user = User.find(:first)
    user.destroy

JavaScript syntax:
    :::javascript
    var user = userModel.find('first');
    user.destroy();

### Delete multiple objects

To delete all objects for a model, or only those matching given conditions, use the `deleteAll` method.

Ruby syntax:
    :::ruby
    # delete all objects
    User.deleteAll()
    
    # delete only objects matching :conditions
    User.deleteAll(:conditions => {:name => 'Alice'})

JavaScript syntax:
    :::javascript
    // delete all objects
    userModel.deleteAll();
    
    // delete only objects matching :conditions
    userModel.deleteAll({conditions: {name: 'Alice'}})

## Transactions

Use transactions to group together database operations that must either succeed or fail as a group, without leaving any partially completed operations. You can combine any set of object/model operations like insert/update/delete under a transaction.


Ruby syntax:
    :::ruby
    db = Rho::Database.new
    db.startTransaction
    begin
        # do multiple operations
        User.create(:name => 'Alice', :email => 'alice@example.com')
        User.create(:name => 'Bob', :email => 'bob@example.com')
        
        # no errors, so commit all the changes
        db.commitTransaction
    rescue
        # on error rollback all changes
        db.rollbackTransaction
    end

JavaScript syntax:
    :::javascript
    // open 'app' partition
    var db = new Rho.Database(Rho.Application.databaseFilePath('app'),'app');
    db.startTransaction();
    try
    {
        // do multiple operations
        db.executeSql("update User set name=?, email=? where object=?",["Alice","alice@example.com","12345"]);
        db.executeSql("update User set name=?, email=? where object=?",["Bob","bob@example.com","67890"]);

        // no errors, so commit all the changes
        db.commitTransaction();
    }
    catch
    {
        // on error rollback all changes
        db.rollbackTransaction();
    }
    finally // always close every database connection you open
    {
        db.close();
    }

## Executing SQL

You can execute SQL statements directly on the database by using `Database.executeSql` method.

Ruby syntax:
    :::ruby
    begin
        db = Rho::Database.new(Rho::Application.databaseFilePath('app'),'app');
        result = db.executeSql('SELECT * FROM User') # result is an array of hashes, where each hash is a record
    ensure
        db.close
    end

JavaScript syntax:
    :::javascript
    try {


    var db = new Rho.Database(Rho.Application.databaseFilePath('app'),'app');
    var result = db.executeSql('SELECT * FROM User');  // result is an array of hashes, where each hash is a record
    } finally {
        db.close();
    }

You can execute a series of SQL statements in a single method call by using `Database.executeBatchSql` method.

Ruby syntax:
    :::ruby
    db.executeBatchSql("UPDATE User set valid=0; Update Account set active=0")

JavaScript syntax:
    :::javascript
    db.executeBatchSql("UPDATE User set valid=0; Update Account set active=0");

## Seeding the Database
If your application requires seeding some initial data, you can use [RhoUtils.load_offline_data](/rhodesapi/rhoutils-api#loadofflinedata).

For example, in the rhodes/spec/framework_spec, we use `load_offline_data` to seed the device database for each test:
    
    :::ruby
    Rho::RhoUtils.load_offline_data(
      ['client_info','object_values'], 'spec'
    )

In this example, there is a 'spec/fixtures' directory which contains a `client_info.txt` and `object_values.txt` pipe-delimited files.  These files are structured as follows:

`client_info.txt`:
<pre>
client_id|last_sync_success
67320d31-e42e-4156-af91-5d9bd7175b08|
</pre>

`object_values.txt`:
<pre>
source_name|attrib|object|value
Case|status|4900dc4c072c|New|
Case|assigned_user_id|4900dc4c072c|48fce5e9fb16|
Case|work_log|4900dc4c072c||
Case|priority|4900dc4c072c|High|
...
</pre>

**NOTE: The column names are always the first line of the file.**

## Importing and exporting the database

You can export local database partition with all its blob objects to zip archive. Also you can import previously exported partition.

[ORM.export](../api/Orm#mexport) returns a local path to created archive with database and blob objects.

[ORM.import](/rhodesapi/rhom-api#databaseimport) imports database and blob objects from zip archive, created with `database_export` call. If imported archive is inconsistent, or other failure will occur during import process, original database will be restored.

## Resetting database

You can use the following method for recovering the database from a bad or corrupt state or if the RhoConnect server returns errors.

### Delete all objects for given models.

Ruby syntax:
    :::ruby
    Rho::ORM.databaseFullResetEx(:models => ['User'], :reset_client_info => true, :reset_local_models => true)

JavaScript syntax:
    :::javascript
    Rho.ORM.databaseFullResetEx({'models': ['User'], 'reset_client_info': true, 'reset_local_models': true});


## Performance Tips
* Before testing your application for performance, set the log level in rhoconfig.txt to 3 in order to reduce logging to a minimum:

        MinSeverity = 3
    
* All database modification operations can be slow, especially on large databases. Optimize object modification - prepare data and call create / updateAttributes once instead of setting each property individually. This will result in fewer SQL statements being executed.
* Do not use sql conditions in Model.find, use Advanced Queries instead.
* Use Model.create to insert object into the database
* To insert/update multiple object/models use a database transaction. Be aware that the same transaction cannot span operations across different partitions.

        db = ::Rho::RHO.get_src_db('Model')
        db.start_transaction
        begin
          items.each do |item|
            # create hash of attribute/value pairs
            data = {
              :field1 => item['value1'], 
              :field2 => item['value2'] 
            } 
            # Creates a new Model object and saves it
            new_item = Model.create(data)
          end
         db.commit
        rescue
         db.rollback
        end

*NOTE: If ::Rho::RHO.get_src_db('Model') returns nil, it means that you never called this model's methods before (models are loaded on demand). If you experience this issue, include a call to 'require_source'

    :::ruby
    require_source 'Model'  

## Related reading

* [Database API reference](../api/Database)
* [ORM API reference](../api/Orm)
* [ORMModel API reference](../api/OrmModel)
