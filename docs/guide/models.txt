# Model generation

## What is a model?
Rhodes applications, in general, follow the [Model-View-Controller  ](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) (MVC) pattern. In Rhodes, a model can store information from two origins: 

* data created directly on the device
* data retrieved from a RhoConnect synchronization server

Each model contains attributes that it stores information about. For example, a `Product` model could have as attributes `name`, `brand`, `price`, etc. Applications will normally have one model for each entity they handle (`Customer`, `Product`, `Invoice`, `InvoiceLine`, `Order`, `LineItem`, etc).


## Adding a model to a Rhodes application

There are two ways to generate a model: one is using RhoStudio and the other is with the command-line generator. Under the hood, RhoStudio invokes the command-line tool, so both approaches are equivalent. Together with the model class itself, the generator will output a default set of views that you can customize as needed.


### Adding a Model from RhoStudio

To generate a model, right-click on the application project in the Project Explorer and select New -> RhoMobile model.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/menu-new-rhodes-model.png"/>

In the Model Information window, enter the name for your model: in this case, `Product`.

**NOTE: Do not use the following for model names: `Config, Settings, helpers, test, Client, Sync` or any built-in Ruby class name. It is also a good programming practice to avoid using generic names, such as `time` or `print`. Using descriptive names in your models will help you grow your application more easily in the future**

The other required piece of information is the list of attributes, which must be entered as a string with no spaces, each attribute separated by a comma: in this `Product` example, `name,brand,price,quantity,sku`.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/model-information.png"/>

After pressing the Finish button, you'll see the results of the RhoMobile model generator in the output console.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/rhodes-model-generator-output.png"/>


### Adding a Model from the command line

If you prefer to use the command line or another development environment instead of RhoStudio, the `rhodes` tool can be invoked manually.

	:::term
	Usage: rhodes generator_name [options] [args]
	
	Generate rhodes application
	
	Available generators
	    api                              Generate API sources from XML API file
	    api_test                         Generate megatest XML for API generator
	    app                              Generates a new rhodes application.
	    extension                        Adds native extension to Rhodes based application.
	    model                            Generates a new model for a rhodes application.
	    spec                             Adds spec framework to rhodes application.
	
	General options:
	    -p, --pretend                    Run, but do not make any changes.
	    -f, --force                      Overwrite files that already exist.
	    -s, --skip                       Skip files that already exist.
	    -d, --delete                     Delete files that have previously been generated with this generator.
		--no-color                   Don't colorize the output
	    -h, --help                       Show this message
		--debug                      Do not catch errors
	

To create the `Product` model with `name, brand, price, quantity` and `sku` as the attributes, switch to the root directory of your application (the one that contains `app` as a child) and run:

	:::term
	$ rhodes model Product name,brand,price,quantity,sku


### What a generated model consists of

Output from the model generator will contain the following files:

* app/Product/index.erb - the html view template to display the list of objects
* app/Product/edit.erb - the html view template to edit an object
* app/Product/new.erb - the html view template to supply values to create a new object
* app/Product/show.erb - the html view template to displays the selected object
* app/Product/product_controller.rb - contains the the business logic for the model, the basic CRUD actions: index, new, create, edit, update and delete.
* app/Product/product.rb - contains the Product model definition
* app/test/product_spec.rb - placeholder for Product test specs

You are free to update all these files to suit your application

**NOTE: Why does the `product.rb` file not mention the attributes at all? Rhodes provides two model storage schemes, called PropertyBag and FixedSchema. FixedSchema stores data for each model in its own database table, with one column per attribute, and requires the model to explicitly list the attributes it supports. PropertyBag stores everything in a single table and is more flexible: it determines the list of attributes dynamically at run time, the model does not need to declare them. The generator outputs PropertyBag models by default; that is why there is no mention of the attributes in the generated model file, PropertyBag does not require them. For a discussion of the benefits and drawbacks of each approach, see [Using the local database](../rhodes/rhom).**

## Adding more fields to an existing model

The list of attributes in a model can be updated as development progresses. If you are using the PropertyBag storage scheme (the default), the only thing you need to do is add the relevant code to the views (`index.erb`, `edit.erb`, `new.erb` and `show.erb`)  and Rhodes will take care of the rest. If you have switched to FixedSchema, however, you also need to add the appropriate lines in your model `.rb` file:

	:::ruby
	property :<property_name> :<data_type>
	
In our example `Product` model, for example, we could add

	:::ruby
	property :color, :string
	
The guide [Using the local database](../rhodes/rhom#fixed-schema) contains all the details on which data types are supported, as well as other ways to fine-tune data synchronization.


## Linking a model to a RhoConnect synchronization server

### What is RhoConnect
RhoConnect is the server-side part of RhoMobile Suite that connects your mobile application to external data sources. Whether your data comes from a relational database, NoSQL data store, RESTful web services or any other data source, RhoConnect bridges the gap between mobile clients and server resources. Using RhoConnect frees you from writing error-prone, hard to maintain synchronization code and takes care of all aspects of data sync.


### Integrating a mobile Rhodes application with RhoConnect
Once your application can store data about a particular model, enabling two-way synchronization with a RhoConnect server is a one-step process: there is only one line to change, in your model file (`product.rb` in our example), uncomment the line

	:::ruby
	enable :sync
	
As long as your RhoConnect server is properly configured, this is all that is required to benefit from automatic, two-way synchronization. See the [RhoConnect Tutorial](../rhoconnect/tutorial) for in-depth information about the benefits RhoConnect provides, as well as [Using the local database](../rhodes/rhom#fixed-schema) to find out how to tune data synchronization according to the needs of your application.


## Related reading: Using models to access the database
Models provide built-in methods to help in storing and retrieving data from the local (on-device) database. See sections [Rhom API](../rhodes/rhom#rhom-api) and [Advanced queries](../rhodes/rhom#advanced-queries) for more information.
