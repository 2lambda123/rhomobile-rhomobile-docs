Setting Up for RhoConnect Push on Client Application
===

Push notification support (receiving push notifications from the RhoConnect server/backend) is currently available for Android, Blackberry and iPhone.

## Configuring a Rhodes Application to Receive Push

Enable push in your rhodes application in build.yml.

	:::yaml
	capabilities:
	  - push
	  - vibrate #=> if you want to enable vibrate in your push messages

Set up your application [rhoconfig.txt](configuration#run-time-configuration) syncserver to point to your RhoConnect server:

	syncserver = 'http://<rhoconnect_server_url>/application'

## Registering a Push Callback in the Rhodes Application

To handle a push message from a Rhodes application, you must register push callback with the System `set_push_notification` method.

    :::ruby
    class AppApplication < Rho::RhoApplication
      def initialize
        super
        System.set_push_notification "/app/Push/push_callback", ""
      end
    end

Push callback is set up in the form of a local application URL and called as callback whether or not rho_callback=1 is specified in its parameters list.

The parameters trigger certain operations in the Rhodes client when the callback returns "rho_push". (When the callback returns an empty string, this automatic handling is not performed.) The operations are to show an alert, vibrate the device, play a sound, and perform a sync.

To have your Rhodes app automatically perform the operations listed in the push message, you can write the callback as follows.

    :::ruby
    def push_callback
      "rho_push"
    end

## Understanding the Rhodes Push Message Payload

From Rhodes 2.0.4 on, the callback push message parameters are in the form of a hash. This hash contains parameters and values for the operation to perform. If the parameter for that operation is not listed, the operation is not performed.

The hash payload may include the parameters of alert, do_sync, sound, and vibrate which perform operations that the client performs when it receives the PUSH message. Here is an example of a push message body with the parameter names and values. It will have a popup alert message of "some message", play a sound of alert.mp3, will vibrate the device, and will sync the product and customer sources.

    :::text
    alert=some message here&sound=alert.mp3&vibrate=2000&do_sync=product,customer

To sync all the sources with do_sync, the source name list would specified as 'all' in the ping call, instead of 'product,customer' as in this example.

The sound file should be included in the Rhodes application bundle in the `/public/alerts` folder.

## Setting up the Rhodes Client for iPhone, Android, and Blackberry

To set up your Rhodes client for push, refer to these links for your respective platforms.

* [Setting up iPhone Client for Push](/rhodes/device-caps#iphone-push-setup)
* [Setting up Android Client for Push](/rhodes/device-caps#android-push-setup)
* [Setting up Blackberry Client for Push](/rhodes/device-caps#blackberry-push-setup)

## Configuring a Rhodes Application to Receive Push with RhoConnect Push Service

RhoConnect Push Service is a separate process that will run on your machine and broker push messages between your RhoConnect server and registered Android and Windows Mobile/CE devices.

NOTE: You do not perform the setup steps in the Rhodes Device Capabilities chapter when you use the RhoConnect Server Push Service. That setup is for regular RhoConnect push, not for the RhoConnect Server Push Service.

### Installing the rhoconnect-push-service Runtime Apps

To use the RhoConnect Push Service in your client application, you must install the rhoconnect-push-service runtime app(s) on your mobile device.

On the Macintosh, the rhoconnect-push-service runtime apps for Android and for Windows Mobile are located in the Motorola RhoMobile Suite installation package, in a folder called rhoconnect-push-service.

On Windows, the rhoconnect-push-service runtime apps for Android and for Windows Mobile are located in the Motorola RhoMobile Suite installation, in a directory called rhoconnect-push-service.

If you are using an Android device, install `rhoconnect_push_service.apk` to your device.

If you are using a Windows Mobile or CE device, install the following runtime apps on your device.

* `rhoconnect-push-service.CAB`
* `NETCFv35.Messages.EN.wm.cab`
* `NETCFv35.Messages.EN.cab`

### Configuring rhoconfig.txt

In your client application `rhoconfig.txt` file, set the following options to configure your RhoConnect Push Service.

    syncserver = 'http://<hostname>:<port>/application'
    rhoconnect_push_server = 'http://<hostname>:<port>'
    rhoconnect_push_appname = 'someappname'

Next, your RhoConnect application should be running on a network that is accessible to your device. For example, you might have your RhoConnect application running on a LAN with IP 192.168.1.10, PORT 9292. Then make sure your device is connected to the same LAN and set up your application rhoconfig.txt syncserver as follows:

Here is an example of setting `rhoconfig.txt` for the RhoConnect Push Service. The URLs used for the RhoConnect Push Service (rhoconnect_push_server) and the RhoConnect server running on the same host.

    syncserver = 'http://192.168.1.10:9292/application'
  	rhoconnect_push_server = 'http://192.168.1.10:8675'
  	rhoconnect_push_appname = 'someappname'

### Configuring build.yml

When you configure your application `build.yml` file for RhoConnect Server Push Service, you do not add `push` under `capabilities` for RhoConnect Server Push Service. Instead, you add rhoconnect-push to extensions.

	extensions: ["rhoconnect-push"]

You can still enable vibrate in `build.yml` capabilities.

	capabilities:
	  - vibrate #=> if you want to enable vibrate in your push messages

### Registering a Push Callback in your Client Application with RhoConnect Server Push Service

To handle a RhoConnect Server Push Service push message from your Rhodes/RhoElements application, you must register callback with the set_push_notification method.

To get push messages from RhoConnect server, the user must be logged into the RhoConnect server.

In application.rb:

	:::ruby
  if SyncEngine::logged_in > 0
    System.set_push_notification("/app/Settings/your_rhoconnect_callback",'')
  end

[Understanding the Rhodes Push Message Payload](/rhoconnect/push-client-setup#understanding-the-rhodes-push-message-payload) shows the structure of the hash for the callback push message. You can write the push callback to automatically perform some of the operations in the hash by using "rho_push", as shown in [Registering a Push Callback in the Rhodes Application](/rhoconnect/push-client-setup#registering-a-push-callback-in-the-rhodes-application).

### Push Callback, Push Payload

Refer to [Rhodes Device Capabilities - Push Notifications - Push Callback](/rhodes/device-caps#push-callback) for more information about setting up a push callback.

Refer to [Rhodes Device Capabilities - Push Notifications - Push Payload](/rhodes/device-caps#push-payload) for more information about setting up the push payload.
