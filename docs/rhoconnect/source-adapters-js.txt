RhoConnect Source Adapters (JavaScript)
===

## Generating the Source Adapter from the Command Line

To generate a JavaScript source adapter for your RhoConnect application, you can run the `rhoconnect source --js` command within your application directory.

    :::term
    $ rhoconnect source --help
    Usage: rhoconnect source [options] [args]

    Generates a new source adapter (Controller/Model pair).
    Required:
      name        - source name (i.e. product)


    Options specific for this generator:
            --js                         generate JavaScript code

    General options:
        -p, --pretend                    Run, but do not make any changes.
        -f, --force                      Overwrite files that already exist.
        -s, --skip                       Skip files that already exist.
        -d, --delete                     Delete files that have previously been generated with this generator.
            --no-color                   Don't colorize the output
        -h, --help                       Show this message
            --debug                      Do not catch errors


For the storeserver application example, within the storeserver directory, run:

    :::term
    $ rhoconnect source product --js
    Generating with source generator:
         [ADDED]  models/js/product.js
         [ADDED]  controllers/js/product_controller.js


## Understanding the Generated Controller File

The generated source adapter's controller file (in this case, `controllers/product_controller.js`) is similar to the code listing below.
Its purpose is to define the RhoConnect application HTTP end point and to register the corresponding SYNC routes.

    :::javascript
    var app = require("ballroom");
    var helpers = require("rhoconnect_helpers");

    app.controllerName("Product");
    app.registerHandler("sync");

    // Add your custom routes here

## Understanding the Generated Model File

The generated source adapter's model file (in this case, `models/product.js`) is similar to the code listing below:

    :::javascript
    var Product = function(){

      this.login = function(resp){
        // TODO: Login to your data source here if necessary
        resp.send(true);
      };

      this.query = function(resp){
        var result = {};
        // TODO: Query your backend data source and assign the records
        // to a nested hash structure. Then return your result.
        // For example:
        //
        // {
        //   "1": {"name": "Acme", "industry": "Electronics"},
        //   "2": {"name": "Best", "industry": "Software"}
        // }
        resp.send(result);
      };

      this.create = function(resp){
        // TODO: Create a new record in your backend data source.  Then
        // return the result.
        resp.send('someId');
      };

      this.update = function(resp){
        // TODO: Update an existing record in your backend data source.
        // Then return the result.
        resp.send(true);
      };

      this.del = function(resp){
        // TODO: Delete an existing record in your backend data source
        // if applicable.  Be sure to have a hash key and value for
        // "object" and return the result.
        resp.send(true);
      };

      this.logoff = function(resp){
        // TODO: Logout from the data source if necessary.
        resp.send(true);
      };
    };

    module.exports = new Product();

## Source Adapter API

### Source Adapter Controller API

You can use the following methods and techniques inside of your source adapter controller.

* [controllerName](/rhoconnectapi/source-adapter-controller-api-js#controllernamename) - Name of the source adapter controller.
* [registerHandler](/rhoconnectapi/source-adapter-controller-api-js#registerhandlername) - Register a RhoConnect handler for the controller.
* [get](/rhoconnectapi/source-adapter-controller-api-js#getroute-options-callback) - Define a GET route.
* [post](/rhoconnectapi/source-adapter-controller-api-js#postroute-options-callback) - Define a POST route.
* [put](/rhoconnectapi/source-adapter-controller-api-js#putroute-options-callback) - Define a PUT route.
* [del](/rhoconnectapi/source-adapter-controller-api-js#delroute-options-callback) - Define a DELETE route.
* [currentUser](/rhoconnectapi/source-adapter-model-api-js#currentuser) - Returns the current user who called the adapter's model.
* [loadModel](http://localhost:9393/rhoconnectapi/source-adapter-controller-api-js#loadmodelname) - Returns the current model instance for this controller.

### Source Adapter Model API

You can write the following methods for your source adapter model. These methods will be called by the controller at run-time and allow your source adapter model to interact with your backend service.

* [login](/rhoconnectapi/source-adapter-model-api-js#login) - Login to your backend service.
* [logoff](/rhoconnectapi/source-adapter-model-api-js#logoff) - Logoff from your backend service.
* [query](/rhoconnectapi/source-adapter-model-api-js#query) - Query your backend service and build a hash of hashes.
* [create](/rhoconnectapi/source-adapter-model-api-js#create) - Create a new record in the backend.
* [update](/rhoconnectapi/source-adapter-model-api-js#update) - Update an existing record in the backend.
* [delete](/rhoconnectapi/source-adapter-model-api-js#delete) - Delete an existing record in the backend.
* [stashResult](/rhoconnectapi/source-adapter-model-api-js#stashresult) - Saves the current state of the result to redis and sets it `undefined`.
* [getData](/rhoconnectapi/source-adapter-model-api-js#getdata) - Get the model document data from Store.
* [currentUser](/rhoconnectapi/source-adapter-model-api-js#currentuser) - Returns the current user who called the adapter's model.

### Request API
The [request object](/rhoconnectapi/source-adapter-controller-api-js#request) contains information about the HTTP request the app is receiving.

* [params](/rhoconnectapi/source-adapter-controller-api-js#requestparams) - Access in the incoming request parameters (i.e. from the HTTP query string).
* [header](/rhoconnectapi/source-adapter-controller-api-js#requestheader) - HTTP request headers.
* [model](/rhoconnectapi/source-adapter-controller-api-js#requestmodel) - The corresponding model name of the request.

### Response API
The [response](/rhoconnectapi/source-adapter-controller-api-js#response) is used to pass application control and return the `result` hash to RhoConnect.

* [params](/rhoconnectapi/source-adapter-controller-api-js#responseparams) - Access in the incoming request parameters (i.e. from the HTTP query string).
* [header](/rhoconnectapi/source-adapter-controller-api-js#responseheader) - HTTP request headers.
* [exception](/rhoconnectapi/source-adapter-controller-api-js#responseexception) - Holds the exception for the request (if one is raised).
* [currentUser](/rhoconnectapi/source-adapter-model-api-js#currentuser) - Returns the current user who called the adapter's model.

## Redis Store API (JavaScript)
RhoConnect provides a simple redis interface for saving/retrieving arbitrary data.  This is useful if you want to save data in your application to be used later (i.e. in an async job or a subsequent source adapter execution).

    :::javascript
    resp.params = { 'hello': 'world' }
    Store.putValue(resp, function(){
      resp.send(true)
    });


    var value = '';
    resp.params = 'hello';
    Store.getValue(resp, function(){
      value = resp.result;
      // value is now 'world'
      resp.send(resp.result);
    });

## Sample Model
Here's a complete example of how the completed [product model might look](https://gist.github.com/larsburgess/87753882f3a4a366b48b):

    :::javascript
    var http = require('http');
    var host = 'rhostore.herokuapp.com';

    var Product = function(){

      this.login = function(resp){
        resp.send(true);
      };

      this.query = function(resp){
        var result = {};
        var str = '';

        http.request('http://' + host + '/products.json', function(res){
          res.on('data', function(chunk){
            str += chunk;
          });
          res.on('end', function(){
            var data = JSON.parse(str);
            for(var i in data){
              var item = data[i];
              result[item.product.id.toString()] = item.product;
            }
            resp.send(result);
          });
        }).end();
      };

      this.create = function(resp){
        var postData = JSON.stringify({ 'product': resp.params.create_object });
        var str = '';
        var options = {
          host: host,
          path: '/products.json',
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        };
        var req = http.request(options, function(res){
          res.on('data', function(chunk){
            str += chunk;
          });
          res.on('end', function(){
            var data = JSON.parse(str);
            resp.send(data.product.id.toString());
          });
        });
        req.write(postData);
        req.end();
      };

      this.update = function(resp){
        var objId = resp.params.update_object.id;
        var putData = JSON.stringify({ "product": resp.params.update_object });
        // Remove the id from the hash, we don't need it.
        delete putData.id;
        var options = {
          host: host,
          path: '/products/' + objId + '.json',
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' }
        };
        var req = http.request(options, function(res){
          res.on('data', function(){});
          res.on('end', function(){
            resp.send(true);
          });
          res.on('error', function(){
            resp.send(false);
          });
        });
        req.write(putData);
        req.end();
      };

      this.del = function(resp){
        var objId = resp.params.delete_object.id;
        var options = {
          host: host,
          path: '/products/' + objId + '.json',
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' }
        };
        var req = http.request(options, function(res){
          res.on('data', function(){});
          res.on('end', function(){
            resp.send(true);
          });
          res.on('error', function(){
            resp.send(false);
          });
        });
        req.end();
      };

      this.logoff = function(resp){
        resp.send(true);
      };
    };

    module.exports = new Product();