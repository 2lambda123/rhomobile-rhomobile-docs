# File API

The subset of the [Ruby File methods](http://www.ruby-doc.org/core-1.9.3/File.html) that allows access to the Rhodes file structure. Refer to [File System access in Device Capabilities](/rhodes/device-caps#file-system-access) for an example.

## Using JavaScript API

You can call the Ruby File methods from JavaScript. To use the Javascript API, add the `public/js/rho_javascript_api.js` file to the .html, .erb, or .js file calling the JavaScript method.

Javascript callback supports JSON syntax and %s syntax, like the RhoElements plug-ins Javascript API.

The JavaScript API methods with a return value can pass it as a parameter in jQuery-compatible continuation (deferred object, a kind of callback). Possible continuations to handle are done, fail, and complete.

	Rho.Class.method(params).done(function(handler) { /* handler... */ })

You must enable JavaScript by putting `rho-javascript` into extensions in your build.yml.

	:::yaml
	extensions: ["rho-javascript"]

You must have a [RhoElements license](/rhoelements/licensing) to use the JavaScript API.

## Rhodes File structure

	:::term
	<rhodes root>  # system-dependent path
	  apps         # Rho::RhoApplication::get_base_app_path
	    app        # Rho::RhoApplication::get_app_path('app') - contain models
	      model1   # Rho::RhoApplication::get_model_path('app','model1')
	    public     # contains files from application public folder
	    db         # contains schema and data files
	      db-files # contains files stored in database(blobs)
	               # for file paths from camera callback etc: Rho::RhoApplication::get_blob_path(relative_file_path); 
	               # to create file path for blob: Rho::RhoApplication::get_blob_folder()
	    lib        # contains rho framework library files. Blackberry does not 
	               # have this folder, library files are stored in jar
	    RhoLog.txt #application log

[Click here to see the RhoApplication methods.](rhoapplication-api)

## absolute_path

Returns the absolute pathname for the given fileName. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-absolute_path).

Ruby syntax:

	File.absolute_path(fileName, dirString)

JavaScript syntax:

	Rho.File.absolute_path(fileName, dirString)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name .</td>
</tr>
<tr>
	<td><code>dirString</code></td>
	<td>String. Optional. If given, the relative path starts from this path rather than from the current working directory.</td>
</tr>
</table>

## atime

Returns a Date object of the last time access for the given fileName. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-atime).

Ruby syntax:

	File.atime(fileName)

JavaScript syntax:

	Rho.File.atime(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## basename

Returns the last component of the filename given in fileName, which must be formed using forward slashes ("/"). For example, returns "ruby.rb" when fileName is "/home/gumby/work/ruby.rb". [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-basename).

Ruby syntax:

	File.basename(fileName, suffix)

JavaScript syntax:

	Rho.File.basename(fileName, suffix)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
<tr>
	<td><code>suffix</code></td>
	<td>String. Optional. When this is set to the suffix at the end of fileName, basename returns the last component of fileName without the suffix.</td>
</tr>
</table>

## blockdev?, is_blockdev

Returns true if the given fileName is a block device. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-blockdev-3F).

Ruby syntax:

	File.blockdev?(fileName)

JavaScript syntax:

	Rho.File.is_blockdev(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## chardev?, is_chardev

Returns true if the given fileName is a character device. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-chardev-3F).

Ruby syntax:

	File.chardev?(fileName)

JavaScript syntax:

	Rho.File.is_chardev(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## chmod

Changes permission bits on the named file(s) to the bit pattern represented by mode. Returns the number of files processed. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-chmod).

For information about the permission bits, refer to the [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html) and to the [UNIX manual](http://unixhelp.ed.ac.uk/CGI/man-cgi?chmod+2) for chmod(2).

Ruby syntax:

	File.chmod(mode, fileName, fileName2, ...)

JavaScript syntax:

	Rho.File.chmod(mode, fileName, fileName2, ...)

<table border="1">
<tr>
	<td><code>mode</code></td>
	<td>Bit pattern for the permission bits.</td>
</tr>
<tr>
	<td><code>fileName, fileName2, ...</code></td>
	<td>String. The file name(s) to be processed. fileName2 ... are optional.</td>
</tr>
</table>

## chown

Changes the owner and group of the named file(s) to the given numeric owner and group id’s. Only a process with superuser privileges may change the owner of a file. The current owner of a file may change the file's group to any group to which the owner belongs. A nil or -1 owner or group id is ignored. Returns the number of files processed. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-chown).

Ruby syntax:

	File.chown(owner, group, fileName, fileName2, ...)

JavaScript syntax:

	Rho.File.chown(owner, group, fileName, fileName2, ...)

<table border="1">
<tr>
	<td><code>owner</code></td>
	<td>Integer. The owner id.</td>
</tr>
<tr>
	<td><code>group</code></td>
	<td>Integer. The group id.</td>
</tr>
<tr>
	<td><code>fileName, fileName2, ...</code></td>
	<td>String. The file name(s) to be processed. fileName2 ... are optional.</td>
</tr>
</table>

## ctime

Returns the change time for the named file (the time at which directory information about the file was changed, not the file itself). On Windows (NTFS), returns creation time (birth time). [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-ctime).

Ruby syntax:

	File.ctime(fileName)

JavaScript syntax:

	Rho.File.ctime(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## delete, do_delete

Deletes the named files, returning the number of names passed as arguments. With JavaScript, use the fail continuation to catch error exemptions. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-delete).

Ruby syntax:

	File.delete(fileName, fileName2, ...)

JavaScript syntax:

	Rho.File.do_delete(fileName, fileName2, ...)

<table border="1">
<tr>
	<td><code>fileName, fileName2, ...</code></td>
	<td>String. The names of the file(s) to be deleted. fileName2 ... are optional.</td>
</tr>
</table>

## directory?, is_directory

Returns true if the named file is a directory, or a symlink that points at a directory, and false otherwise. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-directory-3F).

Ruby syntax:

	File.directory?(fileName)

JavaScript syntax:

	Rho.File.is_directory(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file (or directory).</td>
</tr>
</table>

## dirname

Returns a String of all components of the filename given in fileName except the last one ("/home/gumby/work/ruby.rb" => "/home/gumby/work"). The filename must be formed using forward slashes ("/") regardless of the separator used on the local file system. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-dirname).

Ruby syntax:

	File.dirname(fileName)

JavaScript syntax:

	Rho.File.dirname(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## executable?, is_executable

Returns true if the named file is executable by the effective user id of this process. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-executable-3F).

Ruby syntax:

	File.executable?(fileName)

JavaScript syntax:

	Rho.File.is_executable(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## executable_real?, is_executable_real

Returns true if the named file is executable by the real user id of this process. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-executable_real-3F).

Ruby syntax:

	File.executable_real?(fileName)

JavaScript syntax:

	Rho.File.is_executable_real(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## exist?, is_exist

Returns true if the named file exists. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-exist-3F).

Ruby syntax:

	File.exist?(fileName)

JavaScript syntax:

	Rho.File.is_exist(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## expand_path

Converts a pathname to an absolute pathname, which is returned as a String. Relative paths are referenced from the current working directory of the process unless dirString is given, in which case it will be used as the starting point. The given pathname may start with a "~", which expands to the process owner's home directory (the environment variable HOME must be set correctly). "~user" expands to the named user's home directory. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-expand_path).

Ruby syntax:

	File.expand_path(fileName, dirString)

JavaScript syntax:

	Rho.File.expand_path(fileName, dirString)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
<tr>
	<td><code>dirName</code></td>
	<td>String. Optional. The name of the file.</td>
</tr>
</table>

## extname

Returns the extension (the portion of file name in path after the period), such as ".rb" from "a/b/d/test.rb". [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-extname).

Ruby syntax:

	File.extname(fileName)

JavaScript syntax:

	Rho.File.extname(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## file?, is_file

Returns true if the named file exists and is a regular file. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-file-3F).

Ruby syntax:

	File.file?(fileName)

JavaScript syntax:

	Rho.File.is_file(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## fnmatch, is_fnmatch

Returns true if path matches against pattern. Returns null if this feature is not supported on the device platform. The pattern is not a regular expression; instead, it follows rules similar to shell filename globbing. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-fnmatch-3F).

Ruby syntax:

	File.fnmatch?(pattern, path)

JavaScript syntax:

	Rho.File.is_fnmatch(pattern, path)

<table border="1">
<tr>
	<td><code>pattern</code></td>
	<td>String. The path to match against the pattern.</td>
</tr>
<tr>
	<td><code>path</code></td>
	<td>String. The pattern.</td>
</tr>
</table>

The pattern may contain the following metacharacters:

<table border="1">
<tr>
	<td><code>*</code></td>
	<td>Matches any file. Can be restricted by other values in the glob. * will match all files; c* will match all files beginning with c; *c will match all files ending with c; and *c* will match all files that have c in them (including at the beginning or end). Equivalent to / .* /x in regexp.</td>
</tr>
<tr>
	<td><code>**</code></td>
	<td>Matches directories recursively or files expansively.</td>
</tr>
<tr>
	<td><code>?</code></td>
	<td>Matches any one character. Equivalent to /.{1}/ in regexp.</td>
</tr>
<tr>
	<td><code>[set]</code></td>
	<td>Matches any one character in set. Behaves exactly like character sets in Regexp, including set negation ([^a-z]).</td>
</tr>
<tr>
	<td>&lt;code&gt;&lt;&#47;code&gt;</td>
	<td>Escapes the next metacharacter.</td>
</tr>
</table>

## ftype

Identifies the type of the named file; the return string is one of "file", "directory", "characterSpecial", "blockSpecial", "fifo", "link", "socket", or "unknown". [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-ftype).

Ruby syntax:

	File.ftype(fileName)

JavaScript syntax:

	Rho.File.ftype(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## grpowned?, is_grpowned

Returns true if the named file exists and the effective group id of the calling process is the owner of the file. Returns false on Windows. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-grpowned-3F).

Ruby syntax:

	File.grpowned?(fileName)

JavaScript syntax:

	Rho.File.is_grpowned(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the file.</td>
</tr>
</table>

## identical?, is_identical

Returns true if the named files are identical. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-identical-3F).

Ruby syntax:

	File.identical?(fileName, fileName2)

JavaScript syntax:

	Rho.File.is_identical(fileName, fileName2)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the first file.</td>
</tr>
<tr>
	<td><code>fileName</code></td>
	<td>String. The name of the second file.</td>
</tr>
</table>

## join

Returns a new string formed by joining the given strings. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-join).

Ruby syntax:

	File.join(part1, part2, ...)

JavaScript syntax:

	Rho.File.join(part1, part2, ...)

<table border="1">
<tr>
	<td><code>part1, part2, ...</code></td>
	<td>Strings. The parts of the string to form.</td>
</tr>
</table>

## lchmod

Equivalent to [File.chmod](/rhodesapi/file-api#chmod), but does not follow symbolic links (so it will change the permissions associated with the link, not the file referenced by the link). Often not available. Returns the number of files processed. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-lchmod).

Ruby syntax:

	File.lchmod(mode, fileName, fileName2, ...)

JavaScript syntax:

	Rho.File.lchmod(mode, fileName, fileName2, ...)

<table border="1">
<tr>
	<td><code>mode</code></td>
	<td>Bit pattern for the permission bits.</td>
</tr>
<tr>
	<td><code>fileName, fileName2, ...</code></td>
	<td>String. The file name(s) to be processed. fileName2 ... are optional.</td>
</tr>
</table>

## lchown

Equivalent to File.chown, but does not follow symbolic links (so it will change the owner associated with the link, not the file referenced by the link). Often not available. Returns number of files in the argument list. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-lchown).

Ruby syntax:

	File.lchown(user, group, fileName, fileName2, ...)

JavaScript syntax:

	Rho.File.lchown(user, group, fileName, fileName2, ...)

<table border="1">
<tr>
	<td><code>owner</code></td>
	<td>Integer. The user id.</td>
</tr>
<tr>
	<td><code>group</code></td>
	<td>Integer. The group id.</td>
</tr>
<tr>
	<td><code>fileName, fileName2, ...</code></td>
	<td>String. The file name(s) to be processed. fileName2 ... are optional.</td>
</tr>
</table>

## link

Creates a new name for an existing file using a hard link. Will not overwrite newName if it already exists (raising a subclass of SystemCallError). Not available on all platforms. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-link).

Use the fail continuation to catch error exemptions. 

Ruby syntax:

	File.link(oldName, newName)

JavaScript syntax:

	Rho.File.link(oldName, newName)

<table border="1">
<tr>
	<td><code>oldName</code></td>
	<td>String. The old file name.</td>
</tr>
<tr>
	<td><code>newName</code></td>
	<td>Integer. The new file name.</td>
</tr>
</table>

## lstat

Same as [File.stat](/rhodesapi/file-api#stat), but does not follow the last symbolic link. Instead, reports on the link itself. Returns a hash object of Strings: the path and the file.extension. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-lstat).

Ruby syntax:

	File.lstat(fileName)

JavaScript syntax:

	Rho.File.lstat(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## mtime

Returns the modification time for the named file as a Date object. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-mtime).

Ruby syntax:

	File.mtime(fileName)

JavaScript syntax:

	Rho.File.mtime(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## open

Opens the file named by fileName according to mode (default is "r") and returns a new File object. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-open).

For information about the permission bits, refer to the [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html) and to the [UNIX manual](http://unixhelp.ed.ac.uk/CGI/man-cgi?open+2) for open(2).

Ruby syntax:

	File.open(fileName, mode, permission)

JavaScript syntax:

	Rho.File.open(fileName, mode, permission)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
<tr>
	<td><code>mode</code></td>
	<td>Optional. The mode in which to open the file. Platform dependent.</td>
</tr>
<tr>
	<td><code>permission</code></td>
	<td>Optional. Permission bits. Platform dependent.</td>
</tr>
</table>

mode values:

<table border="1">
<tr>
	<td><code>r</code></td>
	<td>Read-only, starts at beginning of file  (default mode).</td>
</tr>
<tr>
	<td><code>r+</code></td>
	<td>Read-write, starts at beginning of file</td>
</tr>
<tr>
	<td><code>w</code></td>
	<td>Write-only, truncates existing file to zero length or creates a new file for writing.</td>
</tr>
<tr>
	<td><code>w+</code></td>
	<td>Read-Write, truncates existing file to zero length or creates a new file for reading and writing.</td>
</tr>
<tr>
	<td><code>a</code></td>
	<td>Write-only, starts at end of file if file exists, otherwise creates a new file for writing.</td>
</tr>
<tr>
	<td><code>a+</code></td>
	<td>Read-write, starts at end of file if file exists, otherwise creates a new file for writing.</td>
</tr>
<tr>
	<td><code>t</code></td>
	<td>Text file mode (may appear with any of the key letters listed above). Forced.</td>
</tr>
</table>

## owned?, is_owned

Returns true if the named file exists and the effective used id of the calling process is the owner of the file. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-owned-3F).

JavaScript syntax:

	File.owned?(fileName)

JavaScript syntax:

	Rho.File.is_owned(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## path

Returns the string representation of the path to the named file. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-path).

JavaScript syntax:

	File.path(fileName)

JavaScript syntax:

	Rho.File.path(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## pipe?, is_pipe

Returns true if the named file is a pipe. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-pipe-3F).

Ruby syntax:

	File.pipe?(fileName)

JavaScript syntax:

	Rho.File.is_pipe(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## readable?, is_readable

Returns true if the named file is readable by the effective user id of this process. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-readable-3F).

Ruby syntax:

	File.readable?(fileName)

JavaScript syntax:

	Rho.File.is_readable(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## readable_real?, is_readable_real

Returns true if the named file is readable by the real user id of this process. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-readable_real-3F).

JavaScript syntax:

	File.readable_real?(fileName)

JavaScript syntax:

	Rho.File.is_readable_real(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## readlink

Returns a String: the name of the file referenced by the given link. Not available on all platforms. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-readlink).

Ruby syntax:

	File.readlink(link)

JavaScript syntax:

	Rho.File.readlink(link)

<table border="1">
<tr>
	<td><code>link</code></td>
	<td>String. The link.</td>
</tr>
</table>

## realdirpath

Returns a String: the real (absolute) pathname of pathName in the actual filesystem. The real pathname doesn't contain symlinks or useless dots. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-realdirpath).

Ruby syntax:

	File.realdirpath(pathName, dirString)

JavaScript syntax:

	Rho.File.realdirpath(pathName, dirString)

<table border="1">
<tr>
	<td><code>link</code></td>
	<td>String. The path name. The last component of the path name can be nonexistent.</td>
</tr>
<tr>
	<td><code>link</code></td>
	<td>String. Optional. Used as a base directory for interpreting relative pathname instead of the current directory.</td>
</tr>
</table>

## realpath

Returns a String: the real (absolute) pathname of pathname in the actual filesystem not containing symlinks or useless dots. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-realpath).

JavaScript syntax:

	File.realpath(pathName, dirString)

JavaScript syntax:

	Rho.File.realpath(pathName, dirString)

<table border="1">
<tr>
	<td><code>link</code></td>
	<td>String. The path name. All components of the path name must exist when this method is called.</td>
</tr>
<tr>
	<td><code>link</code></td>
	<td>String. Optional. Used as a base directory for interpreting relative pathname instead of the current directory.</td>
</tr>
</table>

## rename

Renames the given file to the new name. Returns a SystemCallError if the file cannot be renamed. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-rename).

Ruby syntax:

	File.rename(oldName, newName)

JavaScript syntax:

	Rho.File.rename(oldName, newName)

<table border="1">
<tr>
	<td><code>oldName</code></td>
	<td>String. The file name.</td>
</tr>
<tr>
	<td><code>link</code></td>
	<td>String. The new file name.</td>
</tr>
</table>

## setgid?, is_setgid

Returns true if the named file has the setgid bit set. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-setgid-3F).

Ruby syntax:

	File.setgid?(fileName)

JavaScript syntax:

	Rho.File.is_setgid(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## setuid?, is_setuid

Returns true if the named file has the setuid bit set. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-setuid-3F).

Ruby syntax:

	File.setuid?(fileName)

JavaScript syntax:

	Rho.File.is_setuid(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## size

Returns the size of the named file. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-size).

Ruby syntax:

	File.size(fileName)

JavaScript syntax:

	Rho.File.size(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## size?, is_size

Returns nil if the named file doesn't exist or has zero size, the size of the file otherwise. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-size-3F).

JavaScript syntax:

	File.size?(fileName)

JavaScript syntax:

	Rho.File.is_size(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## socket?, is_socket

Returns true if the named file is a socket. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-socket-3F).

Ruby syntax:

	File.socket?(fileName)

JavaScript syntax:

	Rho.File.is_socket(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## split

Splits the given string into a directory and a file component and returns them in a two-element array. See also [File.dirname](/rhodesapi/file-api#dirname) and [File.basename](/rhodesapi/file-api#basename). [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-split).

Ruby syntax:

	File.split(fileName)

JavaScript syntax:

	Rho.File.split(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## stat

Returns a hash object. For information about the structure of the hash object, refer to the [Ruby File::Stat method](http://www.ruby-doc.org/core-1.9.3/File/Stat.html) and to the [UNIX manual](http://unixhelp.ed.ac.uk/CGI/man-cgi?stat+2) for stat(2).

[Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-stat).

Ruby syntax:

	File.stat(fileName)

JavaScript syntax:

	Rho.File.stat(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## sticky?, is_sticky

Returns true if the named file has the sticky bit set. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-sticky-3F).

Ruby syntax:

	File.sticky?(fileName)

JavaScript syntax:

	Rho.File.is_sticky(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## symlink

Creates a symbolic link called newName for the existing file oldName. Returns a NotImplemented exception on platforms that do not support symbolic links. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-symlink).

Use the fail continuation to catch error exemptions.

Ruby syntax:

	File.symlink(oldName, newName)

JavaScript syntax:

	Rho.File.symlink(oldName, newName)

<table border="1">
<tr>
	<td><code>oldName</code></td>
	<td>String. The file name.</td>
</tr>
<tr>
	<td><code>newName</code></td>
	<td>String. The symbolic link to create.</td>
</tr>
</table>

## symlink?, is_symlink

Returns true if the named file is a symbolic link. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-symlink-3F).

Ruby syntax:

	File.symlink?(fileName)

JavaScript syntax:

	Rho.File.is_symlink(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## truncate

Truncates the file fileName to be at most integer bytes long. Not available on all platforms. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-truncate).

Ruby syntax:

	Rho.File.truncate(fileName, length)

JavaScript syntax:

	Rho.File.truncate(fileName, length)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
<tr>
	<td><code>length</code></td>
	<td>Number. The number of bytes in the truncated file.</td>
</tr>
</table>

## unmask

Returns the current umask value for this process. Umask values are subtracted from the default permissions, so a umask of 0222 would make a file read-only for everyone. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-umask).

Ruby syntax:

	File.umask(mask)

JavaScript syntax:

	Rho.File.umask(mask)

<table border="1">
<tr>
	<td><code>mask</code></td>
	<td>Number. Optional. If the optional mask argument is given, set the umask to that value and return the previous value.</td>
</tr>
</table>

## unlink

An alias method to do_delete: deletes the named files, returning the number of names passed as arguments. A JavaScript implementation of the [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-unlink).

Ruby syntax:

	File.unlink(fileName, fileName2, ...)

JavaScript syntax:

	Rho.File.unlink(fileName, fileName2, ...)

<table border="1">
<tr>
	<td><code>fileName, fileName2, ...</code></td>
	<td>String. The names of the file(s) to be deleted. fileName2 ... are optional.</td>
</tr>
</table>

## utime

Sets the access and modification times of the named file to the first two arguments. Returns the number of file names in the argument list. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-utime).

Ruby syntax:

	File.utime(atime, mtime, fileName, fileName2, ...)

JavaScript syntax:

	Rho.File.utime(atime, mtime, fileName, fileName2, ...)

<table border="1">
<tr>
	<td><code>atime</code></td>
	<td>Date. The access time.</td>
</tr>
<tr>
	<td><code>mtime</code></td>
	<td>Date. The modification time.</td>
</tr>
tr>
	<td><code>fileName, fileName2, ...</code></td>
	<td>String. The names of the file(s). fileName2 ... are optional.</td>
</tr>
</table>

## world_readable?, is_world_readable

If fileName is readable by others, returns an integer representing the file permission bits of fileName. Returns nil otherwise. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-world_readable-3F).

For information about the permission bits, refer to the [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html) and to the [UNIX manual](http://unixhelp.ed.ac.uk/CGI/man-cgi?stat+2) for stat(2).

Ruby syntax:

	File.world_readable?(fileName)

JavaScript syntax:

	Rho.File.is_world_readable(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## world_writable?, is_world_writable

If fileName is writable by others, returns an integer representing the file permission bits of fileName. Returns nil otherwise. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-world_writable-3F).

For information about the permission bits, refer to the [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html) and to the [UNIX manual](http://unixhelp.ed.ac.uk/CGI/man-cgi?stat+2) for stat(2).

Ruby syntax:

	File.world_writable(fileName)

JavaScript syntax:

	Rho.File.is_world_writable(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## writable?, is_writable

Returns true if the named file is writable by the effective user id of this process. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-writable-3F).

Ruby syntax:

	File.writable?(fileName)

JavaScript syntax:

	Rho.File.is_writable(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## writable_real?, is_writable_real

Returns true if the named file is writable by the effective user id of this process. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-writable_real-3F).

Ruby syntax:

	File.writable_real?(fileName)

JavaScript syntax:

	Rho.File.is_writable_real(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## zero?, is_zero

Returns true if the named file exists and has a zero size. Returns null if this feature is not supported on the device platform. [Ruby File method](http://www.ruby-doc.org/core-1.9.3/File.html#method-c-zero-3F).

Ruby syntax:

	File.zero?(fileName)

JavaScript syntax:

	Rho.File.is_zero(fileName)

<table border="1">
<tr>
	<td><code>fileName</code></td>
	<td>String. The file name.</td>
</tr>
</table>

## File Object Instance Methods

You can use the following File object Instance methods, taken from the {Ruby IO class](http://www.ruby-doc.org/core-1.9.3/IO.html).

### getId

Returns the 

Returns a Number: the id of this file object.

JavaScript syntax:

	Rho.fileObject.getId()

### getc

Returns a one character string, or null if at the end of a file. [Click for the Ruby method](http://www.ruby-doc.org/core-1.9.3/IO.html#method-i-getc).

Ruby syntax:

	fileObject.getc()

JavaScript syntax:

	Rho.fileObject.getc()

### ungetc

Pushes back one character (passed as a parameter) onto ios, such that a subsequent buffered character read will return it. [Click for the Ruby method](http://www.ruby-doc.org/core-1.9.3/IO.html#method-i-getc).

Ruby syntax:

	fileObject.ungetc(character)

JavaScript syntax:

	Rho.fileObject.ungetc(character)

<table border="1">
<tr>
	<td><code>character</code></td>
	<td>String. A one character string.</td>
</tr>
</table>

### gets

Reads the next “line” from the I/O stream. [Click for the Ruby method](http://www.ruby-doc.org/core-1.9.3/IO.html#method-i-gets).

Ruby syntax:

	fileObject.gets(separatorOrLimit, limit)

JavaScript syntax:

	Rho.fileObject.gets(separatorOrLimit, limit)

<table border="1">
<tr>
	<td><code>separatorOrLimit</code></td>
	<td>String, Number, or null. A separator.</td>
</tr>
<tr>
	<td><code>limit</code></td>
	<td>Number. Optional. A limit.</td>
</tr>
</table>

### putc

Returns a Number or a one character String. If obj is Numeric, write the character whose code is the least-significant byte of obj, otherwise write the first byte of the string representation of obj to ios. [Click for the Ruby method](http://www.ruby-doc.org/core-1.9.3/IO.html#method-i-putc).

Ruby syntax:

	fileObject.putc(character)

JavaScript syntax:

	Rho.fileObject.putc(charcter)

<table border="1">
<tr>
	<td><code>character</code></td>
	<td>one character String or Number.</td>
</tr>
</table>

### puts

Writes the given objects to ios as with IO#print. Writes a record separator (typically a newline) after any that do not already end with a newline sequence. [Click for the Ruby method](http://www.ruby-doc.org/core-1.9.3/IO.html#method-i-puts).

Ruby syntax:

	fileObject.puts(string1, string2, ...)

JavaScript syntax:

	Rho.fileObject.puts(string1, string2, ...)

<table border="1">
<tr>
	<td><code>string1, string2, ...</code></td>
	<td>Objects to wriite. string2, ... is optional..</td>
</tr>
</table>

### flush

Flushes any buffered data within ios to the underlying operating system. [Click for the Ruby method](http://www.ruby-doc.org/core-1.9.3/IO.html#method-i-flush).

Ruby syntax:

	fileObject.flush

JavaScript syntax:

	Rho.fileObject.flush()

### close

Closes ios and flushes any pending writes to the operating system. [Click for the Ruby method](http://www.ruby-doc.org/core-1.9.3/IO.html#method-i-close).

Ruby syntax:

	fileObject.close

JavaScript syntax:

	Rho.fileObject.close()
