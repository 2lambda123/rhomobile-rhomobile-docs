# RhoElements-Building Native Applications

<!-- PLACEHOLDER - Block Diagram -->

## Setting Application Type

To create a RhoElements application that will be deployed natively to the device, you will essentially follow the same steps you would to create a Rhodes application. However a RhoElements application provides the [Mobile APIs](/rhoelements/apicompatibility) in either Javascript, HTML or Ruby.  

To enable Motorola device capabilities, add the following to your application's build.yml file.

    app_type: rhoelements

This indicates that your application will be a "RhoElements" application. This application type by default uses the Motorola Webkit as the redering engine for your application interface as well as exposes an extended set of APIs(rhoelements/apicompatibility). If you build your application without this parameter, only the APIs that are indicated as <span class="label">RHODES</span> will be available and the default rendering engine will be unique to the native operating system that the application is deployed on.

To build RhoElements application for non-Motorola device, add the following to your application's build.yml file.

    app_type: rhoelements
    
    capabilities:
    - non_motorola_device
    
## Building for Motorola Windows Mobile and CE

To build for Motorola Windows Mobile devices, follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).

To build for Motorola Windows CE devices, install MC3000c50b PSDK from the [Symbol support site](http://support.symbol.com/support/search.do?cmd=displayKC&docType=kc&externalId=11964&sliceId=&dialogID=45371217&stateId=0%200%2045367143). 

Then add MC3000c50b to your application's build.yml file.

        wm:
          sdk: "MC3000c50b (ARMV4I)"

Then follow the Rhodes build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).

NOTE: RhoElements applications will not work in the case of an incorrect network setup on a Windows Mobile device, because RhoElements relies on <code>localhost</code> hostname and <code>127.0.0.1</code> IP-address presence.
In general, when connected to a PC, the device should have Internet connectivity: e.g. the user should be able to browse web with Internet Explorer from the Windows Mobile device.
In case of broken Internet connectivity, make sure that at <code>Settings</code> » <code>Connections</code> » <code>Connections</code> » <code>Advanced</code> » <code>Select Networks</code>
the value <code>My ISP</code> is selected in both select boxes.


### Building for Motorola Android

To run a RhoElements application on an ET1 device:

* Install [Android USB drivers](http://developer.android.com/sdk/win-usb.html).
* On the ET1 device, define Symbol USB vendor ID (0x05e0) in (user_profile)/.android/adb_usb.ini.

		0x05E0

Then follow the Rhodes build instructions for [Android](/rhodes/build#build-for-android).

## Pre-licensing Your Application
If your application will be delivered as 'licensed', the Deployment License information may be provided at application build time in the application build.yml file. 

	motorola_license_company: 'Deployment License Company name'
    motorola_license: 'Deployment License Number'

<b>Motorola Devices:</b>

If you do not include the license as part of the build process, the licensing screens will appear when the application starts up and users will be able to license the product directly from the device. 

<b>Non-Motorola devices:</b>

Users will not be able to license the product directly from the device. When the application is started, the license is checked for validity. If the license is invalid, the application will exit. Therefore for those devices, the deployment license must be included as part of the build process.

See the [RhoElements Licensing page](/rhoelements/licensing) for more information.

## Overriding Motorola Webkit

RhoElements will automatically use the Motorola WebKit browser for Windows Mobile, Windows CE and Android (ET1) devices when you add the rhoelements app_type to your application's build.yml. 

    app_type: rhoelements
    
In some conditions you may want to use the default native browser. (Ex, your application requires certain CSS features that only work on the native Android browser). In these scenarios you can omit the <b>app_type: rhoelements</b> or alternatively add the native browser capability to your application's build.yml file:   
    app_type: rhoelements
    capabilities:
    - native_browser
**NOTE: Using the native browser capability will not provide Mobile APIs through: <span class="label label-info">HTML</span> <span class="label label-warning">JAVASCRIPT</span>**

In conditions where your may have a traditional Rhodes application but would like to utilize Motorola Webkit on non-Motorola Windows Mobile, Windows CE, or Android devices, add the Motorola browser capability to your application's build.yml file. 

    capabilities:
    - motorola_browser
**NOTE: If you use the above setting without specifying <b>app_type: rhoelements</b>, <span class="label label-important">RUBY</span> <span class="label label-inverse">RHOELEMENTS</span> APIs will not be available.**

## Running RhoElements Applications in Shared Mode

If you are planning on building multiple applications to be run on the same device, you can choose build your application in what is called "shared mode". What this does is use common libraries from a RhoElements Runtime in a predefined location on the device, and the rest of the application is from the application code that you build. This will result in not duplicating common code and consuming extra memory.

**NOTE: This is a more complicated setup that involves building and deploying two projects. It should be meant for scenarios that have multiple RhoElements applications running on the same device and are concerned about memory limitations. Failure to properly build and deploy will result in a non functioning application.**

There are two steps to this setup.

1. Build the RhoElements Runtime (can be done once).
2. Build the application and indicate at build time that shared mode will be used.

<!-- PLACEHOLDER - DIAGRAM NEEDED -->

### Building The RhoElements Runtime

To build the RhoElements Runtime, perform the following steps.

On the command line on your Windows PC, navigate to this folder.

	<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2

To build for Windows Mobile or Windows CE, run this command.

        rake device:wm:production

The resulting `cab` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\<platform_id>\RhoElements2.cab`.

To build for Android, run this command.

        rake device:android:production

The resulting `apk` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\RhoElements2.apk`

NOTE: The runtime application <b>must</b> be installed to the primary disk partition on the Windows CE/Mobile device, i.e. it has to be installed to `\Program Files\RhoElements2` only.
On Windows Mobile, the `Device` option must be selected when the installer asks for the location to install.
On Windows CE, the default path (`\Program Files\RhoElements`) must be selected.

### Enabling Shared Mode

Now that your RhoElements Runtime has been built, your main application needs to indicate that it will run in shared mode. Indicate this mode by adding `use_shared_runtime` to your application's build.yml file:

    wm:
      use_shared_runtime: yes

All RhoStudio or rake commands will then automatically build your application in shared mode.

* Windows CE and Windows Mobile: Follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).
* Android ET1: Follow the build instructions for [Android](/rhodes/build#build-for-android).

NOTE: You <b>must</b> install your RhoElements native application that uses shared mode to the primary disk partition of the Windows CE/Mobile device, i.e. install to `\Program Files\&lt;app-name&gt;` only.
On Windows Mobile, you must select the `Device` option when the installer asks for the location to install.
On Windows CE, you must select the default path (`\Program Files\&lt;app-name&gt;`).

### Setting the Shortcut (.lnk) for Windows Mobile and CE

If a RhoElements application running in shared mode is not a hidden app (i.e. there is no `hidden_app: yes` line at `build.yml`),
then on Windows Mobile or Windows CE the shortcut (`.lnk` file) containing the complete command line and icon path is created and placed to:

* _Start Menu_ if the application is installed from the `.cab` file or by a `rake run:wm:device:cab` command.
* _application folder_ if the application is installed by a `rake run:wm:device` command.

The generated `.lnk` is a standard Windows Mobile/CE shortcut file having the following format: 
`<line-length>#"<runtime-exe>" -approot="<app-folder>"?"<icon-path>"`

The following command line parameter is used by the RhoElements Runtime (`RhoElements.exe`) for RhoElements applications:
        
    -approot='<path-to-app>': Specifies the path to the root folder
        of the RhoElements main application,
        e.g. -approot='\Program Files\app'

If the `-approot` parameter is not present, then the value from `Configuration` > `Applications` > `Application` > `General` > `StartPage` tag of the RhoElements Runtime configuration file will be used as the start page parameter (usually it points to 'Welcome to Motorola RhoElements' page).

Set the `approot` parameter in the .lnk file to point to your RhoElements main application, such as:

	81#"\Program Files\Rhoelements2\rhoelements2.exe" -approot='\Program Files\myre2app'

## Custom RhoElements configuration file

It is possible to include a custom RhoElements configuration file `Config.xml` to the application bundle.
If the configuration file is the same for all supported platforms, then add to the `build.yml` file:

    rhoelements:
      config: <relative-path-to-Config.xml>

NOTE: The path to <code>Config.xml</code> must be specified relative to the application root folder, e.g. <code>Config/Config.xml</code>.

If configuration file differs for each platform, then add the following lines to `wm` and `android` sections of `build.yml` accordingly:

    wm:
      rhoelements:
        config: <relative-path-to-Config.xml-for-WM>

    android:
      rhoelements:
        config: <relative-path-to-Config.xml-for-Android>

For example:

    wm:
      rhoelements:
        config: Config/Config.xml.wm

    android:
      rhoelements:
        config: Config/Config.xml.android


## Logging a RhoElements Native Application

The RhoElements native application log is configured in the Rhodes way, at `rhoconfig.txt`, located in the app source root folder.

By default log file has name `rholog.txt` and placed at next location:
* Windows Mobile/CE: `rho` folder of the application folder.
* Android: `rhodata` folder of the application folder (accessible at emulator or rooted device only).

You can use the `logserver` parameter to send the log to the host via HTTP. There is no option to store the log file on the mobile device in this case.
        
NOTE: See [configure logging](/rhodes/configuration#run-time-configuration) using the parameters in `rhoconfig.txt`.

If you start your application with rake, then the log file is additionally stored at the app source root folder. In this case, the name of the log file is defined in `build.yml` with the `applog` parameter (by default the log file name is `rholog.txt`).

NOTE: See [enable HTTP-logging](/rhodes/test-log-debug#logging) with a help of `rhologurl` parameter in `rhoconfig.txt`.
