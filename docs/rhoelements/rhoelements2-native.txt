# Building Native Applications

PLACEHOLDER - Block Diagram

## Setting Application Type

To create a RhoElements that will be deployed natively to the device, you will essentially follow the same steps you would to create a Rhodes application. However a RhoElements application provides the [Mobile APIs](rhoelements/apicompatibility) in either Javascript, HTML or Ruby.  

To enable Motorola device capabilities, add the following to your application's build.yml file.

    app_type: rhoelements

This indicates that your application will be a "RhoElements" application. This application type by default uses the [Motorola Webkit](/rhoelements/webkit) as the redering engine for your application interface as well as exposes an extended set of APIs(rhoelements/apicompatibility). If you build your application without this parameter, only the APIs that are indicated as <span class="label">RHODES</span> will be available and the default rendering engine will be unique to the native operating system that the application is deployed on.

## Building for Motorola Windows Mobile and CE

To build for Motorola Windows Mobile devices, follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).

To build for Motorola Windows CE devices, install MC3000c50b PSDK from the [Symbol support site](http://support.symbol.com/support/search.do?cmd=displayKC&docType=kc&externalId=11964&sliceId=&dialogID=45371217&stateId=0%200%2045367143). 

Then add MC3000c50b to your application's build.yml file.

        wm:
          sdk: "MC3000c50b (ARMV4I)"

Then follow the Rhodes build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).

NOTE: RhoElements applications will not work in the case of an incorrect network setup on a Windows Mobile device, because RhoElements relies on <code>localhost</code> hostname and <code>127.0.0.1</code> IP-address presence.
In general, when connected to a PC, the device should have Internet connectivity: e.g. the user should be able to browse web with Internet Explorer from the Windows Mobile device.
In case of broken Internet connectivity, make sure that at <code>Settings</code> » <code>Connections</code> » <code>Connections</code> » <code>Advanced</code> » <code>Select Networks</code>
the value <code>My ISP</code> is selected in both select boxes.


### Building for Motorola Android

To run a RhoElements application on an ET1 device:

* Install [Android USB drivers](http://developer.android.com/sdk/win-usb.html).
* On the ET1 device, define Symbol USB vendor ID (0x05e0) in (user_profile)/.android/adb_usb.ini.

		0x05E0

Then follow the Rhodes build instructions for [Android](/rhodes/build#build-for-android).

## Licensing

The following features require Motorola RhoElements license:

* Mobile APIs indicated with <span class="label label-inverse">RHOELEMENTS</span> application type
* [Motorola WebKit](/rhoelements/webkit)
* [Barcode extension](/rhodesapi/barcode-api)
* [NFC extension](/rhodes/device-caps#nfc)
* [Database Encryption](/rhodes/rhom#database-encryption)
* [Inline Signature Capture](/rhodes/device-caps#signature-capture)

### License for Motorola devices(Windows Mobile, Windows CE and Android ET1)

When an application starts on a Motorola device, the License screen is displayed with the following options:

* Scan Company Name barcode, Scan License barcode.
* Enter Company name and License number manually.
* License device via Internet.

Both type of Motorola RhoElements licenses can be used in this case: device (with particular device UUID) and deployment (without link to particular device UUID).

After a valid license is provided, the device become 'Licensed'. The next time the application is started, the License screen will be displayed for a short period with a 'Device is Licensed' message. If no license is provided the License nag screen will open every so often. The application will still retain all of it's functionality in an unlicensed state.

### License for non-Motorola devices
Deployment License information should be provided at application build time in the application build.yml file:

    motorola_license_company: 'Deployment License Company name'
    motorola_license: 'Deployment License Number'

When the application is started, the license is checked for validity. If the license is invalid, the application will exit.

## Overriding the Browser for a RhoElements Application

RhoElements will automatically use the Motorola WebKit browser for Windows Mobile, Windows CE and Android (ET1) devices when you add the rhoelements app_type to your application's build.yml. 

    app_type: rhoelements
    
In some conditions you may want to use the default native browser. (Ex, your application requires certain CSS features that only work on the native Android browser). In these scenarios you can omit the <b>app_type: rhoelements</b> or alternatively add the native browser capability to your application's build.yml file:   
    capabilities:
    - native_browser
**NOTE: Using the native browser capability will not provide Mobile APIs through: <span class="label label-info">HTML</span> <span class="label label-warning">JAVASCRIPT</span>**

In conditions where your may have a traditional Rhodes application but would like to utilize Motorola Webkit on non-Motorola Windows Mobile, Windows CE, or Android devices, add the Motorola browser capability to your application's build.yml file. 

    capabilities:
    - motorola_browser
**NOTE: If you use the above setting without specifying <b>app_type: rhoelements</b>, <span class="label label-important">RUBY</span> <span class="label label-inverse">RHOELEMENTS</span> APIs will not be available.**

## Running Multiple RhoElements Applications

If you are planning on building multiple applications to be run on the same device, you can choose build your application in what is called "shared runtime mode". What this does is use common libraries from a 'shared runtime' in a predefined location on the device and the 'rest' of the application from the application code that you build. This will result in not duplicating common code and consume extra memory.

**NOTE: This is a more complicated setup that involves building and deploying two projects. It should be meant for scenarios that have multiple RhoElements applications running on the same device and are concerned about memory limitations. Failure to properly build and deploy will result in a non functioning application.**

There are two steps and parts of this setup
1) Building the Shared Runtime (can be done once)
2) Build the application and indicate at build time that shared runtime will be used

PLACEHOLDER - DIAGRAM NEEDED

### Building The Shared Runtime

To build the Shared Runtime Application, perform the following steps.

On the command line on your Windows PC, navigate to this folder.

	<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2

To build for Windows Mobile or Windows CE, run this command.

        rake device:wm:production

The resulting `cab` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\<platform_id>\RhoElements2.cab`.

To build for Android, run this command.

        rake device:android:production

The resulting `apk` file can be found at `<RhoStudio>\ruby\lib\ruby\gems\1.8\gems\rhoelements-2.0.0\RhoElements2\bin\target\RhoElements2.apk`

NOTE: The runtime application <b>must</b> be installed to the primary disk partition on the Windows CE/Mobile device, i.e. it has to be installed to `\Program Files\RhoElements2` only.
On Windows Mobile, the `Device` option must be selected when the installer asks for the location to install.
On Windows CE, the default path (`\Program Files\RhoElements`) must be selected.

### Enabling Shared Runtime Mode

Now that your Shared Runtime has been built, your main application needs to indicate that it will run in this special mode. Indicate this mode by adding `use_shared_runtime` to your application's build.yml file:

    wm:
      use_shared_runtime: yes

All RhoStudio or rake commands will then automatically build your application in Shared Runtime mode.

* Windows CE and Windows Mobile: Follow the build instructions for [Windows Mobile](/rhodes/build#build-for-windows-mobile).
* Android ET1: Follow the build instructions for [Android](/rhodes/build#build-for-android).

NOTE: You <b>must</b> install your RhoElements native application that uses shared runtime mode to the primary disk partition of the Windows CE/Mobile device, i.e. install to `\Program Files\&lt;app-name&gt;` only.
On Windows Mobile, you must select the `Device` option when the installer asks for the location to install.
On Windows CE, you must select the default path (`\Program Files\&lt;app-name&gt;`).


### Setting the Shortcut (.lnk) for Windows Mobile and CE

If a RhoElements application running in Shared Runtime mode is not a hidden app (i.e. there is no `hidden_app: yes` line at `build.yml`),
then on Windows Mobile or Windows CE the shortcut (`.lnk` file) containing the complete command line and icon path is created and placed to:

* _Start Menu_ if the application is installed from the `.cab` file or by a `rake run:wm:device:cab` command.
* _application folder_ if the application is installed by a `rake run:wm:device` command.

The generated `.lnk` is a standard Windows Mobile/CE shortcut file having the following format: 
`<line-length>#"<runtime-exe>" -approot="<app-folder>"?"<icon-path>"`

The following command line parameter is used by the RhoElements Shared Runtime (`RhoElements.exe`) for RhoElements applications:
        
    -approot='<path-to-app>': Specifies the path to the root folder
        of the RhoElements main application,
        e.g. -approot='\Program Files\app'

If the `-approot` parameter is not present, then the value from `Configuration` > `Applications` > `Application` > `General` > `StartPage` tag of the RhoElements Shared Runtime configuration file will be used as the start page parameter (usually it points to 'Welcome to Motorola RhoElements' page).

Set the `approot` parameter in the .lnk file to point to your RhoElements main application, such as:

	81#"\Program Files\Rhoelements2\rhoelements2.exe" -approot='\Program Files\myre2app'

## Logging a RhoElements Native Application

### Windows Mobile/CE Logging

The RhoElements native application log file name is defined at `build.yml` with the `applog` parameter. The log file is placed in the `rho` folder of the application folder.

### Android Logging

The RhoElements native application log file is configured in the Rhodes way, at `rhoconfig.txt`, located in the app source root folder.

You can use the `logserver` parameter to send the log to the host via HTTP. There is no option to store the log file on the mobile device in this case.
        
If you start your application with the `rake run:android[:device]` command, then a log file is additionally stored at the app source root folder. In this case, the name of the log file is defined in `build.yml` with the `applog` parameter.

**Note: See [configure logging](/rhodes/configuration#run-time-configuration) using the parameters in `rhoconfig.txt`. See [enable HTTP-logging](/rhodes/test-log-debug#logging) with a help of `rhologurl` parameter in `rhoconfig.txt`.**
