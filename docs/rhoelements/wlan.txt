
#Wlan Module
<span class="label label-info">HTML</span> <span class="label label-warning">JAVASCRIPT</span> <span class="label label-important">RUBY</span> <span class="label label-inverse">RHOELEMENTS</span>

<b>
The Wlan Module controls the wireless LAN radio.
</b>

##Syntax

<table class="re-table"><tr><th class="tableHeading">wlan (Module) &lt;META&gt; Syntax
</th></tr><tr><td class="clsSyntaxCells clsOddRow"><p>&lt;META HTTP-Equiv="Wlan" content="[method / parameter]"&gt;</p></td></tr></table>
<table class="re-table"><tr><th class="tableHeading">Wlan JavaScript Object Syntax:</th></tr><tr><td class="clsSyntaxCells clsOddRow">
By default the JavaScript Object <b>'wlan'</b> will exist on the current page and can be used to interact directly with the wlan.
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">
To Invoke wlan methods via JavaScript use the following syntax: wlan.method();
<P />e.g. <b>wlan</b>.enableAdapter();
</td></tr><tr><td class="clsSyntaxCells clsOddRow">
To Set wlan parameters via JavaScript use the following syntax: wlan.parameter = 'value'; remembering to enclose your value in quotes where appropriate.  
<P />e.g. <b>wlan</b>.profileGuid = 'value';
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">						
To Set wlan return events via JavaScript use the following syntax: wlan.event = Javascript Function;
<P />e.g. <b>wlan</b>.adapterPowerStateEvent = 'doFunction(%json)';
<P />
For more details on the event syntax and parameters see the <a href="RetrievalEvents">Retrieval Events</a> page.
</td></tr><tr><td class="clsSyntaxCells clsOddRow">							
To set multiple <a href="/rhoelements/EMMLOverview">EMML</a> parameters / events on a single line use the following syntax: wlan.setEMML("[Your EMML Tags]");
<P />
e.g. <b>wlan</b>.setEMML("profileGuid:<i>value</i>;adapterPowerStateEvent:url('JavaScript:doFunction(%json)');enableAdapter");							
</td></tr></table>

<table class="re-table"><tr><th class="tableHeading">Wlan Ruby Object Syntax:</th></tr><tr><td class="clsSyntaxCells clsOddRow">
By default the Ruby Object <b>'Wlan'</b> will exist on the current page and can be used to interact directly with the Wlan. All Methods, Parameters and Events are the same as Javascript, however, notice <b>'Wlan'</b> needs to start with an uppercase letter. Another difference in Ruby is that methods do not end in <b>'()'</b></td></tr><tr><td class="clsSyntaxCells clsEvenRow">
To Invoke Wlan methods via Ruby use the following syntax: Wlan.method()
<P />e.g. <b>Wlan</b>.enableAdapter</td></tr><tr><td class="clsSyntaxCells clsOddRow">
To Set Wlan parameters via Ruby use the following syntax: Wlan.parameter = 'value' remembering to enclose your value in quotes where appropriate.  
<P />e.g. <b>Wlan</b>.profileGuid = 'value'
</td></tr><tr><td class="clsSyntaxCells clsEvenRow">						
To Set Wlan return events via Ruby use the following syntax: Wlan.event = url_for(:action =&gt; :event_callback) 
<P />e.g. <b>Wlan</b>.adapterPowerStateEvent = url_for(:action =&gt; :wlan_event_callback)
<P />
For more details on the event syntax and parameters see the <a href="RetrievalEvents">Retrieval Events</a> page.
</td></tr><tr><td class="clsSyntaxCells clsOddRow" /></tr></table>


	

##Methods


Items listed in this section indicate methods or, in some cases, indicate parameters which will be retrieved.

<table class="re-table"><col width="10%" /><col width="68%" /><col width="22%" /><tr><th class="tableHeading">Name</th><th class="tableHeading">Description</th><th class="tableHeading">Default Value</th></tr><tr><td class="clsSyntaxCells clsOddRow"><b>enableAdapter</b></td><td class="clsSyntaxCells clsOddRow">Enables the default wireless LAN NIC adapter.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>disableAdapter</b></td><td class="clsSyntaxCells clsEvenRow">Disables the currently enabled wireless LAN NIC adapter.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>getAdapterPowerState</b></td><td class="clsSyntaxCells clsOddRow">Returns the current power state of the WLAN adapter. Immediately fires adapterPowerStateEvent. Subscribe to this event to receive this adapter state.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>resetToDefault</b></td><td class="clsSyntaxCells clsEvenRow">Load the default WLAN out of box profiles.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>deleteProfile</b></td><td class="clsSyntaxCells clsOddRow">Delete the WLAN profile. The profile which is to be deleted has to be set using profileGuid.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>networkLogin</b></td><td class="clsSyntaxCells clsEvenRow">Logs into the currently selected profile. If credentials have been set with profileGuid, networkUsername, networkPassword, and/or networkDomain then these will be used to authenticate. If no credentials are provided an attempt will be made to connect to one of profiles where user credentials are required. If there are more than one such profiles present, all of those will be sent to application by loginCandidateProfilesEvent. User can select one of these profiles by selectLoginProfile paramter and as a result networkLoginEvent will be sent. This will cause Login Launch dialog to pop up where user can provide credentials and call this method again.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>networkLogout</b></td><td class="clsSyntaxCells clsOddRow">Logs out from the currently connected profile.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>cancelNetworkLogin</b></td><td class="clsSyntaxCells clsEvenRow">Cancels the Login prompt notification.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>addProfile</b></td><td class="clsSyntaxCells clsOddRow">Creates and add a new WLAN profile. Input for creation of profile has to be set by profileESSID, profileName, profilePassphrase, profileEncryption and profileSecurityMode. addedProfileEvent is fired.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>connectProfile</b></td><td class="clsSyntaxCells clsEvenRow">Connect to the wlan profile. Current profile if any will be disconnected and the attempt will be made for connection to this profile. The status of connection and ESSID can be retrieved from signal module's signalEvent. The parameter profileGuid should be used to select which profile should be connected to.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>importConfig</b></td><td class="clsSyntaxCells clsOddRow">Import WLAN configuration files (profiles, options, certificates, PACs). Option to consume the profile can be set using deleteAfterImport and importConfigFromLocation parameter.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>getAllProfiles</b></td><td class="clsSyntaxCells clsEvenRow">Enumerates all the WLAN profiles. Fires the allProfilesEvent.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsOddRow"><b>getCurrentProfile</b></td><td class="clsSyntaxCells clsOddRow">Enumerate the current profile. Fires the currentProfileEvent.</td><td class="clsSyntaxCells clsOddRow">
N/A
</td></tr><tr><td class="clsSyntaxCells clsEvenRow"><b>getConnectionState</b></td><td class="clsSyntaxCells clsEvenRow">Returns the current WLAN connection state of the device. Fires the connectionStateEvent.</td><td class="clsSyntaxCells clsEvenRow">
N/A
</td></tr></table>
	

##Events


Values are returned to the caller in RhoElements via Events.  Most modules contain events and those returned from this module are given below along with the event parameters.  Events can cause a navigation to a new URL or a Javascript function on the page to be invoked.  Each event will in most cases have a number of parameters associated with it which will either be strings or javascript arrays.  Event parameters can be accessed either directly or via JSON objects.

<br />
###adapterPowerStateEvent
Returns data on if the radio is enabled or disabled.
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Either "AdapterEnabled" or "AdapterDisabled"</td></tr></table>
<br />
###loginResponseEvent
Fired when network login response occurs
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Either "Success" or "Failed"</td></tr></table>
<br />
###logoutResponseEvent
Fired when network logout response occurs
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Either "Success" or "Failed"</td></tr></table>
<br />
###cancelLoginResponseEvent
Fired when the network login cancel is requested
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Either "Success" or "Failed"</td></tr></table>
<br />
###loginCandidateProfilesEvent
This event is generated when there is more than one possible profile to connect with. This event will be followed up with networkLoginEvent on successful selection of profile by the user. Maximum length of profile name is 28 characters because of data size limitation of RhoElements for a function call. If profile name is more than 28 characters, it will be truncated.
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profiles</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">An array of Strings. Each string is the name of a profile.</td></tr></table>
<br />
###networkLoginEvent
This event is generated, when fusion needs the authentication from user to connect to a pre-defined profile.
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profileGuid</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Candidate profile GUID</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">2</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>profileName</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">Candidate profile Name</td></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">3</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>networkUsername</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Candidate network Username</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">4</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>networkPassword</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">Candidate network Password</td></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">5</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>networkDomain</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Current domain Name</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">6</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>status</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">Status as text message.</td></tr></table>
<br />
###networkLoginCloseEvent
This event is fired when a login dialog is to be closed due to timeout.
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow" /></tr></table>
<br />
###importConfigEvent
Fired when the network login cancel is requested
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Either "ImportSuccess" or "ImportFailed"</td></tr></table>
<br />
###addedProfileEvent
This event is fired when a profile is stored. This event contains data on whether the config items were imported successfully or failed to import.
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profileGuid</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">GUID of the profile which was added successfully. If it is empty, profile addition was unsuccessful.</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">2</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>profileName</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">Candidate profile Name</td></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">3</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profileEssid</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Candidate profile ESSID</td></tr></table>
<br />
###allProfilesEvent
Lists all profiles on the device
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profiles</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">2D Array of profiles which defines the values of key elements of profile. guid: Unique Id of profile. name: Profile name. enabled: Either "TRUE" or "FALSE". type: Either "USER" or "DEVICE". canceled: Either "TRUE" or "FALSE"</td></tr></table>
<br />
###currentProfileEvent
Lists details of the current profile
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profileGuid</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Unique Id of profile</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">2</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>profileEssid</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">ESSID of current profile</td></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">3</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profileName</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Name of profile</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">4</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>profileEnabled</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">Either "TRUE" or "FALSE"</td></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">5</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>profileType</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Either "USER" or "DEVICE"</td></tr><tr><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">6</td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;"><b>profileCanceled</b></td><td class="clsSyntaxCells clsEvenRow" style="text-align:left;">Either "TRUE" or "FALSE"</td></tr></table>
<br />
###connectionStateEvent
Returns the current connection status
<table class="re-table"><col width="3%" /><col width="20%" /><col width="77%" /><tr><th class="tableHeading">ID</th><th class="tableHeading">Name</th><th class="tableHeading">Description</th></tr><tr><td style="text-align:left;" class="clsSyntaxCells clsOddRow">1</td><td style="text-align:left;" class="clsSyntaxCells clsOddRow"><b>status</b></td><td style="text-align:left;" class="clsSyntaxCells clsOddRow">Possible Value: "Disconnected", "Associating", "Associated", "Authenticating", "Authenticated", "Connected"</td></tr></table>





##Requirements

<table class="re-table"><tr><th class="tableHeading">RhoElements Version</th><td class="clsSyntaxCell clsEvenRow">2.2 or above
</td></tr><tr><th class="tableHeading">Supported Devices</th><td class="clsSyntaxCell clsOddRow">Devices with Fusion module</td></tr><tr><th class="tableHeading">Minimum Requirements</th><td class="clsSyntaxCell clsOddRow">Fusion module</td></tr><tr><th class="tableHeading">Persistence</th><td class="clsSyntaxCell clsEvenRow">Partially Persistent - Changes to the parameters and events of this module will not persist when navigating to a new page. Enable and Disable methods do persist.</td></tr></table>


##HTML/Javascript Examples

Enable/disable the radio on a button click

	<html>
	<head>
	    <script type="text/javascript">
	        function enableRadio()
	        {
	            wlan.enableAdapter();
	        }
	    
	        function disableRadio()
	        {
	            wlan.disableAdapter();
	        }
	    </script>
	</head>
	<body>
	    <button onclick="enableRadio()">Enable Radio</button>
	    <button onclick="disableRadio()">Disable Radio</button>
	</body>
	</html>
	


