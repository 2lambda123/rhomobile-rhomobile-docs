# RhoStudio

RhoStudio is an Eclipse installation that facilitates development of native smartphone applications.

Use RhoStudio to:

* Generate Rhodes application(s).
* Generate Rhodes Model(s) and associated Controllers and View templates.
* Manage build configuration (build.yml and rhobuild.yml) using the RhoStudio/Eclipse UI.
* Build and run on Rhodes application on iPhone, Android, Windows Mobile, and BlackBerry simulators and devices.
* See the build and application execution logs in Eclipse output console.

## Installing RhoStudio

### Installing on Macintosh

If you're running Macintosh, download the latest [RhoStudio for Macintosh](http://rhomobile.com/rhostudio-mac).

When the download finishes, click on the RhoStudioInstaller.dmg file to open it. You will get a window similar to this:

<img src="http://rhodocs.s3.amazonaws.com/rhodes-devel/rhostudio-mac-install.png" alt="RhoStudioInstaller Mac" />

Run the install gems script (double-click on install gems). A terminal window will open; wait for the gems install process to complete.

Then drag RhoStudio to the Applications folder.

### Installing on Windows

If you're running Windows, download the latest [RhoStudio for Windows] and run the download file to install RhoStudio.

### Installing the Java Development Kit

You need to have the Java Development Kit (JDK) installed.

If you are planning to build for Blackberry or Android, make sure you have JDK version 1.6.0_2 or higher installed. The recommended version is 6.0 update 11.

For Macintosh, JDK version 1.6.0_24 for Mac OSX 10.6 is available [here](http://support.apple.com/downloads/DL1360/en_US/JavaForMacOSX10.6Update4.dmg). Install it and then run "Java Preferences" utility to change default version.

The Sun JDK for Windows is available [here](http://java.sun.com/javase/downloads/index.jsp). The 32-bit Windows version of the JDK is required for Blackberry tools. 

Then in RhoStudio Preferences, open Rhomobile->Android and set the path to your JDK installation.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/preferences-jdk.png"/>

### Installing the SDK

You need to install the proper SDK set up for the platform for which you want to develop a Rhodes app. And in RhoStudio Preferences, you need to point to the SDK (except for iOS on the Macintosh; the iOS SDK path is set automatically). For complete instructions on setting up the SDKs for each platform, refer to [the Build instructions for Rhodes](build).

For example, if you wish to develop Android apps, download and install:

* The [Android SDK Package](http://developer.android.com/sdk/index.html).
* The [Android NDK package](http://developer.android.com/sdk/ndk/index.html).

Then in RhoStudio Preferences, open Rhomobile->Android and set the paths to your Android SDK and NDK installations.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/preferences-android-sdk.png"/>

## Editing the SDK and JDK Locations

Use RhoStudio preferences to edit the rhobuild.yml file, which manages the location(s) of the platform SDK-s/JDK-s that are used to build your Rhodes application. rhobuild.yml is located in the Rhodes gem folder (or, if you copied Rhodes from git, in the Rhodes source code folder). To edit rhobuild.yml, open RhoStudio->Preferences.

## Checking the JDK

In the Preferences window, select Rhomobile to display the location of the Java Development Kit (JDK). You can check to see if this is the location of your JDK.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/preferences-rhomobile.png"/>

On Macintosh computers, once you have installed Xcode, RhoStudio will know the location of the iOS SDK. You do not set any locations.

### Setting the Android SDK and NDK

To set your RhoStudio preferences for developing Android apps:

In the Preferences window, open the Rhomobile item and select Android.

Click the Browse button and navigate to the locations where you installed your Android SDK and NDK.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/preferences-android.png"/>

### Setting the Blackberry SDK

On Windows computers, you can use RhoStudio to develop apps for BlackBerry. 

In the Preferences window, open the Rhomobile item and select Blackberry. You will see the default paths and settings for Blackberry, such as the Blackberry JDE and MDS server paths, the Blackberry version, and the Simulator device name. If your setup is different, you can click the Browse buttons to navigate to the correct paths, and you can set the correct names and select your Blackberry version.

### Setting the Windows Mobile SDK

In the Preferences window, open the Rhomobile item and select Windows Mobile. You will see the default path to the CAB wizard utility that is used by the build script to build the Windows Mobile cab file. If this is not the correct path, click on the Browse button and navigate to the correct path.

Generate a Rhodes Application
---------------------

In RhoStudio, select File->New->Project...

The New Project window opens. Select the Rhodes application wizard and click the Next button.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/new-project.png"/>

Enter the name for your Rhodes application in Project name; in this case, "storemanager". You may specify a specific folder for your destination where your project is stored, by default, the destination is your RhoStudio workspace folder. Then press the Finish button.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/rhodes-application-wizard.png"/>

After pressing the Finish button, you'll see the Rhodes app generator script output in the output console (Rhomobile build console).

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/rhodes-app-generator-output.png"/>

Generate a Rhodes Model
---------------------
Rhodes applications support a Model-View-Controller (MVC) pattern.  To start our application, we will generate a Model. To generate a Rhodes model and create the associated Controller and View templates, right-click on the application project in the Project Explorer and select New->Rhodes model.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/menu-new-rhodes-model.png"/>

In the Model Information window, enter the name for your model: in this case, Product. Also enter the Model attributes as a string with no spaces and each attribute separated by a comma: in this case, name,brand,price,quantity,sku. (Whitespaces at the field name beginning and end will be trimmed and whitespaces in the middle of the field name will be replaced with an underscore character.)

Click the Finish button to create the model.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/model-information.png"/>

After pressing the Finish button, you'll see the Rhodes model generator script output in the output console (Rhodes build log console).

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/rhodes-model-generator-output.png"/>

You should now see a 'Product' folder below the 'app' folder in your storemanager application. These files constitute the Model, Views and Controller file for the Product Model we just created. The files are organized as follows:

* product.rb -> This is the Model file which contains the Model definition.  Since we are using the default PropertyBag definition, we don't need to modify this file any further.
* product_controller.rb -> This file contains the business logic which relates to our Model.
* *.erb -> The .erb files are the html view template files. We'll be modifying them in the next section.

## Editing Rhodes Views

You may edit the generated ERB files to customize the HTML as you see fit. Typically you will provide links to the model index page from the home screen. In order to accomplish this, a modification needs to be made to the default view for the application, called index.erb. Below is the content for the StoreManager app's generated top level index.erb file (app/index.erb). Open this file for editing.

    :::html
    <div data-role="page" data-url="<%= Rho::RhoConfig.start_path %>/">
	
	  <div data-role="header" data-position="inline">
	    <h1>Storemanager</h1>
	    <% if SyncEngine::logged_in > 0 %>
	    <a href="<%= url_for :controller => :Settings, :action => :do_sync %>" class="ui-btn-left" data-icon="refresh">
	      Sync
	    </a>
	    <a href="<%= url_for :controller => :Settings, :action => :logout %>" class="ui-btn-right" data-icon="star">
	    Logout
		  </a>
	    <% else %>
	        <a href="<%= url_for :controller => :Settings, :action => :login %>" class="ui-btn-right" data-icon="star">Login</a>
	    <% end %>
	  </div>
	
	  <div data-role="content">
	    <ul data-role="listview">
	      <li><a href="#">Add link here...</a></li>
	    </ul>
	  </div>
	
	</div>

To provide a link to the Product model’s index page and templates, replace the list item with the title 'Add link here' with the following:

	:::html
	<li>
		<a href="Product">
			<span class="title">Products</span>
		</a>
	</li>

This change now means that when the index.erb view is displayed (the default view when the app starts), you will see a UI element called "Products" that will take you to the controller for the "Product" Model definition. Because no specific action is provided, the controller will default to displaying the Model's index page, in this case the Product model's index page. All further functionality in the app is carried out by the default scaffolding of the generated controller and view files. These generated files provide basic CRUD (Create, Read, Update, Delete) functionality for your Model.

NOTE: You can edit the top level app page or any of the other view templates with any HTML you wish. We don’t attempt to teach you HTML or Ruby here, but there are many good external references for both topics.

## Managing Your Build Configuration

The build.yml file for your application manages your Rhodes build time configuration. Double click on 'build.yml' item in your project tree to open the build.yml editor. In the editor you'll see two tabs: Rhobuild setting for the WYSIWIG editor, and build.yml for the text editor.

Rhobuild setting WYSIWIG editor:

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/buildyml-rhobuildsetting.png"/>

build.yml text editor:

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/buildyml-textedit.png"/>

You will have default values for your application name, log file (the log file will be located in your application folder after you run your application), and the path to the Rhodes gem. You can use the WYSIWIG editor to change this. For example, you might want to point to a different RHodes gem if you have more than one Rhodes gem installed.

You can add capabilities to your application, such as camera and vibrate, by pressing the Capabilities: Add button, selecting the capabilities from the popup window, and clicking the Ok button.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/select-capabilities.png"/>

The selected application capabilities will appear in the Capabilities: text field in the WISIWIG editor.

## Building and Running Your Application

To start the build process, create a Run Configuration: select your project in the Project Explorer, and select Run->Run Configurations... from the menu. The Run Configurations window appears.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/run-configurations.png"/>

To create a new build configuration for your application, select Rhodes Application. Then either right-click on Rhodes Application or click the New button. A new configuration appears under Rhodes Application.

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/run-config-rhodes-new-rhodes.png"/>

### Building and Running with RhoSimulator

When you click the Run button, and you have the Simulator type set to the default of RhoSimulator, RhoStudio builds and runs your Rhodes application in RhoSimulator. This will ignore the Platform, and it builds and runs very quickly, and thus is very useful for testing your application before you try it on a mobile platform. RhoSimulator also has a Web Inspector.

RhoSimulator for the storemanager application:

<img src="http://rhodocs.s3.amazonaws.com/rhostudio-tutorial/run-config-rhodes-new-rhodes.png"/>

### Building and Running for a Mobile Platform

When you wish to build and run your application for a mobile platform, select the configuration you wish in the Run Configurations window. Then set the information for your platform.

For example, when you wish to build and run for Android:

 * Set the Platform to Android.
 * Set the Simulator type to either device or simulator.
 * If you set the Simulator type to simulator, set the Platform version number and set the AVD name for Android.

Press the Run button to build and run your application. The build output will appear in the Rhodes build output console. The application log will be available in the Rhodes application output console, and will be written into your application folder.
