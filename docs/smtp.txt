Outbound Email / SMTP
=====================

Heroku does not provide an outgoing mail service but does allow the use of an
external SMTP server. For production use, we recommend our [Sendgrid](sendgrid) add-on which 
lets you scale from very light requirements to thousands of emails per day with no 
change in configuration. If you need to send fewer than 500 emails per day, we also 
offer a [GMail add-on](gmail-smtp).


Sending email from Rails
------------------------

Here's a quick guide to setting up a Rails app to send email with an external
SMTP provider.  Note that if you're using an SMTP add-on, you do not need to configure your SMTP connection.  You can skip straight to Step #3.

### 1. Set the delivery method

In `config/environment.rb` set ActionMailer's delivery method to SMTP:

    config.action_mailer.delivery_method = :smtp

### 2. Configure your SMTP connection

    {ruby}
    ActionMailer::Base.smtp_settings = {
      :address  => "smtp.someserver.net",
      :port  => 25,
      :user_name  => "someone@someserver.net",
      :password  => "mypass",
      :authentication  => :login
    }

You'll want to make sure Rails raises errors on mail delivery, so turn that on
as well like this:

    config.action_mailer.raise_delivery_errors = true

### 3. Build a Mailer class

Start by creating a mailer class:

    script/generate mailer <name>

Where `<name>` is the class name (like, Notifier). Rails mailers are somewhat
similar to controllers in that both have one method for each action, each one
having one template under `views/<class_name>`. For mailers, each method is the
definition of an email message: who is the recipient, what’s the subject, etc.
The email body is contained in the view.

Here's an example:

    {ruby}
    class UserMailer < ActionMailer::Base
      def signup_notification(user)
        recipients "#{user.name} <#{user.email}>"
        from       "My Forum "
        subject    "Please activate your new account"
        sent_on    Time.now
        body       { :user => user, :url => activate_url(user.activation_code, :host => user.site.host }
      end
    end

And the view in `app/views/user_mailer/signup_notification.rhtml` looks like
this:

    Your account has been created.

    Username: 
    Password: 
    Visit this url to activate your account:

Now you are ready to send emails. You can manually send one from the console to
make sure it’s working:

    $ heroku console
    >>> user = User.new(:name => 'Me', :email => 'me@gmail.com', :login => 'me', :password => '1234')
    >>> UserMailer.deliver_signup_notification(user)

Check the output of "heroku logs" to see whether the email was sent.

Once you've verified it as working, you'll probably want to hook it into your model:

    {ruby}
    after_create :deliver_signup_notification
    def deliver_signup_notification
      UserMailer.deliver_signup_notification(self)
    end
