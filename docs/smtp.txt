Outbound Email / SMTP
=====================

Heroku does not provide an outgoing mail service but does allow the use of an
external SMTP server. For production use, we recommend our Sendgrid add-on which 
lets you scale from very light requirements to thousands of emails per day with no 
change in configuration. If you need to send fewer than 500 emails per day, we also 
offer a GMail add-on.

Sendgrid SMTP add-on
-----------------

[Sendgrid](http://www.sendgrid.com/) offers a modern, API driven approach to SMTP delivery. Several plans are available through the Heroku add-on, starting with their free plan offering 200 messages per day. All you need to get going with Sendgrid is to enable the add-on:

    $ heroku addons:add sendgrid
    Adding sendgrid to myapp...done.
    
This automatically creates a Sendgrid account for you, and configures ActionMailer to use it by default. See the guide below for [how to send email from Rails with ActionMailer](#sending-email-from-rails). Remember that Sendgrid lets you specify a from-address for your emails.

NOTE: The Sendgrid add-on will only work for Rails apps with ActionMailer installed.

GMail SMTP add-on
-----------------

Google offers free outbound SMTP services as part of Gmail, up to 500 emails
per day.  Enable it as follows:

    $ heroku addons:add gmail_smtp user=you@gmail.com password=yourpass
	 Adding gmail_smtp to myapp...done.

Use your existing GMail account or create a new one just for your app.  You can
also use a Google Apps hosted domain, just substitute you@yourdomain.com for
you@gmail.com.

Once activated, ActionMailer will be automatically configured to send through
your GMail account.  See [below](#sending-email-from-rails) if you're not
already using ActionMailer.

NOTE: The From header on the email will always be the GMail email address, so
use account with the email you want people to see and potentially reply to.

You don't need to install any additional plugins or gems in your app to use
this add-on; a plugin is installed at deploy time as part of the slug compile
process.  You also don't need to configure ActionMailer in your code.  You
should therefore delete the smtp_tls plugin, any ActionMailer initializer, or
any other support libraries that you have have formerly installed in your app
to enable sending mail through GMail or other external SMTP provider.

NOTE: The GMAIL_SMTP_USER and GMAIL_SMTP_PASSWORD config vars are stored based
on the values specified by user= and password= during the addon install.  You
can view and update these values using heroku config, heroku config:add, etc
commands as you would any other config vars.

External SMTP providers
-----------------------

There are a large number of free and commercial SMTP providers that can be taken
advantage of by apps running on Heroku. The following list are the most popular
services we see in use on Heroku:

### AuthSMTP

Heroku recommends [AuthSMTP](http://www.authsmtp.com/) for app's that have
serious email demands. They have a [range of plans](http://www.authsmtp.com/auth-smtp/pricing.html)
and are known for exceptional performance and availability.

### Gmail

Although the GMail SMTP add-on described above is the easiest way to use GMail SMTP from Heroku, you can also manually configure it, as described in [this tutorial](http://ruby.dzone.com/news/rails-gmail-simple-email-deliv).

Sending email from Rails
------------------------

Here's a quick guide to setting up a Rails app to send email with an external
SMTP provider.

### 1. Set the delivery method

In `config/environment.rb` set ActionMailer's delivery method to SMTP:

    config.action_mailer.delivery_method = :smtp

### 2. Configure your SMTP connection

    {ruby}
    ActionMailer::Base.smtp_settings = {
      :address  => "smtp.someserver.net",
      :port  => 25,
      :user_name  => "someone@someserver.net",
      :password  => "mypass",
      :authentication  => :login
    }

You'll want to make sure Rails raises errors on mail delivery, so turn that on
as well like this:

    config.action_mailer.raise_delivery_errors = true

### 3. Build a Mailer class

Start by creating a mailer class:

    script/generate mailer <name>

Where `<name>` is the class name (like, Notifier). Rails mailers are somewhat
similar to controllers in that both have one method for each action, each one
having one template under `views/<class_name>`. For mailers, each method is the
definition of an email message: who is the recipient, what’s the subject, etc.
The email body is contained in the view.

Here's an example:

    {ruby}
    class UserMailer < ActionMailer::Base
      def signup_notification(user)
        recipients "#{user.name} <#{user.email}>"
        from       "My Forum "
        subject    "Please activate your new account"
        sent_on    Time.now
        body       { :user => user, :url => activate_url(user.activation_code, :host => user.site.host }
      end
    end

And the view in `app/views/user_mailer/signup_notification.rhtml` looks like
this:

    Your account has been created.

    Username: 
    Password: 
    Visit this url to activate your account:

Now you are ready to send emails. You can manually send one from the console to
make sure it’s working:

    $ heroku console
    >>> user = User.new(:name => 'Me', :email => 'me@gmail.com', :login => 'me', :password => '1234')
    >>> UserMailer.deliver_signup_notification(user)

Check the output of "heroku logs" to see whether the email was sent.

Once you've verified it as working, you'll probably want to hook it into your model:

    {ruby}
    after_create :deliver_signup_notification
    def deliver_signup_notification
      UserMailer.deliver_signup_notification(self)
    end
