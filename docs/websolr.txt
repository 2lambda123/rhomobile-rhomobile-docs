# Websolr Add-on

[Websolr](http://websolr.com) is a managed search service provided by [Onemorecloud](http://onemorecloud.com/) and powered by Apache Solr. The Websolr add-on allows you to use the high performance functionality of Solr in your application today.

## Install the add-on

    :::term
    $ heroku addons:add websolr

## Choosing a Solr client

The Apache Solr search server presents an API, and there are a number of open source clients to choose from. We recommend [Sunspot](http://outoftime.github.com/sunspot), although you may choose to use others. We provide more general client configuration at the end of this document.

## Installing Sunspot with Rails 2.3

As of this writing, the current release of Sunspot is version 1.1. Sunspot provides a Rails plugin as a gem, named `sunspot_rails`.

### Installing Sunspot using Bundler

First review the [Bundler documentation for Rails 2.3 applications](http://gembundler.com/rails23.html) to make sure your application is configured to use Bundler correctly.

Once you have set up your application to use Bundler, add the `sunspot_rails` gem to your Gemfile.

    gem 'sunspot_rails', '~> 1.1'

Run `bundle install` to install Sunspot into your local environment.

### Installing Sunspot using a .gems manifest

If your application is not using Bundler, you may install Sunspot using your .gems manifest. From your application's directory, run the following commands:

    :::term
    sudo gem install sunspot_rails
    echo sunspot_rails >> .gems

Next, use the following `config.gem` statement in `config/environment.rb`:

    config.gem 'sunspot_rails', '~> 1.1'


## Installing Sunspot 1.2 with Rails 3

The impending release of Sunspot 1.2 supports both Rails 3 and Rails 2.3 applications. As of this writing it is in release candidate status, and we will be installing it from its master branch in git. Simply add the following line to your application's `Gemfile`:

    gem 'sunspot_rails', :git => 'http://github.com/outoftime/sunspot.git'

Next, run `bundle install` to install Sunspot into your local environment. That's it!

## Configure Sunspot

Once the `sunspot_rails` plugin is installed, you need to configure Sunspot to connect to your Websolr index in production. The URL for your Websolr index is stored in the environment variable `WEBSOLR_URL`. Create a Rails initializer file at `config/initializers/websolr.rb` with the following line of code:

    Sunspot.config.solr.url = ENV['WEBSOLR_URL']

When a value is provided for the `WEBSOLR_URL` environment variable, Sunspot will connect to that URL. If no value is present, it will attempt to connect to a Solr server running on localhost.

If you would like more fine-grained control over which Solr servers you are using in different environments, you may run `script/generate sunspot` to create a Sunspot configuration file at `config/sunspot.yml`.

Sunspot provides Rake tasks to start and stop a local Solr server for development and testing. In order to use these Rake tasks, add the following line to your application's `Rakefile`:

    require 'sunspot/rails/tasks'

You may wish to familiarize yourself with the available tasks by running `rake -T sunspot`.

## Using Sunspot

With Sunspot you configure your models for searching and indexing using a Ruby DSL. By default, your records are automatically indexed when they are created and updated, and removed from the index when destroyed.

### Setting up models for indexing

Here is a simple example of using Sunspot's `searchable` block and DSL to configure an ActiveRecord model.

    :::ruby
    class Post < ActiveRecord::Base
      searchable do
        text    :title
        text    :body
        string  :permalink
        integer :category_id
        time    :published_at
      end
    end

To learn more, refer to the following article at the [Sunspot wiki](http://wiki.github.com/outoftime/sunspot/):

- [Setting up classes for search and indexing](http://wiki.github.com/outoftime/sunspot/setting-up-classes-for-search-and-indexing)

### Searching your models

To search the model in the above example, you may use something like the following:

    :::ruby
    @search = Post.search { keywords 'hello' }
    @posts  = @search.results

(If your model already defines a `search` method, you may use the `solr_search` method instead, for which `search` is an alias.)

Sunspot exposes the full functionality of Solr. To learn more about searching your models, refer to the following articles at the Sunspot wiki:

- [Full-text search with sunspot](http://wiki.github.com/outoftime/sunspot/fulltext-search)
- [Sunspot search options](http://wiki.github.com/outoftime/sunspot/working-with-search)

### Running a local Solr server with Sunspot

Sunspot comes bundled with a Solr server for use in your local development environment. To start and stop this Solr server, use the following commands.

    :::term
    rake sunspot:solr:start
    rake sunspot:solr:stop

### Populating or reindexing existing data

If you are adding Websolr to an application with existing data in your development or production environment, you will need to "re-index" your data. Likewise, if you make changes to a model's `searchable` configuration, or change your index's configuration at the [Websolr control panel](http://websolr.com/slices), you will need to reindex for your changes to take effect.

In order to reindex your production data, you may run a command similar to the following from your application's directory:

    heroku rake sunspot:reindex

If you are indexing a large number of documents, or your models us a lot of memory, you may need to reindex in batches smaller than Sunspot's default of 500. We recommend starting small and gradually experimenting to find the best results.

    heroku rake sunspot:reindex[10]

### Indexing asynchronously with Heroku Workers

Queuing your updates to Solr is a perfect job for Heroku's [Delayed Job Workers](/delayed-job). Sending updates to Solr has the advantage of increasing your application's performance and robustness. Simply add the following line to your model after the `searchable` block:

    handle_asynchronously :solr_index

## Using a different Solr client

There are other Ruby clients, including the venerable `acts_as_solr`. If you are already using one of these clients and are not interested in switching your application to Sunspot, here are a few pointers for using Websolr in production.

Your index's URL is set in the `WEBSOLR_URL` environment variable. If your Solr client can be configured at runtime, we recommend creating a Rails initializer at `config/initializer/websolr.rb` in which you instruct your client to connect to `ENV['WEBSOLR_URL']` when present.

Alternatively, you may run `heroku config --long` from your application's directory to view the value for `WEBSOLR_URL` and update the relevant configuration file for your particular Solr client.

Selecting your index at the Websolr control panel will allow you to select from among other common client configurations, or enter your own schema.xml.

## Configuring your index

When your index is first created, it will be automatically configured using the latest default Sunspot `schema.xml`.

Websolr provides a control panel at [http://websolr.com/](http://websolr.com/) where you may make changes to your index, such as adding or removing different Solr features, selecting a different Solr client, providing your own `schema.xml` and so on.

You may log in to the Websolr control panel at [http://websolr.com/](http://websolr.com/) using your account's Websolr username and password, which you may find by running `heroku config --long` from your application's directory.

# Questions?

If you have questions specific to Solr and Websolr, you may visit [http://help.websolr.com/](http://help.websolr.com/) for further assistance.
