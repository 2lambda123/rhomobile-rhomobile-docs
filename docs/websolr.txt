Websolr Add-on
==============

[Websolr](http://www.websolr.com) is a hosted service run by [Onemorecloud](http://www.onemorecloud.com). The Heroku Websolr add-on provides complete integration: all you need to do is install the add-on and use either the `websolr-acts_as_solr` or `websolr-sunspot_rails` gem from your app.

Local setup
-------------------

There are two great solutions for indexing and searching your models: `acts_as_solr` and Sunspot. At a high level, `acts_as_solr` may be the easier to set up, whereas Sunspot provides a richer Ruby API and, as of this writing, is more actively maintained. The developer of Sunspot also posted a [detailed comparison](http://groups.google.com/group/ruby-sunspot/msg/cac676e5740aeb20) of the two plugins.

### 1. Sunspot

Websolr provides a gem, `websolr-sunspot_rails`, which is an interface for the latest `sunspot` gem and `sunspot_rails` plugin. It handles installation of the `sunspot` gem for you via its gem dependencies, and it sets up your production Solr configuration for you automatically.

#### Installation using Bundler

If your application is running on Rails 2.3, first review the [Bundler documentation for Rails 2.3 apps](http://gembundler.com/rails23.html) to make sure you are configured to load gems with Bundler correctly.

Next, simply add the `websolr-sunspot_rails` gem to your `Gemfile`:

    gem 'websolr-sunspot_rails'

You can install the gem into your local development environment with `gem install websolr-sunspot_rails` or by running `bundle install`.

#### Installation using .gems

Go to your Rails application directory, install the `websolr-sunspot_rails` gem and add it to your gem manifest:

    :::term
    sudo gem install websolr-sunspot_rails
    echo websolr-sunspot_rails >> .gems

Now, add the gem to config/environment.rb

    config.gem "websolr-sunspot_rails"

#### Finalizing Sunspot installation

Once the `websolr-sunspot_rails` gem is installed and being loaded by your application, you need to generate a Sunspot configuration file and add the Sunspot rake tasks:

    :::term
    ./script/generate sunspot
    echo "require 'sunspot/rails/tasks'" >> Rakefile

#### Making models searchable

With Sunspot you use a "searchable" block to configure your models for search and indexing. By default, models are indexed whenever they are saved, and removed from the index whenever they are destroyed.

    :::ruby
    class Post < ActiveRecord::Base
      searchable do
        text :title, :body
      end
    end

You may refer to the [Sunspot documentation](http://wiki.github.com/outoftime/sunspot/setting-up-classes-for-search-and-indexing) for full details on what can go in the configuration block.

To search the model above:

    :::ruby
    Post.search { keywords 'hello' }

Sunspot exposes the full functionality of Solr. Read more about [search options](http://wiki.github.com/outoftime/sunspot/working-with-search) and [fulltext search](http://wiki.github.com/outoftime/sunspot/fulltext-search).

#### Running a local Solr server with Sunspot

    :::term
    rake sunspot:solr:start
    rake sunspot:solr:stop


### 2. `acts_as_solr`

#### Installation with Bundler

If your application is running on Rails 2.3, first review the [Bundler documentation for Rails 2.3 apps](http://gembundler.com/rails23.html) to make sure you are configured to load gems with Bundler correctly.

Next, simply add the `websolr-acts_as_solr` gem to your `Gemfile`:

    gem 'websolr-acts_as_solr'

You can install the gem into your local development environment with `gem install websolr-acts_as_solr` or by running `bundle install`.


#### Installation with .gems

Start by installing the `websolr-acts_as_solr` gem:

    :::term
    sudo gem install websolr-acts_as_solr

Add the gem to your gem manifest:

    :::term
    echo websolr-acts_as_solr >> .gems

Next, add `websolr-acts_as_solr` as a dependency in your Rails app by adding a `config.gem` statement to `config/environment.rb`:

    :::term
    config.gem "websolr-acts_as_solr"

#### Finalizing `acts_as_solr` installation

Once the `websolr-acts_as_solr` gem is installed and being loaded by your application, you need to generate a configuration file and add the `acts_as_solr` rake tasks.

First, you should run the `acts_as_solr` command line generator to add the `config/solr.yml` file. (Note: You will not need to configure this file for production, but `acts_as_solr` expects it to be present.)

    :::term
    acts_as_solr install

Finally, install the rake tasks to let you start a local Solr server and perform other Solr-related tasks:

    :::term
    echo "require 'aas_tasks'" >> Rakefile

#### Making models searchable

Indexing your models is incredibly simple with `acts_as_solr`:

    :::ruby
    class Post < ActiveRecord::Base
      acts_as_solr
    end

Here's an example of searching:

    :::term
    $ Post.find_by_solr "hello world"

#### Running a local Solr server

    :::term
    rake solr:start
    rake solr:stop

Heroku Configuration
--------------------

Running Websolr on Heroku is easy.

### 1. Enable the add-on

    :::term
    heroku addons:add websolr

### 2. You're running!

### 3. There is no step 3.
