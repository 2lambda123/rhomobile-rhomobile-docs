{"visibility":"place","subject":"Database","content":{"type":"text/html","text":"<div class='tableofcontents'> </div>\n\n<h2>Overview</h2>\n\n<p>Database is low-level API to access SQLite local database.</p>\n\n\n<p>This API used internally by RHOM. To use RHOM, just define your models and partition databases will be created automatically.</p>\n\n\n\n\n<h2>Enabling the API</h2>\n\n\n\n\n<p>This API is part of the <code>coreapi</code> extension that is included automatically.</p>\n\n\n\n\n<pre name=\"code\" class=\"ruby\">extensions: [\"coreapi\"]\n</pre>\n\n\n\n\n<h2>JavaScript Usage</h2>\n\n\n\n\n<p>Be sure to review the <a href=\"/guide/api_js\">JavaScript API Usage</a> guide for important information about using this API in JavaScript.</p>\n\n\n\n\n<h2>Ruby Usage</h2>\n\n\n\n\n<p>Be sure to review the <a href=\"/guide/api_ruby\">Ruby API Usage</a> guide for important information about using this API in Ruby.</p>\n\n\n<h2>Methods</h2>\n\n<h3><span class=\"label label-inverse\"> Destructor</span> close()</h3>\n\n<p>Closes the database. The database will not be accessible until it is opened again.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li>Class Method: This method is a destructor and can only be accessed via the object that was created by the `new` constructor. <ul><li><code>myObj.close()</code> </li></ul></li></ul>\n\n\n<h3>commitTransaction()</h3>\n\n<p>Commit database transaction. Saves all updates to the database from the start of the transaction.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.commitTransaction()</code></li></ul></li></ul>\n\n\n<h3>destroyTable(<span class=\"text-info\">STRING</span> tableName)</h3>\n\n<p>Destroys a database table.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>tableName : <span class='text-info'>STRING</span><p>\nTable name to destroy. </p></li><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.destroyTable(<span class=\"text-info\">STRING</span> tableName)</code></li></ul></li></ul>\n\n\n<h3>destroyTables(<span class=\"text-info\">HASH</span> propertyMap)</h3>\n\n<p>Destroy a list of database tables.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>propertyMap : <span class='text-info'>HASH</span><p> </p></li><ul><li>include : <span class='text-info'>ARRAY</span><p>\nInclude tables. </p></li><li>exclude : <span class='text-info'>ARRAY</span><p>\nExclude tables. </p></li></ul><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.destroyTables(<span class=\"text-info\">HASH</span> propertyMap)</code></li></ul></li></ul>\n\n\n<h3>executeBatchSql(<span class=\"text-info\">STRING</span> sqlStmt)</h3>\n\n<p>Execute a series of sql statements included in the sqlStmt string parameter.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>sqlStmt : <span class='text-info'>STRING</span><p>\nThe SQL statement. </p></li><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.executeBatchSql(<span class=\"text-info\">STRING</span> sqlStmt)</code></li></ul></li></ul>\n\n\n<h3>executeSql(<span class=\"text-info\">STRING</span> sqlStmt, <span class=\"text-info\">ARRAY</span> args)</h3>\n\n<p>Execute the sql statement specified in the method&rsquo;s parameters.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>sqlStmt : <span class='text-info'>STRING</span><p>\nThe SQL statement. </p></li><li>args : <span class='text-info'>ARRAY</span> <span class='label label-info'>Optional</span><p>\nArray of the sql expressions. </p></li><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Callback</h4>\n\n<p>Async Callback Returning Parameters: <span class='text-info'>ARRAY</span></p><ul></ul></p>\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>ARRAY :\nArray of Hashes. Each Hash item represents record from Database.</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.executeSql(<span class=\"text-info\">STRING</span> sqlStmt, <span class=\"text-info\">ARRAY</span> args)</code></li></ul></li></ul>\n\n\n<h3><span class=\"label label-inverse\"> Constructor</span>  new Rho.Database(<span class=\"text-info\">STRING</span> dbPath, <span class=\"text-info\">STRING</span> dbPartition)</h3>\n\n<p>This method is a constructor for this class. Instead of saying Rho.Database.initialize(dbPath,dbPartition) you would use new Rho.Database(dbPath,dbPartition). ex: <code>var db = new Rho.Database(Rho.Application.databaseFilePath('test'), 'test');</code> Make sure you issue a <code>.close()</code> when you are finished using the database. If the database file does not exist it will be created using a SQL schema: rhodes\\platform\\shared\\db\\res\\db\\syncdb.schema. Do not use predefined partition names: app, user, local. Do not open the same database file in different partitions. Do not use the same partition for different database files. Do not open the same file twice.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>dbPath : <span class='text-info'>STRING</span><p>\nThe path to the database. Databases stored at the path provided by Rho::Application.databaseFilePath. </p></li><li>dbPartition : <span class='text-info'>STRING</span><p>\nThe database partition. Used as a file name for database and when connecting to RhoConnect server. </p></li><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li>Class Method: This method is a constructor and can only be accessed via the `new` construct. <ul><li><code>var myObj = new Rho.Database(<span class=\"text-info\">STRING</span> dbPath, <span class=\"text-info\">STRING</span> dbPartition)</code> </li></ul></li></ul>\n\n\n<h3>isTableExist(<span class=\"text-info\">STRING</span> tableName)</h3>\n\n<p>Will return true or false if the specified table exists in the current database.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>tableName : <span class='text-info'>STRING</span><p>\nThe name of the table. </p></li><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Callback</h4>\n\n<p>Async Callback Returning Parameters: <span class='text-info'>BOOLEAN</span></p><ul></ul></p>\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>BOOLEAN</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.isTableExist(<span class=\"text-info\">STRING</span> tableName)</code></li></ul></li></ul>\n\n\n<h3>rollbackTransaction()</h3>\n\n<p>Rollback database transaction. This will cancel any pending actions to the database that were executed since the last Start and before a commit.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.rollbackTransaction()</code></li></ul></li></ul>\n\n\n<h3>startTransaction()</h3>\n\n<p>Start database transaction. All operations will not be the saved to the database until a commit is executed.</p>\n\n<h4>Parameters</h4>\n\n<ul><li>callback : <span class='text-info'>CallBackHandler</span></li></ul>\n\n\n<h4>Returns</h4>\n\n<p>Synchronous Return:<ul><li>Void</li></ul></p>\n\n<h4>Platforms</h4>\n\n<ul>\n<li>Javascript</li>\n<li>Ruby</li>\n<li>Android</li>\n<li>iOS</li>\n<li>Windows Embedded</li>\n<li>Windows Phone 8</li>\n<li>Windows Desktop</li>\n</ul>\n\n\n<h4>Method Access:</h4>\n\n<ul><li><i class=\"icon-file\"></i>Instance Method: This method can be accessed via an instance object of this class: <ul><li><code>myObject.startTransaction()</code></li></ul></li></ul>\n\n\n<h2>Examples</h2>\n\n<h3>Using Transactions</h3>\n\n<p>To insert/update multiple object/models use database transactions. This is the most performant method to initialize your application with a large set of data.</p>\n\n<pre name=\"code\" class=\"javascript\">var db = Rho.Database;\ndb.startTransaction();\ntry\n{\n  for (var index in items) {\n    // create hash of attribute/value pairs\n    data = {\n      field1 : item[index].value1, \n      field2 : item[index].value2\n    }; \n    // Creates a new itemModel object and saves it\n    new_item = itemModel.create(data);\n  }\n  \n db.commitTransaction();\n}\ncatch\n{\n db.rollbackTransaction();\n}\n\n              \n</pre>\n\n\n<h3>Open and close database</h3>\n\n<p>The following example opens the database using the <code>constructor</code> method: .initialize. It then closes the database using the destructor method <code>.close()</code></p>\n\n<pre name=\"code\" class=\"javascript\">var db = new Rho.Database(Rho.Application.databaseFilePath('test'), 'test');\ndb.close();\n\n              \n</pre>\n\n\n<h3>destroyTables</h3>\n\n<p>Destroy multiple tables. The following example opens the database using the <code>constructor</code> method: .initialize.</p>\n\n<pre name=\"code\" class=\"javascript\">var db = new Rho.Database(...);\n\n// destroy all tables in database\ndb.destroyTables({include: [], exclude: []});\n\n// destroy specified tables\ndb.destroyTables({include: ['table1', 'table2'], exclude: []});\n\n// destroy all but specified tables\ndb.destroyTables({include: [], exclude: ['table1', 'table2']});\n\n              \n</pre>\n\n"},"type":"document","minor":true,"parent":"https://developer.motorolasolutions.com/api/core/v3/places/38912"}