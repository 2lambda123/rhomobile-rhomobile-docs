{"visibility":"place","subject":"Logging","content":{"type":"text/html","text":"<div class='tableofcontents'> </div>\n\n<p>This guide should tell how to turn on logging, choices for log levels, how to send message to the log and how to retrieve the log file. This can be very useful when debugging your app to figure out exactly what is happening behind the scenes.</p>\n\n<h2>Enabling Logging</h2>\n\n<p>To enable logging for your Enterprise Browser app, you&rsquo;ll need to edit your config.xml file in the &lt;Logger&gt; section to tell the Enterprise Browser what type of log messages to report. There are five different levels of messages from the logger:</p>\n\n<h3>Log Messages</h3>\n\n<ul>\n<li>Error &ndash; Enables or Disables the logging of ERROR messages generated by Enterprise Browser. If we set this to 1, it enables the Error level only.</li>\n<li>Warning &ndash; Enables or Disables the logging of WARNING messages generated by Enterprise Browser. If we set this to 1, it enables the following levels i.e. Warning &amp; Error, even if Error level is not set to 1.</li>\n<li>Info &ndash; Enables or Disables the logging of INFORMATION messages generated by Enterprise Browser. If we set this to 1, it enables the following levels i.e. Info, Warning &amp; Error, even if Warning or Error levels is not set to 1.</li>\n<li>User &ndash; Enables or Disables the logging of messages from the user application. If we set this to 1, it enables the following levels i.e. User, Info, Warning &amp; Error, even if Info or Warning or Error levels is not set to 1. Data can be logged using the Log API.</li>\n<li>Memory &ndash; Enables or Disables the logging of memory usage in the system. Not applicable to the Enterprise Tablet.</li>\n</ul>\n\n\n<p>To enable any one of these types of messages, simply change the value to &lsquo;1&rsquo; as below:</p>\n\n<pre name=\"code\" class=\"xml\">&lt;Logger&gt;\n    &lt;LogProtocol value=\"FILE\"/&gt;\n    &lt;LogPort value=\"80\"/&gt;\n    &lt;LogURI value=\"file://%INSTALLDIR%/log.txt\"/&gt;\n    &lt;LogError value=\"1\"/&gt;\n    &lt;LogWarning value=\"0\"/&gt;\n    &lt;LogInfo value=\"0\"/&gt;\n    &lt;LogUser value=\"1\"/&gt;\n    &lt;LogMemory value=\"0\"/&gt;\n    &lt;LogMemPeriod value=\"5000\"/&gt;\n    &lt;LogMaxSize value=\"10\"/&gt;\n&lt;/Logger&gt;\n</pre>\n\n<p>In this example (the default log settings) we are enabling errors and user messages. This is generally enough for most issues that may need debugging.</p>\n\n<h3>Logging Options</h3>\n\n<p>There are a few more options you can see here so let&rsquo;s go over them as well.</p>\n\n<ul>\n<li>LogProtocol &ndash; Sets the protocol over which the logging data will be sent.\n\n<ul>\n<li>Possible Values &ndash; File or HTTP.</li>\n</ul>\n</li>\n<li>LogPort &ndash; The port over which the logging data will be sent (ignored for File protocol).\n\n<ul>\n<li>Possible Values &ndash; Any valid HTTP port.</li>\n</ul>\n</li>\n<li>LogURI &ndash; The URL or File name &amp; path to which logged data should be sent.\n\n<ul>\n<li>Possible Values &ndash; Any valid URL or fully qualified file name.</li>\n</ul>\n</li>\n<li>LogMemPeriod &ndash; Specifies the time interval at which memory logs will be generated periodically. Not applicable to the Enterprise Tablet.\n\n<ul>\n<li>Possible Values &ndash; Time in milliseconds.</li>\n</ul>\n</li>\n<li>LogMaxSize &ndash; The maximum size the log file should be allowed to reach, once the maximum size is reached no more logs will be saved.\n\n<ul>\n<li>Possible Values &ndash; File size in kilobytes.</li>\n</ul>\n</li>\n</ul>\n\n\n<h2>Logging Messages</h2>\n\n<p>Sometimes, you&rsquo;ll want to add messages to your code to get more visibility into what is going on inside your app. Usually, the easiest way to do this is to add some kind of print statement to the segment into which you need insight. In JavaScript, this is done via the <code>console.log()</code> method. For instance, if I wanted to know the contents of the variable &lsquo;name&rsquo; I would do something similar to the following:</p>\n\n<pre name=\"code\" class=\"javascript\">var name = \"firstName\";\nconsole.log(\"Name: \" + name);\n</pre>\n\n<p>And the name I have just sett will be printed to the log file in the form of a line with the contents &ldquo;Name: firstName&rdquo;. This is a very useful way to determine if the data in your app is formed they way it should be or if the data is where you think it is at all. If you are getting a null value on a variable that you think must have data in it, you can print it out in the log file to make sure it&rsquo;s actually getting defined.</p>\n\n<h2>Retrieving the Log File</h2>\n\n<p>Once you have sufficient data output to the log, you may want to actually see the logs so you can determine what is happening in the app. The log file is in a different place depending on what platform your Enterprise Browser app is running on.</p>\n\n<h3>Android</h3>\n\n<p>On Android your log file will be in <code>/Android/data/com.symbol.enterprisebrowser/</code> with all the other app data.</p>\n\n<h3>Windows Mobile / CE</h3>\n\n<p>On a Windows Mobile or Windows CE device, your log file will be in <code>/Program Files/Enterprise Browser/log/</code>.</p>\n"},"type":"document","minor":true,"parent":"https://developer.motorolasolutions.com/api/core/v3/places/38904"}