{"visibility":"place","subject":"Using Rhom in JavaScript","content":{"type":"text/html","text":"<div class='tableofcontents'> </div>\n\n<!-- TBD - Tweak this for EB specific. Came from http://docs.rhomobile.com/en/4.1.0/guide/rhom_js -->\n\n\n<h2>Creating a JavaScript Model</h2>\n\n<p>The first step in order to use Rhom is to create a model class with the required attributes. You can create models from JavaScript using the <a href=\"../api/Orm#maddModel\">ORM.addModel</a> method. What this method does is define a class reference for your model so it is available to the rest of your application. When your application pages load, you must execute the <code>Rho.ORM.addModel</code> function for every model that you wish to define in your application.</p>\n\n<pre name=\"code\" class=\"javascript\">// Models MUST be defined when your HTML pages load\n\n// You can either set a global reference \nvar userModel = Rho.ORM.addModel(function(model) {\n    model.modelName('User');\n    model.property('name','string');\n    model.property('email','string');\n    // optionally enable sync for rhoconnect applications\n    // model.enable('sync');\n    // optionally, define the model as fixed schema default is propertyBag\n    // model.enable('fixedSchema');\n});\n\n// Or just define the model without a global reference\nRho.ORM.addModel(function(model) {\n    model.modelName('Product');\n    model.property('name','string');\n    model.property('qty','string');\n});\n</pre>\n\n<p>Once created, models can be retrieved using the <code>ORM.getModel</code> method.</p>\n\n<pre name=\"code\" class=\"javascript\">var productModel = Rho.ORM.getModel('Product');\n</pre>\n\n<p><strong>NOTE: It is advised that you either use the Ruby or JavaScript methods for handling model definition and access and not do this from <b>both</> languages. </strong></p>\n\n<h2>Adding new items</h2>\n\n<p>Use the <code>create</code> method to create a new model object and save it to the database.</p>\n\n<p>NOTE: This is the fastest way to insert a single item into the database.</p>\n\n<pre name=\"code\" class=\"javascript\">var user = userModel.create({\n            name: 'Alice', \n            email: 'alice@example.com'});\n</pre>\n\n<p>You can also create the new model object without saving it automatically and then explicitly use the <code>save</code> method. This is useful when you want to update some of the object attributes before saving.</p>\n\n<pre name=\"code\" class=\"javascript\">var user = userModel.make({name: 'Alice'});\n// update the object\nuser.email = 'alice@example.com';\nuser.save();\n</pre>\n\n<h2>Retrieving objects</h2>\n\n<p>You can retrieve all objects for a model or only those matching given conditions using the <code>find</code> method.</p>\n\n<h3>Getting all objects for a model</h3>\n\n<pre name=\"code\" class=\"javascript\">var users = userModel.find('all');\n</pre>\n\n<h3>Finding objects matching conditions</h3>\n\n<pre name=\"code\" class=\"javascript\">var users = userModel.find(\n                'all', \n                {\n                    conditions: {name: 'Alice'}\n                }\n            );\n</pre>\n\n<h3>Ordering the objects</h3>\n\n<p>You can retrieve objects sorted by one or more attributes using the <code>order</code> and <code>orderdir</code> parameters.</p>\n\n<pre name=\"code\" class=\"javascript\">// order by one attribute\nvar users = userModel.find(\n                'all', \n                {\n                    order: 'name', \n                    orderdir: 'DESC', \n                    conditions: {...} // JavaScript API requires conditions\n                }\n            );\n\n// order by multiple attributes\nvar users = userModel.find(\n                'all', \n                {\n                    order: ['name', 'email'], \n                    orderdir: ['ASC', 'DESC'], \n                    conditions: {...} // JavaScript API requires conditions\n                }\n            );\n</pre>\n\n<p>You can also sort with an user defined function.</p>\n\n<pre name=\"code\" class=\"javascript\">// order by one attribute\nvar users = userModel.find(\n    'all',\n    {\n        orderFunction: function(a, b) { return a &lt;= b }\n    }\n); \n\n// order by multiple attributes\nvar users = userModel.find(\n    'all',\n    {\n        orderFunction: function(a, b) {\n                return a.name &lt;= b.name &amp;&amp; a.email &lt;= b.email\n            }\n    }\n);\n</pre>\n\n<p><strong>NOTE: Whenever possible, use <code>order</code> instead of <code>orderFunction</code>. The database will sort objects faster than JavaScript code.</strong></p>\n\n<h3>Retrieving specific attributes</h3>\n\n<p>If, for a particular action, you do not need every attribute in an object, you can make your application faster by selecting only the specific attributes you need using the <code>select</code> parameter.</p>\n\n<p>JavaScript syntax:</p>\n\n<pre name=\"code\" class=\"javascript\">var users = userModel.find(\n                'all', \n                {\n                    select: ['name'],\n                    conditions: {...} // JavaScript API requires conditions\n                }\n            );\n</pre>\n\n<h3>Retrieving only the first object matching conditions</h3>\n\n<p>You can get only the first object matching given conditions using <code>first</code> instead of <code>all</code> when calling <code>find</code>.</p>\n\n<pre name=\"code\" class=\"javascript\">var user = userModel.find(\n                'first', \n                {\n                    conditions: {name: 'Alice'}\n                }\n            );\n</pre>\n\n<h2>Counting objects</h2>\n\n<p>You can get the number of objects matching given conditions using the <code>count</code> parameter with <code>find</code> method.</p>\n\n<p>JavaScript syntax:</p>\n\n<pre name=\"code\" class=\"javascript\">var count = userModel.find(\n                'count', \n                {\n                    conditions: {name: 'Alice'}\n                }\n            );\n</pre>\n\n<h2>Updating</h2>\n\n<p>You can update an objectâ€™s attributes and save it to the database using the <code>updateAttributes</code> method</p>\n\n<p>NOTE: This is the fastest way to add or update item attributes.</p>\n\n<p>JavaScript syntax:</p>\n\n<pre name=\"code\" class=\"javascript\">var user = userModel.find('first', {conditions: {name: 'Alice'});\nuser.updateAttributes({\n        name: 'Bob', \n        email: 'bob@example.com'});\n</pre>\n\n<h2>Deleting</h2>\n\n<h3>Deleting one object</h3>\n\n<p>To delete one model object use the <code>destroy</code> method on the object to be deleted.</p>\n\n<p>JavaScript syntax:</p>\n\n<pre name=\"code\" class=\"javascript\">var user = userModel.find('first');\nuser.destroy();\n</pre>\n\n<h3>Delete multiple objects</h3>\n\n<p>To delete all objects for a model, or only those matching given conditions, use the <code>deleteAll</code> method.</p>\n\n<p>JavaScript syntax:</p>\n\n<pre name=\"code\" class=\"javascript\">// delete all objects\nuserModel.deleteAll();\n\n// delete only objects matching :conditions\nuserModel.deleteAll({conditions: {name: 'Alice'}})\n</pre>\n\n<h2>Transactions</h2>\n\n<p>Use transactions to group together database operations that must either succeed or fail as a group, without leaving any partially completed operations. You can combine any set of object/model operations like insert/update/delete under a transaction.</p>\n\n<pre name=\"code\" class=\"javascript\">// open 'app' partition\nvar db = new Rho.Database(Rho.Application.databaseFilePath('app'),'app');\ndb.startTransaction();\ntry\n{\n    // do multiple operations\n    db.executeSql(\"update User set name=?, email=? where object=?\",[\"Alice\",\"alice@example.com\",\"12345\"]);\n    db.executeSql(\"update User set name=?, email=? where object=?\",[\"Bob\",\"bob@example.com\",\"67890\"]);\n\n    // no errors, so commit all the changes\n    db.commitTransaction();\n}\ncatch\n{\n    // on error rollback all changes\n    db.rollbackTransaction();\n}\nfinally // always close every database connection you open\n{\n    db.close();\n}\n</pre>\n\n<h2>Executing SQL</h2>\n\n<p>You can execute SQL statements directly on the database by using <code>Database.executeSql</code> method.</p>\n\n<p>JavaScript syntax:</p>\n\n<pre name=\"code\" class=\"javascript\">try {\n\n\nvar db = new Rho.Database(Rho.Application.databaseFilePath('app'),'app');\nvar result = db.executeSql('SELECT * FROM User');  // result is an array of hashes, where each hash is a record\n} finally {\n    db.close();\n}\n</pre>\n\n<p>You can execute a series of SQL statements in a single method call by using <code>Database.executeBatchSql</code> method.</p>\n\n<pre name=\"code\" class=\"javascript\">db.executeBatchSql(\"UPDATE User set valid=0; Update Account set active=0\");\n</pre>\n\n<h2>Resetting database</h2>\n\n<p>You can use the following method for recovering the database from a bad or corrupt state or if the RhoConnect server returns errors.</p>\n\n<h3>Delete all objects for given models.</h3>\n\n<p>JavaScript syntax:</p>\n\n<pre name=\"code\" class=\"javascript\">Rho.ORM.databaseFullResetEx({'models': ['User'], 'reset_client_info': true, 'reset_local_models': true});\n</pre>\n\n<h2>Related reading</h2>\n\n<ul>\n<li><a href=\"https://developer.motorolasolutions.com/docs/DOC-2406\">Database API reference</a></li>\n<li><a href=\"https://developer.motorolasolutions.com/docs/DOC-2439\">ORM API reference</a></li>\n<li><a href=\"https://developer.motorolasolutions.com/docs/DOC-2430\">ORMModel API reference</a></li>\n</ul>\n\n"},"type":"document","minor":true,"parent":"https://developer.motorolasolutions.com/api/core/v3/places/38904"}