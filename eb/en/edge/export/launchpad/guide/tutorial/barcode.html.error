{"visibility":"place","subject":"Barcode API Tutorial","content":{"type":"text/html","text":"<div class='tableofcontents'> </div>\n\n<p>This tutorial covers the use of the Enterprise Browser Barcode API.</p>\n\n<h2>Prerequisites</h2>\n\n<p>The following are required to complete this tutorial:</p>\n\n<ul>\n<li>A background in HTML, CSS and JavaScript coding</li>\n<li>Enterprise Browser installed on a development PC</li>\n<li>A Zebra mobile device and USB cable</li>\n<li>Enterprise Browser installed on the Zebra device</li>\n</ul>\n\n\n<h2>Coding for the Barcode API</h2>\n\n<p>Enterprise Browser includes an API for scanning barcodes. The steps shown below are typical for code that uses this API. The following tutorial will walk through creating a working barcode example application using these steps.</p>\n\n<p><img src=\"http://ebzebra.github.io/docs/1.3/images/eb_tutorials/Barcode_API_tutorial_01.png\" alt=\"img\" /></p>\n\n<p>The resulting application will look like this:</p>\n\n<p><img src=\"http://ebzebra.github.io/docs/1.3/images/eb_tutorials/Barcode_API_tutorial_02.png\" alt=\"img\" /></p>\n\n<h2>Creating the App</h2>\n\n<p>The following HTML template will be used as a starting point for this tutorial. It includes the following features:</p>\n\n<ul>\n<li>Home button that returns the user to an Enterprise Browser index page</li>\n<li>Quit button that exits Enterprise Browser</li>\n<li>Styling to size components in an appropriate manner for use on a device</li>\n</ul>\n\n\n<p>HTML Starter Template:</p>\n\n<pre name=\"code\" class=\"html\">&lt;HTML&gt;\n    &lt;HEAD&gt;\n        &lt;style&gt;\n        h1{font-size:2.5em;background-color:lightgray;margin:5px;padding:5px;}\n        button{font-size:.5em;}\n        input{font-size:1.3em;}\n        #scanData{width:90%;margin:10px;}\n        &lt;/style&gt;\n    &lt;/HEAD&gt;\n    &lt;BODY&gt;\n        &lt;h1&gt;Barcode&lt;br/&gt;\n        &lt;button onclick=\"window.location.href='./index.html'\"&gt;Home&lt;/button&gt;\n        &lt;button onclick=\"EB.Application.quit();\"&gt;Quit&lt;/button&gt;\n        &lt;/h1&gt;\n        &lt;div id=content&gt;\n        &lt;/div&gt;\n    &lt;/BODY&gt;\n&lt;SCRIPT&gt;\n&lt;/SCRIPT&gt;\n&lt;/HTML&gt;\n</pre>\n\n<h3>STEP 1: Create the application file</h3>\n\n<ul>\n<li><strong>Create a directory</strong> on your development machine for application files.</li>\n<li><strong>Create a file named <code>barcode.html</code></strong> in your application directory and open it in a text editor. Make sure the app isn&rsquo;t adding an invisible &lsquo;.txt&rsquo; extension.</li>\n<li><strong>Copy and paste the contents of the starter template above into the file</strong> and save it.</li>\n</ul>\n\n\n<h3>STEP 2: Add input field and control buttons.</h3>\n\n<ul>\n<li><strong>Add an input field to the <code>content div</code> section</strong> of the <code>barcode.html</code> file you just created:</li>\n</ul>\n\n\n<p>Sample HTML:</p>\n\n<pre name=\"code\" class=\"html\">&lt;input id=\"scanData\" type=text &gt;&lt;br/&gt;\n</pre>\n\n<p>Next we&rsquo;ll add two buttons: one to enable scanning and another to disable scanning. We&rsquo;ll append these two lines of code in a later step. For now:</p>\n\n<ul>\n<li><strong>Add two input buttons immediately after the input field</strong>:</li>\n</ul>\n\n\n<p>Sample HTML:</p>\n\n<pre name=\"code\" class=\"html\">&lt;input type=button value=\"Enable Scan\"&gt;\n&lt;input type=button value=\"Disable Scan\"&gt;        \n</pre>\n\n<h3>STEP 3: Include the API JavaScript file</h3>\n\n<p>The Barcode API requires the Enterprise Browser API JavaScript file.</p>\n\n<ul>\n<li><strong>Copy the <code>ebapi-modules.js</code> file</strong> from <strong>C:\\EnterpriseBrowser\\JavaScriptFiles\\EnterpriseBrowser</strong> to your application directory.</li>\n</ul>\n\n\n<p>To include this JavaScript file in your app,</p>\n\n<ul>\n<li><strong>Add the following to <code>barcode.html</code></strong> as the first line in the HEAD section:</li>\n</ul>\n\n\n<p>Sample HTML:</p>\n\n<pre name=\"code\" class=\"html\">&lt;script type=\"text/javascript\" charset=\"utf-8\" src=\"./ebapi-modules.js\"&gt;&lt;/script&gt;\n</pre>\n\n<h3>STEP 4: Configure scanner settings and enable scanner</h3>\n\n<ul>\n<li><strong>Add the method<code>fnScanEnable()</code> to the SCRIPT section</strong> that appears <strong>between the end BODY tag and the end HTML tag</strong>:</li>\n</ul>\n\n\n<p>Sample JavaScript:</p>\n\n<pre name=\"code\" class=\"JavaScript\">function fnScanEnable() { \n    EB.Barcode.enable({allDecoders:true},fnBarcodeScanned); \n    document.getElementById('scanData').value \n = \"enabled: press HW trigger to capture.\";   \n}\n</pre>\n\n<p>In this method, two parameters are being passed to the <code>enable()</code> method. The first parameter is a hash including settings for the scanner. The second is a callback function that will be executed when data has been successfully captured. The second line of code displays a message notifying the user that the device is ready to scan.</p>\n\n<h3>STEP 5: Trigger a scan</h3>\n\n<p>In the demo app, <strong>scans will be triggered by pressing the device&rsquo;s hardware trigger button</strong>. If desired, <strong>it&rsquo;s also possible to trigger scans from an on-screen button by setting up the button to call the <code>EB.Barcode.start()</code> method</strong>.</p>\n\n<p>For more information about using this method, please refer to the <a href=\"https://developer.motorolasolutions.com/docs/DOC-2510\">Enterprise Browser Barcode API documentation</a>.</p>\n\n<h3>STEP 6: Process the results</h3>\n\n<ul>\n<li><strong>Add the method<code>fnBarcodeScanned()</code> at the end of the SCRIPT section</strong> to process scan results:</li>\n</ul>\n\n\n<p>Sample JavaScript:</p>\n\n<pre name=\"code\" class=\"JavaScript\">function fnBarcodeScanned(jsonObject) {\n console.log(\"Barcode Scanned:{\" + JSON.stringify(jsonObject) + \"}\");\n document.getElementById('scanData').value = \"barcode: \" + jsonObject.data;\n}\n</pre>\n\n<p><code>fnBarcodeScanned()</code> is a callback function we passed to <code>enable()</code>in the previous method. The JSON object passed to the function contains data captured during the scan. A <code>console.log()</code> statement is used to show the JSON object&rsquo;s contents for testing purposes. The last line takes the data attribute from the object and displays it in a text input field.</p>\n\n<h3>STEP 7: Disable the scanner</h3>\n\n<ul>\n<li><strong>Add the method <code>fnScanDisable()</code> to the SCRIPT section</strong>:</li>\n</ul>\n\n\n<p>Sample JavaScript:</p>\n\n<pre name=\"code\" class=\"JavaScript\">function fnScanDisable() { \nEB.Barcode.disable(); \ndocument.getElementById('scanData').value = \"disabled: press 'enable' to scan.\";  \n}\n</pre>\n\n<p>The <code>EB.Barcode.disable()</code> method on the first line shuts down the scanner and prevents additional data captures. The second line displays a message for the user.</p>\n\n<h3>STEP 8: Hook JavaScript method to buttons</h3>\n\n<p>Now that the JavaScript functions have been created, we can hook them to the control buttons.</p>\n\n<ul>\n<li><strong>In <code>barcode.html</code>, append <code>onClick</code> handler code to the input button tags</strong> we created earlier (or simply replace the buttons created earlier with the function-appended button code below):</li>\n</ul>\n\n\n<p>Sample HTML:</p>\n\n<pre name=\"code\" class=\"HTML\">&lt;input type=button value=\"Enable Scan\" onClick=\"fnScanEnable();\"&gt;\n&lt;input type=button value=\"Disable Scan\" onClick=\"fnScanDisable();\"&gt;         \n</pre>\n\n<h3>STEP 9: Copy files to the device</h3>\n\n<p>To test the application, you need to copy the application files to the device and set the StartPage setting in the Enterprise Browser <code>config.xml</code> file. Android- and Windows-based devices use different methods for transferring files. Please see the documentation for your device for specific instructions on copying files.</p>\n\n<p>In general, here&rsquo;s what is required:</p>\n\n<ol>\n<li><strong>Create a directory on your device</strong> for the Barcode application. Make sure the directory is in an unrestricted location to avoid any permissions issues when Enterprise Browser tries to open the files. We&rsquo;ll place our sample app&rsquo;s files in the device&rsquo;s root directory and show you how to modify the <code>config.xml</code> file accordingly.</li>\n<li><strong>Copy the <code>barcode.html</code> and any JavaScript API files</strong> you have included to the directory you created on the device.</li>\n<li><strong>Copy the <code>config.xml</code> file to a suitable location on the development machine</strong> from the Enterprise Browser install directory on the device and open it in a text editor.</li>\n<li><strong>Update the StartPage setting in <code>config.xml</code> to point to the location on the device</strong> where you placed <code>barcode.html</code> and save the changes.</li>\n<li><strong>Copy the <code>config.xml</code> file back to its original location on the device</strong>.</li>\n</ol>\n\n\n<p>Sample <code>config.xml</code> showing path to Android app in root directory:</p>\n\n<pre name=\"code\" class=\"HTML\">    &lt;General&gt;\n        &lt;Name value=\"Barcode\"/&gt;\n        &lt;StartPage value=\"file:///barcode.html\" name=\"Barcode\"/&gt;\n        &lt;UseRegularExpressions value=\"1\"/&gt;\n    &lt;/General&gt;\n</pre>\n\n<h2>STEP 10: Testing the app</h2>\n\n<ul>\n<li><strong>Tap the Enterprise Browser icon on the device</strong>. If the device is not yet licensed for Enterprise Browser, you will see the following screen:</li>\n</ul>\n\n\n<p><img src=\"http://ebzebra.github.io/docs/1.3/images/eb_tutorials/Barcode_API_tutorial_03.png\" alt=\"img\" /></p>\n\n<ul>\n<li><strong>Click on the cancel button</strong> in the upper right hand corner of the screen to dismiss the message and open the Barcode app. If you turn the device sideways it should look like this:</li>\n</ul>\n\n\n<p><img src=\"http://ebzebra.github.io/docs/1.3/images/eb_tutorials/Barcode_API_tutorial_04.png\" alt=\"img\" /></p>\n\n<ul>\n<li><strong>Click on the Enable Scan button</strong>.</li>\n</ul>\n\n\n<p><img src=\"http://ebzebra.github.io/docs/1.3/images/eb_tutorials/Barcode_API_tutorial_05.png\" alt=\"img\" /></p>\n\n<ul>\n<li><strong>Press the device&rsquo;s hardware trigger button</strong>, point the device at a barcode and wait until you hear a beep signaling that the code has been captured. You should see the barcode number displayed in the input field.</li>\n</ul>\n\n\n<p><img src=\"http://ebzebra.github.io/docs/1.3/images/eb_tutorials/Barcode_API_tutorial_06.png\" alt=\"img\" /></p>\n\n<ul>\n<li><strong>Click the Disable Scan button</strong>. Then try pressing the device&rsquo;s hardware trigger again. This time the device should not scan.</li>\n</ul>\n\n\n<p><img src=\"http://ebzebra.github.io/docs/1.3/images/eb_tutorials/Barcode_API_tutorial_07.png\" alt=\"img\" /></p>\n\n<h3>Conclusion</h3>\n\n<p>This completes the Enterprise Browser Barcode API tutorial. For more information on the Barcode API, please refer to the <a href=\"https://developer.motorolasolutions.com/docs/DOC-2510\">Enterprise Browser Barcode API documentation</a>.</p>\n"},"type":"document","minor":true,"parent":"https://developer.motorolasolutions.com/api/core/v3/places/38904"}